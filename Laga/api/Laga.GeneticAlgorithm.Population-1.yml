### YamlMime:ManagedReference
items:
- uid: Laga.GeneticAlgorithm.Population`1
  commentId: T:Laga.GeneticAlgorithm.Population`1
  id: Population`1
  parent: Laga.GeneticAlgorithm
  children:
  - Laga.GeneticAlgorithm.Population`1.#ctor
  - Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)
  - Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})
  - Laga.GeneticAlgorithm.Population`1.Count
  - Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)
  - Laga.GeneticAlgorithm.Population`1.FitnessAverage
  - Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)
  - Laga.GeneticAlgorithm.Population`1.GetEnumerator
  - Laga.GeneticAlgorithm.Population`1.Higher
  - Laga.GeneticAlgorithm.Population`1.Lower
  langs:
  - csharp
  - vb
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  type: Class
  source:
    id: Population
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 12
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nCreate and Manipulate Populations\n"
  example: []
  syntax:
    content: 'public class Population<T> : IEnumerable'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Class Population(Of T)
          Implements IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Population(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
- uid: Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Population(Int32)
  nameWithType: Population<T>.Population(Int32)
  fullName: Laga.GeneticAlgorithm.Population<T>.Population(System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 19
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public Population(int SizePopulation)
    parameters:
    - id: SizePopulation
      type: System.Int32
      description: ''
    content.vb: Public Sub New(SizePopulation As Integer)
  overload: Laga.GeneticAlgorithm.Population`1.#ctor*
  nameWithType.vb: Population(Of T).Population(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Population(System.Int32)
- uid: Laga.GeneticAlgorithm.Population`1.#ctor
  commentId: M:Laga.GeneticAlgorithm.Population`1.#ctor
  id: '#ctor'
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Population()
  nameWithType: Population<T>.Population()
  fullName: Laga.GeneticAlgorithm.Population<T>.Population()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 27
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public Population()
    content.vb: Public Sub New
  overload: Laga.GeneticAlgorithm.Population`1.#ctor*
  nameWithType.vb: Population(Of T).Population()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Population()
- uid: Laga.GeneticAlgorithm.Population`1.Count
  commentId: P:Laga.GeneticAlgorithm.Population`1.Count
  id: Count
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Population<T>.Count
  fullName: Laga.GeneticAlgorithm.Population<T>.Count
  type: Property
  source:
    id: Count
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 37
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Laga.GeneticAlgorithm.Population`1.Count*
  nameWithType.vb: Population(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Count
- uid: Laga.GeneticAlgorithm.Population`1.Higher
  commentId: M:Laga.GeneticAlgorithm.Population`1.Higher
  id: Higher
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Higher()
  nameWithType: Population<T>.Higher()
  fullName: Laga.GeneticAlgorithm.Population<T>.Higher()
  type: Method
  source:
    id: Higher
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 49
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nReturn the Higher Ranked Chromosome based on the fitness evaluation\n"
  example: []
  syntax:
    content: public Chromosome<T> Higher()
    return:
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: ''
    content.vb: Public Function Higher As Chromosome(Of T)
  overload: Laga.GeneticAlgorithm.Population`1.Higher*
  nameWithType.vb: Population(Of T).Higher()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Higher()
- uid: Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})
  commentId: M:Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})
  id: Add(Laga.GeneticAlgorithm.Chromosome{`0})
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Add(Chromosome<T>)
  nameWithType: Population<T>.Add(Chromosome<T>)
  fullName: Laga.GeneticAlgorithm.Population<T>.Add(Laga.GeneticAlgorithm.Chromosome<T>)
  type: Method
  source:
    id: Add
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 59
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(Chromosome<T> chromosome)
    parameters:
    - id: chromosome
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: ''
    content.vb: Public Sub Add(chromosome As Chromosome(Of T))
  overload: Laga.GeneticAlgorithm.Population`1.Add*
  nameWithType.vb: Population(Of T).Add(Chromosome(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Add(Laga.GeneticAlgorithm.Chromosome(Of T))
  name.vb: Add(Chromosome(Of T))
- uid: Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)
  id: Delete(System.Int32)
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Delete(Int32)
  nameWithType: Population<T>.Delete(Int32)
  fullName: Laga.GeneticAlgorithm.Population<T>.Delete(System.Int32)
  type: Method
  source:
    id: Delete
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 68
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public void Delete(int index)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    content.vb: Public Sub Delete(index As Integer)
  overload: Laga.GeneticAlgorithm.Population`1.Delete*
  nameWithType.vb: Population(Of T).Delete(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Delete(System.Int32)
- uid: Laga.GeneticAlgorithm.Population`1.Lower
  commentId: M:Laga.GeneticAlgorithm.Population`1.Lower
  id: Lower
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: Lower()
  nameWithType: Population<T>.Lower()
  fullName: Laga.GeneticAlgorithm.Population<T>.Lower()
  type: Method
  source:
    id: Lower
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 76
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nReturn the Lower ranked chromosome based on the fitness evaluation\n"
  example: []
  syntax:
    content: public Chromosome<T> Lower()
    return:
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: ''
    content.vb: Public Function Lower As Chromosome(Of T)
  overload: Laga.GeneticAlgorithm.Population`1.Lower*
  nameWithType.vb: Population(Of T).Lower()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Lower()
- uid: Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)
  id: GetChromosome(System.Int32)
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: GetChromosome(Int32)
  nameWithType: Population<T>.GetChromosome(Int32)
  fullName: Laga.GeneticAlgorithm.Population<T>.GetChromosome(System.Int32)
  type: Method
  source:
    id: GetChromosome
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 86
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public Chromosome<T> GetChromosome(int index)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: ''
    content.vb: Public Function GetChromosome(index As Integer) As Chromosome(Of T)
  overload: Laga.GeneticAlgorithm.Population`1.GetChromosome*
  nameWithType.vb: Population(Of T).GetChromosome(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).GetChromosome(System.Int32)
- uid: Laga.GeneticAlgorithm.Population`1.FitnessAverage
  commentId: M:Laga.GeneticAlgorithm.Population`1.FitnessAverage
  id: FitnessAverage
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: FitnessAverage()
  nameWithType: Population<T>.FitnessAverage()
  fullName: Laga.GeneticAlgorithm.Population<T>.FitnessAverage()
  type: Method
  source:
    id: FitnessAverage
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 95
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public double FitnessAverage()
    return:
      type: System.Double
      description: ''
    content.vb: Public Function FitnessAverage As Double
  overload: Laga.GeneticAlgorithm.Population`1.FitnessAverage*
  nameWithType.vb: Population(Of T).FitnessAverage()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).FitnessAverage()
- uid: Laga.GeneticAlgorithm.Population`1.GetEnumerator
  commentId: M:Laga.GeneticAlgorithm.Population`1.GetEnumerator
  id: GetEnumerator
  parent: Laga.GeneticAlgorithm.Population`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Population<T>.GetEnumerator()
  fullName: Laga.GeneticAlgorithm.Population<T>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Population.cs
    startLine: 111
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nIEnumerator\n"
  example: []
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: Laga.GeneticAlgorithm.Population`1.GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Population(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).GetEnumerator()
references:
- uid: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  name: Laga.GeneticAlgorithm
  nameWithType: Laga.GeneticAlgorithm
  fullName: Laga.GeneticAlgorithm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Laga.GeneticAlgorithm.Population`1.#ctor*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.#ctor
  name: Population
  nameWithType: Population<T>.Population
  fullName: Laga.GeneticAlgorithm.Population<T>.Population
  nameWithType.vb: Population(Of T).Population
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Population
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.GeneticAlgorithm.Population`1.Count*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.Count
  name: Count
  nameWithType: Population<T>.Count
  fullName: Laga.GeneticAlgorithm.Population<T>.Count
  nameWithType.vb: Population(Of T).Count
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Count
- uid: Laga.GeneticAlgorithm.Population`1.Higher*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.Higher
  name: Higher
  nameWithType: Population<T>.Higher
  fullName: Laga.GeneticAlgorithm.Population<T>.Higher
  nameWithType.vb: Population(Of T).Higher
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Higher
- uid: Laga.GeneticAlgorithm.Chromosome{{T}}
  commentId: T:Laga.GeneticAlgorithm.Chromosome{`0}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Chromosome`1
  name: Chromosome<T>
  nameWithType: Chromosome<T>
  fullName: Laga.GeneticAlgorithm.Chromosome<T>
  nameWithType.vb: Chromosome(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Chromosome(Of T)
  name.vb: Chromosome(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Chromosome`1
  commentId: T:Laga.GeneticAlgorithm.Chromosome`1
  name: Chromosome<T>
  nameWithType: Chromosome<T>
  fullName: Laga.GeneticAlgorithm.Chromosome<T>
  nameWithType.vb: Chromosome(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Chromosome(Of T)
  name.vb: Chromosome(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Population`1.Add*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.Add
  name: Add
  nameWithType: Population<T>.Add
  fullName: Laga.GeneticAlgorithm.Population<T>.Add
  nameWithType.vb: Population(Of T).Add
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Add
- uid: Laga.GeneticAlgorithm.Population`1.Delete*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.Delete
  name: Delete
  nameWithType: Population<T>.Delete
  fullName: Laga.GeneticAlgorithm.Population<T>.Delete
  nameWithType.vb: Population(Of T).Delete
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Delete
- uid: Laga.GeneticAlgorithm.Population`1.Lower*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.Lower
  name: Lower
  nameWithType: Population<T>.Lower
  fullName: Laga.GeneticAlgorithm.Population<T>.Lower
  nameWithType.vb: Population(Of T).Lower
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).Lower
- uid: Laga.GeneticAlgorithm.Population`1.GetChromosome*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.GetChromosome
  name: GetChromosome
  nameWithType: Population<T>.GetChromosome
  fullName: Laga.GeneticAlgorithm.Population<T>.GetChromosome
  nameWithType.vb: Population(Of T).GetChromosome
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).GetChromosome
- uid: Laga.GeneticAlgorithm.Population`1.FitnessAverage*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.FitnessAverage
  name: FitnessAverage
  nameWithType: Population<T>.FitnessAverage
  fullName: Laga.GeneticAlgorithm.Population<T>.FitnessAverage
  nameWithType.vb: Population(Of T).FitnessAverage
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).FitnessAverage
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Laga.GeneticAlgorithm.Population`1.GetEnumerator*
  commentId: Overload:Laga.GeneticAlgorithm.Population`1.GetEnumerator
  name: GetEnumerator
  nameWithType: Population<T>.GetEnumerator
  fullName: Laga.GeneticAlgorithm.Population<T>.GetEnumerator
  nameWithType.vb: Population(Of T).GetEnumerator
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T).GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
