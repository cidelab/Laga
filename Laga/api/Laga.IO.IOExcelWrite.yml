### YamlMime:ManagedReference
items:
- uid: Laga.IO.IOExcelWrite
  commentId: T:Laga.IO.IOExcelWrite
  id: IOExcelWrite
  parent: Laga.IO
  children:
  - Laga.IO.IOExcelWrite.#ctor(System.Boolean)
  - Laga.IO.IOExcelWrite.#ctor(System.String)
  - Laga.IO.IOExcelWrite.#ctor(System.String,System.Int32)
  - Laga.IO.IOExcelWrite.CheckExcelFile(System.String)
  - Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)
  - Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32,System.String)
  - Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp
  - Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)
  - Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean,System.Int32)
  - Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)
  - Laga.IO.IOExcelWrite.IOWriteItem(System.String,System.Int32,System.Int32)
  - Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)
  - Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)
  - Laga.IO.IOExcelWrite.ListDataExcel
  - Laga.IO.IOExcelWrite.MatrixDataExcel
  - Laga.IO.IOExcelWrite.SaveCloseExcelApp(System.String)
  - Laga.IO.IOExcelWrite.SheetNum
  - Laga.IO.IOExcelWrite.XlRange
  langs:
  - csharp
  - vb
  name: IOExcelWrite
  nameWithType: IOExcelWrite
  fullName: Laga.IO.IOExcelWrite
  type: Class
  source:
    id: IOExcelWrite
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 13
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nWrite data in excel\n"
  example: []
  syntax:
    content: public class IOExcelWrite
    content.vb: Public Class IOExcelWrite
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Laga.IO.IOExcelWrite.XlRange
  commentId: P:Laga.IO.IOExcelWrite.XlRange
  id: XlRange
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: XlRange
  nameWithType: IOExcelWrite.XlRange
  fullName: Laga.IO.IOExcelWrite.XlRange
  type: Property
  source:
    id: XlRange
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 32
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nGet and set the excel range.\n"
  example: []
  syntax:
    content: public Office.Interop.Excel.Range XlRange { get; set; }
    parameters: []
    return:
      type: Microsoft.Office.Interop.Excel.Range
    content.vb: Public Property XlRange As Office.Interop.Excel.Range
  overload: Laga.IO.IOExcelWrite.XlRange*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.SheetNum
  commentId: P:Laga.IO.IOExcelWrite.SheetNum
  id: SheetNum
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: SheetNum
  nameWithType: IOExcelWrite.SheetNum
  fullName: Laga.IO.IOExcelWrite.SheetNum
  type: Property
  source:
    id: SheetNum
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 47
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nget the sheet number \n"
  example: []
  syntax:
    content: public int SheetNum { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SheetNum As Integer
  overload: Laga.IO.IOExcelWrite.SheetNum*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.IO.IOExcelWrite.MatrixDataExcel
  commentId: P:Laga.IO.IOExcelWrite.MatrixDataExcel
  id: MatrixDataExcel
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: MatrixDataExcel
  nameWithType: IOExcelWrite.MatrixDataExcel
  fullName: Laga.IO.IOExcelWrite.MatrixDataExcel
  type: Property
  source:
    id: MatrixDataExcel
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 58
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nSet a nested list of strings.\n"
  example: []
  syntax:
    content: public List<List<string>> MatrixDataExcel { set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
    content.vb: Public WriteOnly Property MatrixDataExcel As List(Of List(Of String))
  overload: Laga.IO.IOExcelWrite.MatrixDataExcel*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: Laga.IO.IOExcelWrite.ListDataExcel
  commentId: P:Laga.IO.IOExcelWrite.ListDataExcel
  id: ListDataExcel
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: ListDataExcel
  nameWithType: IOExcelWrite.ListDataExcel
  fullName: Laga.IO.IOExcelWrite.ListDataExcel
  type: Property
  source:
    id: ListDataExcel
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 69
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nSet a nested list of strings.\n"
  example: []
  syntax:
    content: public List<string> ListDataExcel { set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public WriteOnly Property ListDataExcel As List(Of String)
  overload: Laga.IO.IOExcelWrite.ListDataExcel*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: Laga.IO.IOExcelWrite.CheckExcelFile(System.String)
  commentId: M:Laga.IO.IOExcelWrite.CheckExcelFile(System.String)
  id: CheckExcelFile(System.String)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: CheckExcelFile(String)
  nameWithType: IOExcelWrite.CheckExcelFile(String)
  fullName: Laga.IO.IOExcelWrite.CheckExcelFile(System.String)
  type: Method
  source:
    id: CheckExcelFile
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 82
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\ncheck if the file exists.\n"
  example: []
  syntax:
    content: public static bool CheckExcelFile(string path)
    parameters:
    - id: path
      type: System.String
      description: the path to the excel file
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Shared Function CheckExcelFile(path As String) As Boolean
  overload: Laga.IO.IOExcelWrite.CheckExcelFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.IO.IOExcelWrite.#ctor(System.String,System.Int32)
  commentId: M:Laga.IO.IOExcelWrite.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOExcelWrite(String, Int32)
  nameWithType: IOExcelWrite.IOExcelWrite(String, Int32)
  fullName: Laga.IO.IOExcelWrite.IOExcelWrite(System.String, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 97
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nSets the basic data to write in excel.\ndo not forget call the open and close.\n"
  example: []
  syntax:
    content: public IOExcelWrite(string FilePath, int SheetNumber)
    parameters:
    - id: FilePath
      type: System.String
      description: the direction to the file
    - id: SheetNumber
      type: System.Int32
      description: the number of the sheet to open
    content.vb: Public Sub New(FilePath As String, SheetNumber As Integer)
  overload: Laga.IO.IOExcelWrite.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.#ctor(System.Boolean)
  commentId: M:Laga.IO.IOExcelWrite.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOExcelWrite(Boolean)
  nameWithType: IOExcelWrite.IOExcelWrite(Boolean)
  fullName: Laga.IO.IOExcelWrite.IOExcelWrite(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 108
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nCreates and excel workbook.\ndo not forget call the open and close.\n"
  example: []
  syntax:
    content: public IOExcelWrite(bool display)
    parameters:
    - id: display
      type: System.Boolean
      description: true, will display the workboook
    content.vb: Public Sub New(display As Boolean)
  overload: Laga.IO.IOExcelWrite.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.#ctor(System.String)
  commentId: M:Laga.IO.IOExcelWrite.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOExcelWrite(String)
  nameWithType: IOExcelWrite.IOExcelWrite(String)
  fullName: Laga.IO.IOExcelWrite.IOExcelWrite(System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 118
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nSets the basic data to write in excel.\ndo not forget call the open and close.\n"
  example: []
  syntax:
    content: public IOExcelWrite(string FilePath)
    parameters:
    - id: FilePath
      type: System.String
      description: adress to the file
    content.vb: Public Sub New(FilePath As String)
  overload: Laga.IO.IOExcelWrite.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32,System.String)
  commentId: M:Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32,System.String)
  id: IOWrite_NewExcelSheet(System.Int32,System.String)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWrite_NewExcelSheet(Int32, String)
  nameWithType: IOExcelWrite.IOWrite_NewExcelSheet(Int32, String)
  fullName: Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32, System.String)
  type: Method
  source:
    id: IOWrite_NewExcelSheet
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 129
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nCreates and excel sheet to write on.\n"
  example: []
  syntax:
    content: public void IOWrite_NewExcelSheet(int pos, string name)
    parameters:
    - id: pos
      type: System.Int32
      description: The sheet position number
    - id: name
      type: System.String
      description: The sheet name name
    content.vb: Public Sub IOWrite_NewExcelSheet(pos As Integer, name As String)
  overload: Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)
  commentId: M:Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)
  id: IOWrite_SetActiveSheet(System.Int32)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWrite_SetActiveSheet(Int32)
  nameWithType: IOExcelWrite.IOWrite_SetActiveSheet(Int32)
  fullName: Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)
  type: Method
  source:
    id: IOWrite_SetActiveSheet
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 140
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nActivates a specific Excel sheet to write on.\n"
  example: []
  syntax:
    content: public void IOWrite_SetActiveSheet(int pos)
    parameters:
    - id: pos
      type: System.Int32
      description: The position of the excel sheet in the document.
    content.vb: Public Sub IOWrite_SetActiveSheet(pos As Integer)
  overload: Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWriteItem(System.String,System.Int32,System.Int32)
  commentId: M:Laga.IO.IOExcelWrite.IOWriteItem(System.String,System.Int32,System.Int32)
  id: IOWriteItem(System.String,System.Int32,System.Int32)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWriteItem(String, Int32, Int32)
  nameWithType: IOExcelWrite.IOWriteItem(String, Int32, Int32)
  fullName: Laga.IO.IOExcelWrite.IOWriteItem(System.String, System.Int32, System.Int32)
  type: Method
  source:
    id: IOWriteItem
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 155
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nWrite a single item to Excel...\n"
  example: []
  syntax:
    content: public void IOWriteItem(string strItem, int Row, int Col)
    parameters:
    - id: strItem
      type: System.String
      description: the item to write in excel
    - id: Row
      type: System.Int32
      description: The row position
    - id: Col
      type: System.Int32
      description: The column position
    content.vb: Public Sub IOWriteItem(strItem As String, Row As Integer, Col As Integer)
  overload: Laga.IO.IOExcelWrite.IOWriteItem*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)
  commentId: M:Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)
  id: IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWriteList(List<String>, Int32, Int32, Char)
  nameWithType: IOExcelWrite.IOWriteList(List<String>, Int32, Int32, Char)
  fullName: Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List<System.String>, System.Int32, System.Int32, System.Char)
  type: Method
  source:
    id: IOWriteList
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 167
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nWrite a list of strings in excel. the list length is calculated automatically.\n"
  example: []
  syntax:
    content: public void IOWriteList(List<string> lstString, int Row, int Col, char dir)
    parameters:
    - id: lstString
      type: System.Collections.Generic.List{System.String}
      description: The list of strings to write
    - id: Row
      type: System.Int32
      description: The row position
    - id: Col
      type: System.Int32
      description: The column position
    - id: dir
      type: System.Char
      description: The writing direction, &apos;c&apos; for top-down or &apos;r&apos; for left-right
    content.vb: Public Sub IOWriteList(lstString As List(Of String), Row As Integer, Col As Integer, dir As Char)
  overload: Laga.IO.IOExcelWrite.IOWriteList*
  nameWithType.vb: IOExcelWrite.IOWriteList(List(Of String), Int32, Int32, Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List(Of System.String), System.Int32, System.Int32, System.Char)
  name.vb: IOWriteList(List(Of String), Int32, Int32, Char)
- uid: Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)
  commentId: M:Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)
  id: IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWriteMatrix(List<List<String>>, Int32, Int32, Boolean)
  nameWithType: IOExcelWrite.IOWriteMatrix(List<List<String>>, Int32, Int32, Boolean)
  fullName: Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List<System.Collections.Generic.List<System.String>>, System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    id: IOWriteMatrix
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 195
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nWrite a nested list of strings in excel. The list length is calculated automatically.\n"
  example: []
  syntax:
    content: public void IOWriteMatrix(List<List<string>> matData, int Row, int Col, bool swap)
    parameters:
    - id: matData
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
      description: The nested list of strings to write
    - id: Row
      type: System.Int32
      description: The row position
    - id: Col
      type: System.Int32
      description: The column position
    - id: swap
      type: System.Boolean
      description: If true, write first the row, if false write first the column
    content.vb: Public Sub IOWriteMatrix(matData As List(Of List(Of String)), Row As Integer, Col As Integer, swap As Boolean)
  overload: Laga.IO.IOExcelWrite.IOWriteMatrix*
  nameWithType.vb: IOExcelWrite.IOWriteMatrix(List(Of List(Of String)), Int32, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.String)), System.Int32, System.Int32, System.Boolean)
  name.vb: IOWriteMatrix(List(Of List(Of String)), Int32, Int32, Boolean)
- uid: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp
  commentId: M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp
  id: IOWrite_OpenExcelApp
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWrite_OpenExcelApp()
  nameWithType: IOExcelWrite.IOWrite_OpenExcelApp()
  fullName: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp()
  type: Method
  source:
    id: IOWrite_OpenExcelApp
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 236
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nOpen an Excel document and display the document.\n"
  example: []
  syntax:
    content: public void IOWrite_OpenExcelApp()
    content.vb: Public Sub IOWrite_OpenExcelApp
  overload: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean,System.Int32)
  commentId: M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean,System.Int32)
  id: IOWrite_OpenExcelApp(System.Boolean,System.Int32)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWrite_OpenExcelApp(Boolean, Int32)
  nameWithType: IOExcelWrite.IOWrite_OpenExcelApp(Boolean, Int32)
  fullName: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean, System.Int32)
  type: Method
  source:
    id: IOWrite_OpenExcelApp
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 248
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nOpen an Excel document based on the constructor.\n"
  example: []
  syntax:
    content: public void IOWrite_OpenExcelApp(bool display, int sheetNum)
    parameters:
    - id: display
      type: System.Boolean
      description: Show the app
    - id: sheetNum
      type: System.Int32
      description: open the sheetnumber
    content.vb: Public Sub IOWrite_OpenExcelApp(display As Boolean, sheetNum As Integer)
  overload: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)
  commentId: M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)
  id: IOWrite_OpenExcelApp(System.Boolean)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: IOWrite_OpenExcelApp(Boolean)
  nameWithType: IOExcelWrite.IOWrite_OpenExcelApp(Boolean)
  fullName: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)
  type: Method
  source:
    id: IOWrite_OpenExcelApp
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 275
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nOpen an Excel document based on the constructor.\n"
  example: []
  syntax:
    content: public void IOWrite_OpenExcelApp(bool display)
    parameters:
    - id: display
      type: System.Boolean
      description: if is true, show the excel&quot;
    content.vb: Public Sub IOWrite_OpenExcelApp(display As Boolean)
  overload: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.SaveCloseExcelApp(System.String)
  commentId: M:Laga.IO.IOExcelWrite.SaveCloseExcelApp(System.String)
  id: SaveCloseExcelApp(System.String)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: SaveCloseExcelApp(String)
  nameWithType: IOExcelWrite.SaveCloseExcelApp(String)
  fullName: Laga.IO.IOExcelWrite.SaveCloseExcelApp(System.String)
  type: Method
  source:
    id: SaveCloseExcelApp
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 311
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nSave the Excel file and close safely the Excel application.\n"
  example: []
  syntax:
    content: public void SaveCloseExcelApp(string Path)
    parameters:
    - id: Path
      type: System.String
      description: The file name
    content.vb: Public Sub SaveCloseExcelApp(Path As String)
  overload: Laga.IO.IOExcelWrite.SaveCloseExcelApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)
  commentId: M:Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)
  id: CloseExcelApp(System.Boolean)
  parent: Laga.IO.IOExcelWrite
  langs:
  - csharp
  - vb
  name: CloseExcelApp(Boolean)
  nameWithType: IOExcelWrite.CloseExcelApp(Boolean)
  fullName: Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)
  type: Method
  source:
    id: CloseExcelApp
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\IOExcelWrite.cs
    startLine: 342
  assemblies:
  - Laga
  namespace: Laga.IO
  summary: "\nClose safely the Excel application and decide to save or not.\n"
  example: []
  syntax:
    content: public void CloseExcelApp(bool saveFile)
    parameters:
    - id: saveFile
      type: System.Boolean
      description: If true, the Excel file is saved.
    content.vb: Public Sub CloseExcelApp(saveFile As Boolean)
  overload: Laga.IO.IOExcelWrite.CloseExcelApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Laga.IO
  commentId: N:Laga.IO
  name: Laga.IO
  nameWithType: Laga.IO
  fullName: Laga.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.IO.IOExcelWrite.XlRange*
  commentId: Overload:Laga.IO.IOExcelWrite.XlRange
  name: XlRange
  nameWithType: IOExcelWrite.XlRange
  fullName: Laga.IO.IOExcelWrite.XlRange
- uid: Microsoft.Office.Interop.Excel.Range
  commentId: '!:Microsoft.Office.Interop.Excel.Range'
  isExternal: true
  name: Office.Interop.Excel.Range
  nameWithType: Office.Interop.Excel.Range
  fullName: Microsoft.Office.Interop.Excel.Range
- uid: Laga.IO.IOExcelWrite.SheetNum*
  commentId: Overload:Laga.IO.IOExcelWrite.SheetNum
  name: SheetNum
  nameWithType: IOExcelWrite.SheetNum
  fullName: Laga.IO.IOExcelWrite.SheetNum
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.IO.IOExcelWrite.MatrixDataExcel*
  commentId: Overload:Laga.IO.IOExcelWrite.MatrixDataExcel
  name: MatrixDataExcel
  nameWithType: IOExcelWrite.MatrixDataExcel
  fullName: Laga.IO.IOExcelWrite.MatrixDataExcel
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<String>>
  nameWithType: List<List<String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<System.String>>
  nameWithType.vb: List(Of List(Of String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.String))
  name.vb: List(Of List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Laga.IO.IOExcelWrite.ListDataExcel*
  commentId: Overload:Laga.IO.IOExcelWrite.ListDataExcel
  name: ListDataExcel
  nameWithType: IOExcelWrite.ListDataExcel
  fullName: Laga.IO.IOExcelWrite.ListDataExcel
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.IO.IOExcelWrite.CheckExcelFile*
  commentId: Overload:Laga.IO.IOExcelWrite.CheckExcelFile
  name: CheckExcelFile
  nameWithType: IOExcelWrite.CheckExcelFile
  fullName: Laga.IO.IOExcelWrite.CheckExcelFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Laga.IO.IOExcelWrite.#ctor*
  commentId: Overload:Laga.IO.IOExcelWrite.#ctor
  name: IOExcelWrite
  nameWithType: IOExcelWrite.IOExcelWrite
  fullName: Laga.IO.IOExcelWrite.IOExcelWrite
- uid: Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet
  name: IOWrite_NewExcelSheet
  nameWithType: IOExcelWrite.IOWrite_NewExcelSheet
  fullName: Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet
- uid: Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet
  name: IOWrite_SetActiveSheet
  nameWithType: IOExcelWrite.IOWrite_SetActiveSheet
  fullName: Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet
- uid: Laga.IO.IOExcelWrite.IOWriteItem*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWriteItem
  name: IOWriteItem
  nameWithType: IOExcelWrite.IOWriteItem
  fullName: Laga.IO.IOExcelWrite.IOWriteItem
- uid: Laga.IO.IOExcelWrite.IOWriteList*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWriteList
  name: IOWriteList
  nameWithType: IOExcelWrite.IOWriteList
  fullName: Laga.IO.IOExcelWrite.IOWriteList
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Laga.IO.IOExcelWrite.IOWriteMatrix*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWriteMatrix
  name: IOWriteMatrix
  nameWithType: IOExcelWrite.IOWriteMatrix
  fullName: Laga.IO.IOExcelWrite.IOWriteMatrix
- uid: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp*
  commentId: Overload:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp
  name: IOWrite_OpenExcelApp
  nameWithType: IOExcelWrite.IOWrite_OpenExcelApp
  fullName: Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp
- uid: Laga.IO.IOExcelWrite.SaveCloseExcelApp*
  commentId: Overload:Laga.IO.IOExcelWrite.SaveCloseExcelApp
  name: SaveCloseExcelApp
  nameWithType: IOExcelWrite.SaveCloseExcelApp
  fullName: Laga.IO.IOExcelWrite.SaveCloseExcelApp
- uid: Laga.IO.IOExcelWrite.CloseExcelApp*
  commentId: Overload:Laga.IO.IOExcelWrite.CloseExcelApp
  name: CloseExcelApp
  nameWithType: IOExcelWrite.CloseExcelApp
  fullName: Laga.IO.IOExcelWrite.CloseExcelApp
