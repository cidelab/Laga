### YamlMime:ManagedReference
items:
- uid: Laga.Geometry.Plane
  commentId: T:Laga.Geometry.Plane
  id: Plane
  parent: Laga.Geometry
  children:
  - Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  - Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  - Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)
  - Laga.Geometry.Plane.Ax
  - Laga.Geometry.Plane.By
  - Laga.Geometry.Plane.ConstantTerm
  - Laga.Geometry.Plane.Cz
  - Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vectord)
  - Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vectord@)
  - Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
  - Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)
  - Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)
  - Laga.Geometry.Plane.Norm
  - Laga.Geometry.Plane.Origin
  - Laga.Geometry.Plane.PointAt(System.Double,System.Double)
  - Laga.Geometry.Plane.ToString
  - Laga.Geometry.Plane.VectorU
  - Laga.Geometry.Plane.VectorV
  langs:
  - csharp
  - vb
  name: Plane
  nameWithType: Plane
  fullName: Laga.Geometry.Plane
  type: Class
  source:
    id: Plane
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 11
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPlane class and operations\n"
  example: []
  syntax:
    content: public class Plane
    content.vb: Public Class Plane
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Laga.Geometry.Plane.Cz
  commentId: P:Laga.Geometry.Plane.Cz
  id: Cz
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Cz
  nameWithType: Plane.Cz
  fullName: Laga.Geometry.Plane.Cz
  type: Property
  source:
    id: Cz
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 27
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nGet the Cz term\n"
  example: []
  syntax:
    content: public double Cz { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Cz As Double
  overload: Laga.Geometry.Plane.Cz*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.By
  commentId: P:Laga.Geometry.Plane.By
  id: By
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: By
  nameWithType: Plane.By
  fullName: Laga.Geometry.Plane.By
  type: Property
  source:
    id: By
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 34
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nGet the By Term\n"
  example: []
  syntax:
    content: public double By { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property By As Double
  overload: Laga.Geometry.Plane.By*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.Ax
  commentId: P:Laga.Geometry.Plane.Ax
  id: Ax
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Ax
  nameWithType: Plane.Ax
  fullName: Laga.Geometry.Plane.Ax
  type: Property
  source:
    id: Ax
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 42
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nGet the Ax term\n"
  example: []
  syntax:
    content: public double Ax { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Ax As Double
  overload: Laga.Geometry.Plane.Ax*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.Origin
  commentId: P:Laga.Geometry.Plane.Origin
  id: Origin
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: Plane.Origin
  fullName: Laga.Geometry.Plane.Origin
  type: Property
  source:
    id: Origin
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 50
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPlane origin\n"
  example: []
  syntax:
    content: public Vectord Origin { get; }
    parameters: []
    return:
      type: Laga.Geometry.Vectord
    content.vb: Public ReadOnly Property Origin As Vectord
  overload: Laga.Geometry.Plane.Origin*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.Norm
  commentId: P:Laga.Geometry.Plane.Norm
  id: Norm
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Norm
  nameWithType: Plane.Norm
  fullName: Laga.Geometry.Plane.Norm
  type: Property
  source:
    id: Norm
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 61
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nVector normal\n"
  example: []
  syntax:
    content: public Vectord Norm { get; }
    parameters: []
    return:
      type: Laga.Geometry.Vectord
    content.vb: Public ReadOnly Property Norm As Vectord
  overload: Laga.Geometry.Plane.Norm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.VectorU
  commentId: P:Laga.Geometry.Plane.VectorU
  id: VectorU
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: VectorU
  nameWithType: Plane.VectorU
  fullName: Laga.Geometry.Plane.VectorU
  type: Property
  source:
    id: VectorU
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 72
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nVector U (X direction)\n"
  example: []
  syntax:
    content: public Vectord VectorU { get; }
    parameters: []
    return:
      type: Laga.Geometry.Vectord
    content.vb: Public ReadOnly Property VectorU As Vectord
  overload: Laga.Geometry.Plane.VectorU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.VectorV
  commentId: P:Laga.Geometry.Plane.VectorV
  id: VectorV
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: VectorV
  nameWithType: Plane.VectorV
  fullName: Laga.Geometry.Plane.VectorV
  type: Property
  source:
    id: VectorV
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 80
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nVector V (Y direction)\n"
  example: []
  syntax:
    content: public Vectord VectorV { get; }
    parameters: []
    return:
      type: Laga.Geometry.Vectord
    content.vb: Public ReadOnly Property VectorV As Vectord
  overload: Laga.Geometry.Plane.VectorV*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.ConstantTerm
  commentId: P:Laga.Geometry.Plane.ConstantTerm
  id: ConstantTerm
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: ConstantTerm
  nameWithType: Plane.ConstantTerm
  fullName: Laga.Geometry.Plane.ConstantTerm
  type: Property
  source:
    id: ConstantTerm
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 88
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPlane constant term\n"
  example: []
  syntax:
    content: public double ConstantTerm { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property ConstantTerm As Double
  overload: Laga.Geometry.Plane.ConstantTerm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  commentId: M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  id: '#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord,Laga.Geometry.Vectord)'
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vectord, Vectord, Vectord)
  nameWithType: Plane.Plane(Vectord, Vectord, Vectord)
  fullName: Laga.Geometry.Plane.Plane(Laga.Geometry.Vectord, Laga.Geometry.Vectord, Laga.Geometry.Vectord)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 99
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nVector equation plane, form: X = P+tU+sV\n"
  example: []
  syntax:
    content: public Plane(Vectord OriginPoint, Vectord VectorU, Vectord VectorV)
    parameters:
    - id: OriginPoint
      type: Laga.Geometry.Vectord
      description: Point in the plane, considered the origin point
    - id: VectorU
      type: Laga.Geometry.Vectord
      description: First vector in the plane (U)
    - id: VectorV
      type: Laga.Geometry.Vectord
      description: Second vector in the plane (V)
    content.vb: Public Sub New(OriginPoint As Vectord, VectorU As Vectord, VectorV As Vectord)
  overload: Laga.Geometry.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)
  commentId: M:Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Double, Double, Double, Double)
  nameWithType: Plane.Plane(Double, Double, Double, Double)
  fullName: Laga.Geometry.Plane.Plane(System.Double, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 116
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nGeneral Equation plane, form: Ax + By + Cz + D = 0\n"
  example: []
  syntax:
    content: public Plane(double Ax, double By, double Cz, double D)
    parameters:
    - id: Ax
      type: System.Double
      description: Coeficient Ax
    - id: By
      type: System.Double
      description: Coeficient By
    - id: Cz
      type: System.Double
      description: Coeficient Cz
    - id: D
      type: System.Double
      description: Constant D
    content.vb: Public Sub New(Ax As Double, By As Double, Cz As Double, D As Double)
  overload: Laga.Geometry.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  commentId: M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord)
  id: '#ctor(Laga.Geometry.Vectord,Laga.Geometry.Vectord)'
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vectord, Vectord)
  nameWithType: Plane.Plane(Vectord, Vectord)
  fullName: Laga.Geometry.Plane.Plane(Laga.Geometry.Vectord, Laga.Geometry.Vectord)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 145
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPlane normal equation, form: PX·N = 0\n"
  example: []
  syntax:
    content: public Plane(Vectord VectorPX, Vectord VectorNormal)
    parameters:
    - id: VectorPX
      type: Laga.Geometry.Vectord
      description: Vector from plane origin to a point X in the plane
    - id: VectorNormal
      type: Laga.Geometry.Vectord
      description: Normal vector to plane
    content.vb: Public Sub New(VectorPX As Vectord, VectorNormal As Vectord)
  overload: Laga.Geometry.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.ToString
  commentId: M:Laga.Geometry.Plane.ToString
  id: ToString
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: Laga.Geometry.Plane.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 159
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPrint plane data\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: string
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Laga.Geometry.Plane.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vectord)
  commentId: M:Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vectord)
  id: DistanceTo(Laga.Geometry.Vectord)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: DistanceTo(Vectord)
  nameWithType: Plane.DistanceTo(Vectord)
  fullName: Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vectord)
  type: Method
  source:
    id: DistanceTo
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 174
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nDistance plane point. If negative, the point is behind the plane.\n"
  example: []
  syntax:
    content: public double DistanceTo(Vectord point)
    parameters:
    - id: point
      type: Laga.Geometry.Vectord
      description: point to test
    return:
      type: System.Double
      description: double
    content.vb: Public Function DistanceTo(point As Vectord) As Double
  overload: Laga.Geometry.Plane.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.PointAt(System.Double,System.Double)
  commentId: M:Laga.Geometry.Plane.PointAt(System.Double,System.Double)
  id: PointAt(System.Double,System.Double)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: PointAt(Double, Double)
  nameWithType: Plane.PointAt(Double, Double)
  fullName: Laga.Geometry.Plane.PointAt(System.Double, System.Double)
  type: Method
  source:
    id: PointAt
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 186
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nLocate a point in the plane\n"
  example: []
  syntax:
    content: public Vectord PointAt(double U, double V)
    parameters:
    - id: U
      type: System.Double
      description: U parameter
    - id: V
      type: System.Double
      description: V parameter
    return:
      type: Laga.Geometry.Vectord
      description: Vector
    content.vb: Public Function PointAt(U As Double, V As Double) As Vectord
  overload: Laga.Geometry.Plane.PointAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)
  commentId: M:Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)
  id: IsParallelTo(Laga.Geometry.Plane,System.Double)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: IsParallelTo(Plane, Double)
  nameWithType: Plane.IsParallelTo(Plane, Double)
  fullName: Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane, System.Double)
  type: Method
  source:
    id: IsParallelTo
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 200
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCheck if the plane is parallel\n"
  example: []
  syntax:
    content: public bool IsParallelTo(Plane plane, double tolerance = 0.001)
    parameters:
    - id: plane
      type: Laga.Geometry.Plane
      description: Plane to test
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IsParallelTo(plane As Plane, tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Plane.IsParallelTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)
  commentId: M:Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)
  id: IsCoincidentTo(Laga.Geometry.Plane,System.Double)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: IsCoincidentTo(Plane, Double)
  nameWithType: Plane.IsCoincidentTo(Plane, Double)
  fullName: Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane, System.Double)
  type: Method
  source:
    id: IsCoincidentTo
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 214
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCheck if 2 planes are coicident\n"
  example: []
  syntax:
    content: public bool IsCoincidentTo(Plane plane, double tolerance = 0.001)
    parameters:
    - id: plane
      type: Laga.Geometry.Plane
      description: Plane to test
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IsCoincidentTo(plane As Plane, tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Plane.IsCoincidentTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vectord@)
  commentId: M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vectord@)
  id: IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vectord@)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: IntersectTo(Line, ref Vectord)
  nameWithType: Plane.IntersectTo(Line, ref Vectord)
  fullName: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line, ref Laga.Geometry.Vectord)
  type: Method
  source:
    id: IntersectTo
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 233
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPlane line intersection\n"
  example: []
  syntax:
    content: public bool IntersectTo(Line line, ref Vectord intersection)
    parameters:
    - id: line
      type: Laga.Geometry.Line
      description: Line
    - id: intersection
      type: Laga.Geometry.Vectord
      description: ref Vector Intersection
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IntersectTo(line As Line, ByRef intersection As Vectord) As Boolean
  overload: Laga.Geometry.Plane.IntersectTo*
  nameWithType.vb: Plane.IntersectTo(Line, ByRef Vectord)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line, ByRef Laga.Geometry.Vectord)
  name.vb: IntersectTo(Line, ByRef Vectord)
- uid: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
  commentId: M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
  id: IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
  parent: Laga.Geometry.Plane
  langs:
  - csharp
  - vb
  name: IntersectTo(Plane, ref Line, Double)
  nameWithType: Plane.IntersectTo(Plane, ref Line, Double)
  fullName: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane, ref Laga.Geometry.Line, System.Double)
  type: Method
  source:
    id: IntersectTo
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Plane.cs
    startLine: 259
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nFind the intersection between 2 planes\n"
  example: []
  syntax:
    content: public bool IntersectTo(Plane plane, ref Line intersection, double tolerance = 0.001)
    parameters:
    - id: plane
      type: Laga.Geometry.Plane
      description: Plane to test
    - id: intersection
      type: Laga.Geometry.Line
      description: ref line intersection
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IntersectTo(plane As Plane, ByRef intersection As Line, tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Plane.IntersectTo*
  nameWithType.vb: Plane.IntersectTo(Plane, ByRef Line, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane, ByRef Laga.Geometry.Line, System.Double)
  name.vb: IntersectTo(Plane, ByRef Line, Double)
references:
- uid: Laga.Geometry
  commentId: N:Laga.Geometry
  name: Laga.Geometry
  nameWithType: Laga.Geometry
  fullName: Laga.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.Geometry.Plane.Cz*
  commentId: Overload:Laga.Geometry.Plane.Cz
  name: Cz
  nameWithType: Plane.Cz
  fullName: Laga.Geometry.Plane.Cz
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Laga.Geometry.Plane.By*
  commentId: Overload:Laga.Geometry.Plane.By
  name: By
  nameWithType: Plane.By
  fullName: Laga.Geometry.Plane.By
- uid: Laga.Geometry.Plane.Ax*
  commentId: Overload:Laga.Geometry.Plane.Ax
  name: Ax
  nameWithType: Plane.Ax
  fullName: Laga.Geometry.Plane.Ax
- uid: Laga.Geometry.Plane.Origin*
  commentId: Overload:Laga.Geometry.Plane.Origin
  name: Origin
  nameWithType: Plane.Origin
  fullName: Laga.Geometry.Plane.Origin
- uid: Laga.Geometry.Vectord
  commentId: T:Laga.Geometry.Vectord
  parent: Laga.Geometry
  name: Vectord
  nameWithType: Vectord
  fullName: Laga.Geometry.Vectord
- uid: Laga.Geometry.Plane.Norm*
  commentId: Overload:Laga.Geometry.Plane.Norm
  name: Norm
  nameWithType: Plane.Norm
  fullName: Laga.Geometry.Plane.Norm
- uid: Laga.Geometry.Plane.VectorU*
  commentId: Overload:Laga.Geometry.Plane.VectorU
  name: VectorU
  nameWithType: Plane.VectorU
  fullName: Laga.Geometry.Plane.VectorU
- uid: Laga.Geometry.Plane.VectorV*
  commentId: Overload:Laga.Geometry.Plane.VectorV
  name: VectorV
  nameWithType: Plane.VectorV
  fullName: Laga.Geometry.Plane.VectorV
- uid: Laga.Geometry.Plane.ConstantTerm*
  commentId: Overload:Laga.Geometry.Plane.ConstantTerm
  name: ConstantTerm
  nameWithType: Plane.ConstantTerm
  fullName: Laga.Geometry.Plane.ConstantTerm
- uid: Laga.Geometry.Plane.#ctor*
  commentId: Overload:Laga.Geometry.Plane.#ctor
  name: Plane
  nameWithType: Plane.Plane
  fullName: Laga.Geometry.Plane.Plane
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.Geometry.Plane.ToString*
  commentId: Overload:Laga.Geometry.Plane.ToString
  name: ToString
  nameWithType: Plane.ToString
  fullName: Laga.Geometry.Plane.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Laga.Geometry.Plane.DistanceTo*
  commentId: Overload:Laga.Geometry.Plane.DistanceTo
  name: DistanceTo
  nameWithType: Plane.DistanceTo
  fullName: Laga.Geometry.Plane.DistanceTo
- uid: Laga.Geometry.Plane.PointAt*
  commentId: Overload:Laga.Geometry.Plane.PointAt
  name: PointAt
  nameWithType: Plane.PointAt
  fullName: Laga.Geometry.Plane.PointAt
- uid: Laga.Geometry.Plane.IsParallelTo*
  commentId: Overload:Laga.Geometry.Plane.IsParallelTo
  name: IsParallelTo
  nameWithType: Plane.IsParallelTo
  fullName: Laga.Geometry.Plane.IsParallelTo
- uid: Laga.Geometry.Plane
  commentId: T:Laga.Geometry.Plane
  parent: Laga.Geometry
  name: Plane
  nameWithType: Plane
  fullName: Laga.Geometry.Plane
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Laga.Geometry.Plane.IsCoincidentTo*
  commentId: Overload:Laga.Geometry.Plane.IsCoincidentTo
  name: IsCoincidentTo
  nameWithType: Plane.IsCoincidentTo
  fullName: Laga.Geometry.Plane.IsCoincidentTo
- uid: Laga.Geometry.Plane.IntersectTo*
  commentId: Overload:Laga.Geometry.Plane.IntersectTo
  name: IntersectTo
  nameWithType: Plane.IntersectTo
  fullName: Laga.Geometry.Plane.IntersectTo
- uid: Laga.Geometry.Line
  commentId: T:Laga.Geometry.Line
  parent: Laga.Geometry
  name: Line
  nameWithType: Line
  fullName: Laga.Geometry.Line
