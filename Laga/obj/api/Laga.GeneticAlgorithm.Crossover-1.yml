### YamlMime:ManagedReference
items:
- uid: Laga.GeneticAlgorithm.Crossover`1
  commentId: T:Laga.GeneticAlgorithm.Crossover`1
  id: Crossover`1
  parent: Laga.GeneticAlgorithm
  children:
  - Laga.GeneticAlgorithm.Crossover`1.#ctor
  - Laga.GeneticAlgorithm.Crossover`1.IndexParent
  - Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)
  - Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)
  langs:
  - csharp
  - vb
  name: Crossover<T>
  nameWithType: Crossover<T>
  fullName: Laga.GeneticAlgorithm.Crossover<T>
  type: Class
  source:
    id: Crossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 10
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nDifferent crossover type operations\n"
  example: []
  syntax:
    content: public class Crossover<T>
    typeParameters:
    - id: T
    content.vb: Public Class Crossover(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Crossover(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T)
  name.vb: Crossover(Of T)
- uid: Laga.GeneticAlgorithm.Crossover`1.IndexParent
  commentId: P:Laga.GeneticAlgorithm.Crossover`1.IndexParent
  id: IndexParent
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: IndexParent
  nameWithType: Crossover<T>.IndexParent
  fullName: Laga.GeneticAlgorithm.Crossover<T>.IndexParent
  type: Property
  source:
    id: IndexParent
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 19
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nget and set indexes for parents in crossover.\n"
  example: []
  syntax:
    content: public int[] IndexParent { get; set; }
    parameters: []
    return:
      type: System.Int32[]
    content.vb: Public Property IndexParent As Integer()
  overload: Laga.GeneticAlgorithm.Crossover`1.IndexParent*
  nameWithType.vb: Crossover(Of T).IndexParent
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).IndexParent
- uid: Laga.GeneticAlgorithm.Crossover`1.#ctor
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.#ctor
  id: '#ctor'
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: Crossover()
  nameWithType: Crossover<T>.Crossover()
  fullName: Laga.GeneticAlgorithm.Crossover<T>.Crossover()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 31
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nconstructor\n"
  example: []
  syntax:
    content: public Crossover()
    content.vb: Public Sub New
  overload: Laga.GeneticAlgorithm.Crossover`1.#ctor*
  nameWithType.vb: Crossover(Of T).Crossover()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).Crossover()
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
  id: SinglePointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Population<T>, Int32, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Population<T>, Int32, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(Laga.GeneticAlgorithm.Population<T>, System.Int32, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 44
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public static Population<T> SinglePointCrossover(Population<T> matingPool, int PopSize, int cut)
    parameters:
    - id: matingPool
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: ''
    - id: PopSize
      type: System.Int32
      description: ''
    - id: cut
      type: System.Int32
      description: ''
    return:
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: ''
    content.vb: Public Shared Function SinglePointCrossover(matingPool As Population(Of T), PopSize As Integer, cut As Integer) As Population(Of T)
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Population(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(Laga.GeneticAlgorithm.Population(Of T), System.Int32, System.Int32)
  name.vb: SinglePointCrossover(Population(Of T), Int32, Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  id: RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: RandomPointCrossover(Population<T>, Int32)
  nameWithType: Crossover<T>.RandomPointCrossover(Population<T>, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.RandomPointCrossover(Laga.GeneticAlgorithm.Population<T>, System.Int32)
  type: Method
  source:
    id: RandomPointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 80
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public static Population<T> RandomPointCrossover(Population<T> matingPool, int populationSize)
    parameters:
    - id: matingPool
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: ''
    - id: populationSize
      type: System.Int32
      description: ''
    return:
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: Population
    content.vb: Public Shared Function RandomPointCrossover(matingPool As Population(Of T), populationSize As Integer) As Population(Of T)
  overload: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*
  nameWithType.vb: Crossover(Of T).RandomPointCrossover(Population(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).RandomPointCrossover(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
  name.vb: RandomPointCrossover(Population(Of T), Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
  id: SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Chromosome<T>, Chromosome<T>, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Chromosome<T>, Chromosome<T>, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome<T>, Laga.GeneticAlgorithm.Chromosome<T>, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 110
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nSinngle Point Chrossover at specific location\n"
  example: []
  syntax:
    content: public static Chromosome<T> SinglePointCrossover(Chromosome<T> chromosomeA, Chromosome<T> chromosomeB, int cut)
    parameters:
    - id: chromosomeA
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: Parent A
    - id: chromosomeB
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: Parent B
    - id: cut
      type: System.Int32
      description: Cutting location
    return:
      type: Laga.GeneticAlgorithm.Chromosome{{T}}
      description: Chromosome
    content.vb: Public Shared Function SinglePointCrossover(chromosomeA As Chromosome(Of T), chromosomeB As Chromosome(Of T), cut As Integer) As Chromosome(Of T)
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Chromosome(Of T), Chromosome(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome(Of T), Laga.GeneticAlgorithm.Chromosome(Of T), System.Int32)
  name.vb: SinglePointCrossover(Chromosome(Of T), Chromosome(Of T), Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)
  id: SinglePointCrossover(System.Object[][],System.Single,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Object[][], Single, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Object[][], Single, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Object[][], System.Single, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 139
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA crossover algorithm performed in a single point of the chromosome.\n"
  example: []
  syntax:
    content: public object[][] SinglePointCrossover(object[][] population, float percent, int pointCutter)
    parameters:
    - id: population
      type: System.Object[][]
      description: The population to perform the crossover
    - id: percent
      type: System.Single
      description: Which percent of chromosomes will be croosver
    - id: pointCutter
      type: System.Int32
      description: Where the crossover will be executed
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function SinglePointCrossover(population As Object()(), percent As Single, pointCutter As Integer) As Object()()
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Object()(), Single, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Object()(), System.Single, System.Int32)
  name.vb: SinglePointCrossover(Object()(), Single, Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)
  id: SinglePointCrossover(System.Double[][],System.Single,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Double[][], Single, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Double[][], Single, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Double[][], System.Single, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 205
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA crossover algorithm performed in a single point of the chromosome.\n"
  example: []
  syntax:
    content: public double[][] SinglePointCrossover(double[][] population, float percent, int pointCutter)
    parameters:
    - id: population
      type: System.Double[][]
      description: The population to perform the crossover
    - id: percent
      type: System.Single
      description: Which percent of chromosomes will be croosver
    - id: pointCutter
      type: System.Int32
      description: Where the crossover will be executed
    return:
      type: System.Double[][]
      description: double[][]
    content.vb: Public Function SinglePointCrossover(population As Double()(), percent As Single, pointCutter As Integer) As Double()()
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Double()(), Single, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Double()(), System.Single, System.Int32)
  name.vb: SinglePointCrossover(Double()(), Single, Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)
  id: SinglePointCrossover(System.Single[][],System.Single,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Single[][], Single, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Single[][], Single, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Single[][], System.Single, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 253
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA crossover algorithm performed in a single point of the chromosome.\n"
  example: []
  syntax:
    content: public float[][] SinglePointCrossover(float[][] population, float percent, int pointCutter)
    parameters:
    - id: population
      type: System.Single[][]
      description: The population to perform the crossover
    - id: percent
      type: System.Single
      description: Which percent of chromosomes will be croosver
    - id: pointCutter
      type: System.Int32
      description: Where the crossover will be executed
    return:
      type: System.Single[][]
      description: float[][]
    content.vb: Public Function SinglePointCrossover(population As Single()(), percent As Single, pointCutter As Integer) As Single()()
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Single()(), Single, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Single()(), System.Single, System.Int32)
  name.vb: SinglePointCrossover(Single()(), Single, Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
  id: SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Int32[][], Single, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Int32[][], Single, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Int32[][], System.Single, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 300
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA crossover algorithm performed in a single point of the chromosome.\n"
  example: []
  syntax:
    content: public int[][] SinglePointCrossover(int[][] population, float percent, int pointCutter)
    parameters:
    - id: population
      type: System.Int32[][]
      description: The population to perform the crossover
    - id: percent
      type: System.Single
      description: Which percent of chromosomes will be croosver
    - id: pointCutter
      type: System.Int32
      description: Where the crossover will be executed
    return:
      type: System.Int32[][]
      description: int[][]
    content.vb: Public Function SinglePointCrossover(population As Integer()(), percent As Single, pointCutter As Integer) As Integer()()
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Int32()(), Single, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Int32()(), System.Single, System.Int32)
  name.vb: SinglePointCrossover(Int32()(), Single, Int32)
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)
  id: SinglePointCrossover(System.Char[][],System.Single,System.Int32)
  parent: Laga.GeneticAlgorithm.Crossover`1
  langs:
  - csharp
  - vb
  name: SinglePointCrossover(Char[][], Single, Int32)
  nameWithType: Crossover<T>.SinglePointCrossover(Char[][], Single, Int32)
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Char[][], System.Single, System.Int32)
  type: Method
  source:
    id: SinglePointCrossover
    path: C:\Users\delab\Documents\GitHub\Laga\Laga\Crossover.cs
    startLine: 386
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA crossover algorithm performed in a single point of the chromosome.\n"
  example:
  - "\n<pre><code>GenrPopulation pop = new GenrPopulation(6);\nchar[][] charPop = pop.CharPopulation(5, 97, 122);\nfloat[] rndFitness = Rand.RandomNumbers(6, 0f, 1f);\n\nsort:\nRankingSort rs = new RankingSort();\nrs.BidirectionalBubbleSort(charPop, rndFitness, false);\n\nCrossover cs = new Crossover();\nchar[][] croossovers = cs.SinglePointCrossover(srtPop, 0.8f, 2);\n\nresult:\nPOPULATION:\nvnqaw: 0.6631602\nsmzbu: 0.9322885\ncewwe: 0.8222669\njsxgr: 0.7555377\nujklr: 0.181477\nuqmvo: 0.6832687\n\nSORTED POPULATION:\nujklr: 0.181477\nvnqaw: 0.6631602\nuqmvo: 0.6832687\njsxgr: 0.7555377\ncewwe: 0.8222669\nsmzbu: 0.9322885\n\nCROSSOVER EXAMPLE: 80%\nsmwwe // smzbu - cewwe\ncezbu // cewwe - smzbu\njsklr // jsxgr - ujklr\nujxgr // ujklr - jsxgr</code></pre>\n"
  syntax:
    content: public char[][] SinglePointCrossover(char[][] population, float percent, int pointCutter)
    parameters:
    - id: population
      type: System.Char[][]
      description: The population to perform the crossover
    - id: percent
      type: System.Single
      description: Which percent of chromosomes will be croosver
    - id: pointCutter
      type: System.Int32
      description: Where the crossover will be executed
    return:
      type: System.Char[][]
      description: Char[][]
    content.vb: Public Function SinglePointCrossover(population As Char()(), percent As Single, pointCutter As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  nameWithType.vb: Crossover(Of T).SinglePointCrossover(Char()(), Single, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Char()(), System.Single, System.Int32)
  name.vb: SinglePointCrossover(Char()(), Single, Int32)
references:
- uid: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  name: Laga.GeneticAlgorithm
  nameWithType: Laga.GeneticAlgorithm
  fullName: Laga.GeneticAlgorithm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.GeneticAlgorithm.Crossover`1.IndexParent*
  commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.IndexParent
  name: IndexParent
  nameWithType: Crossover<T>.IndexParent
  fullName: Laga.GeneticAlgorithm.Crossover<T>.IndexParent
  nameWithType.vb: Crossover(Of T).IndexParent
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).IndexParent
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Laga.GeneticAlgorithm.Crossover`1.#ctor*
  commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.#ctor
  name: Crossover
  nameWithType: Crossover<T>.Crossover
  fullName: Laga.GeneticAlgorithm.Crossover<T>.Crossover
  nameWithType.vb: Crossover(Of T).Crossover
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).Crossover
- uid: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
  commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover
  name: SinglePointCrossover
  nameWithType: Crossover<T>.SinglePointCrossover
  fullName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover
  nameWithType.vb: Crossover(Of T).SinglePointCrossover
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover
- uid: Laga.GeneticAlgorithm.Population{{T}}
  commentId: T:Laga.GeneticAlgorithm.Population{`0}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.GeneticAlgorithm.Population`1
  commentId: T:Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*
  commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover
  name: RandomPointCrossover
  nameWithType: Crossover<T>.RandomPointCrossover
  fullName: Laga.GeneticAlgorithm.Crossover<T>.RandomPointCrossover
  nameWithType.vb: Crossover(Of T).RandomPointCrossover
  fullName.vb: Laga.GeneticAlgorithm.Crossover(Of T).RandomPointCrossover
- uid: Laga.GeneticAlgorithm.Chromosome{{T}}
  commentId: T:Laga.GeneticAlgorithm.Chromosome{`0}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Chromosome`1
  name: Chromosome<T>
  nameWithType: Chromosome<T>
  fullName: Laga.GeneticAlgorithm.Chromosome<T>
  nameWithType.vb: Chromosome(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Chromosome(Of T)
  name.vb: Chromosome(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Chromosome`1
  commentId: T:Laga.GeneticAlgorithm.Chromosome`1
  name: Chromosome<T>
  nameWithType: Chromosome<T>
  fullName: Laga.GeneticAlgorithm.Chromosome<T>
  nameWithType.vb: Chromosome(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Chromosome(Of T)
  name.vb: Chromosome(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Chromosome`1
    name: Chromosome
    nameWithType: Chromosome
    fullName: Laga.GeneticAlgorithm.Chromosome
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[][]
  isExternal: true
  name: Object[][]
  nameWithType: Object[][]
  fullName: System.Object[][]
  nameWithType.vb: Object()()
  fullName.vb: System.Object()()
  name.vb: Object()()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Double[][]
  isExternal: true
  name: Double[][]
  nameWithType: Double[][]
  fullName: System.Double[][]
  nameWithType.vb: Double()()
  fullName.vb: System.Double()()
  name.vb: Double()()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single[][]
  isExternal: true
  name: Single[][]
  nameWithType: Single[][]
  fullName: System.Single[][]
  nameWithType.vb: Single()()
  fullName.vb: System.Single()()
  name.vb: Single()()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[][]
  isExternal: true
  name: Int32[][]
  nameWithType: Int32[][]
  fullName: System.Int32[][]
  nameWithType.vb: Int32()()
  fullName.vb: System.Int32()()
  name.vb: Int32()()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[][]
  isExternal: true
  name: Char[][]
  nameWithType: Char[][]
  fullName: System.Char[][]
  nameWithType.vb: Char()()
  fullName.vb: System.Char()()
  name.vb: Char()()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
