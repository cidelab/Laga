id: LagaRhino
language: CSharp
name:
  Default: LagaRhino
qualifiedName:
  Default: LagaRhino
type: Assembly
modifiers: {}
items:
- id: LagaRhino
  commentId: N:LagaRhino
  language: CSharp
  name:
    CSharp: LagaRhino
    VB: LagaRhino
  nameWithType:
    CSharp: LagaRhino
    VB: LagaRhino
  qualifiedName:
    CSharp: LagaRhino
    VB: LagaRhino
  type: Namespace
  assemblies:
  - LagaRhino
  modifiers: {}
  items:
  - id: LagaRhino.Box
    commentId: T:LagaRhino.Box
    language: CSharp
    name:
      CSharp: Box
      VB: Box
    nameWithType:
      CSharp: Box
      VB: Box
    qualifiedName:
      CSharp: LagaRhino.Box
      VB: LagaRhino.Box
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: Box
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\Box.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class Box
        VB: Public Class Box
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.Box.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double)
      commentId: M:LagaRhino.Box.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Box(Point3d, Double, Double)
        VB: Box(Point3d, Double, Double)
      nameWithType:
        CSharp: Box.Box(Point3d, Double, Double)
        VB: Box.Box(Point3d, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.Box.Box(Rhino.Geometry.Point3d, System.Double, System.Double)
        VB: LagaRhino.Box.Box(Rhino.Geometry.Point3d, System.Double, System.Double)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\Box.cs
        startLine: 15
      syntax:
        content:
          CSharp: public Box(Point3d point, double width, double length)
          VB: Public Sub New(point As Point3d, width As Double, length As Double)
        parameters:
        - id: point
          type: Rhino.Geometry.Point3d
        - id: width
          type: System.Double
        - id: length
          type: System.Double
      overload: LagaRhino.Box.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.Box.MakeBox
      commentId: M:LagaRhino.Box.MakeBox
      language: CSharp
      name:
        CSharp: MakeBox()
        VB: MakeBox()
      nameWithType:
        CSharp: Box.MakeBox()
        VB: Box.MakeBox()
      qualifiedName:
        CSharp: LagaRhino.Box.MakeBox()
        VB: LagaRhino.Box.MakeBox()
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: MakeBox
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\Box.cs
        startLine: 24
      syntax:
        content:
          CSharp: public Brep MakeBox()
          VB: Public Function MakeBox As Brep
        return:
          type: Rhino.Geometry.Brep
      overload: LagaRhino.Box.MakeBox*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LagaRhino.CurveData
    commentId: T:LagaRhino.CurveData
    language: CSharp
    name:
      CSharp: CurveData
      VB: CurveData
    nameWithType:
      CSharp: CurveData
      VB: CurveData
    qualifiedName:
      CSharp: LagaRhino.CurveData
      VB: LagaRhino.CurveData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: CurveData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\CurveData.cs
      startLine: 13
    summary: "\nCurve data\n"
    example: []
    syntax:
      content:
        CSharp: public class CurveData
        VB: Public Class CurveData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.List{Rhino.Geometry.Curve},System.Double)
      commentId: M:LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.List{Rhino.Geometry.Curve},System.Double)
      language: CSharp
      name:
        CSharp: GetPointFromCurves(List<Curve>, Double)
        VB: GetPointFromCurves(List(Of Curve), Double)
      nameWithType:
        CSharp: CurveData.GetPointFromCurves(List<Curve>, Double)
        VB: CurveData.GetPointFromCurves(List(Of Curve), Double)
      qualifiedName:
        CSharp: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.List<Rhino.Geometry.Curve>, System.Double)
        VB: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.List(Of Rhino.Geometry.Curve), System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: GetPointFromCurves
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\CurveData.cs
        startLine: 23
      summary: "\nApply the same t parameter to a list of curves to return an array of points\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] GetPointFromCurves(List<Curve> lstCrvs, double t)
          VB: Public Shared Function GetPointFromCurves(lstCrvs As List(Of Curve), t As Double) As Point3d()
        parameters:
        - id: lstCrvs
          type: System.Collections.Generic.List{Rhino.Geometry.Curve}
          description: The list of curves
        - id: t
          type: System.Double
          description: t param
        return:
          type: Rhino.Geometry.Point3d[]
          description: ''
      overload: LagaRhino.CurveData.GetPointFromCurves*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.List{Rhino.Geometry.Curve})
      commentId: M:LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.List{Rhino.Geometry.Curve})
      language: CSharp
      name:
        CSharp: DeepCopyListCurve(List<Curve>)
        VB: DeepCopyListCurve(List(Of Curve))
      nameWithType:
        CSharp: CurveData.DeepCopyListCurve(List<Curve>)
        VB: CurveData.DeepCopyListCurve(List(Of Curve))
      qualifiedName:
        CSharp: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.List<Rhino.Geometry.Curve>)
        VB: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.List(Of Rhino.Geometry.Curve))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: DeepCopyListCurve
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\CurveData.cs
        startLine: 43
      summary: "\nMakes a deep copy from a list of curves.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Curve> DeepCopyListCurve(List<Curve> lstToCopy)
          VB: Public Shared Function DeepCopyListCurve(lstToCopy As List(Of Curve)) As List(Of Curve)
        parameters:
        - id: lstToCopy
          type: System.Collections.Generic.List{Rhino.Geometry.Curve}
          description: The list to copy
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Curve}
          description: List of Curves
      overload: LagaRhino.CurveData.DeepCopyListCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.PlaneCorrectOnCurveByParam(Rhino.Geometry.Curve,System.Double)
      commentId: M:LagaRhino.CurveData.PlaneCorrectOnCurveByParam(Rhino.Geometry.Curve,System.Double)
      language: CSharp
      name:
        CSharp: PlaneCorrectOnCurveByParam(Curve, Double)
        VB: PlaneCorrectOnCurveByParam(Curve, Double)
      nameWithType:
        CSharp: CurveData.PlaneCorrectOnCurveByParam(Curve, Double)
        VB: CurveData.PlaneCorrectOnCurveByParam(Curve, Double)
      qualifiedName:
        CSharp: LagaRhino.CurveData.PlaneCorrectOnCurveByParam(Rhino.Geometry.Curve, System.Double)
        VB: LagaRhino.CurveData.PlaneCorrectOnCurveByParam(Rhino.Geometry.Curve, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PlaneCorrectOnCurveByParam
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\CurveData.cs
        startLine: 62
      summary: "\nAlign Perpendicular frames in the Curve\n"
      example: []
      syntax:
        content:
          CSharp: public static Plane PlaneCorrectOnCurveByParam(Curve crv, double t)
          VB: Public Shared Function PlaneCorrectOnCurveByParam(crv As Curve, t As Double) As Plane
        parameters:
        - id: crv
          type: Rhino.Geometry.Curve
          description: the curve in the analysis
        - id: t
          type: System.Double
          description: the t param on the curve
        return:
          type: Rhino.Geometry.Plane
          description: ''
      overload: LagaRhino.CurveData.PlaneCorrectOnCurveByParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.LineCurveData
    commentId: T:LagaRhino.LineCurveData
    language: CSharp
    name:
      CSharp: LineCurveData
      VB: LineCurveData
    nameWithType:
      CSharp: LineCurveData
      VB: LineCurveData
    qualifiedName:
      CSharp: LagaRhino.LineCurveData
      VB: LagaRhino.LineCurveData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: LineCurveData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\LineCurveData.cs
      startLine: 12
    summary: "\nLine curve data\n"
    example: []
    syntax:
      content:
        CSharp: public class LineCurveData
        VB: Public Class LineCurveData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.LineCurveData.Axis(Rhino.Geometry.LineCurve)
      commentId: M:LagaRhino.LineCurveData.Axis(Rhino.Geometry.LineCurve)
      language: CSharp
      name:
        CSharp: Axis(LineCurve)
        VB: Axis(LineCurve)
      nameWithType:
        CSharp: LineCurveData.Axis(LineCurve)
        VB: LineCurveData.Axis(LineCurve)
      qualifiedName:
        CSharp: LagaRhino.LineCurveData.Axis(Rhino.Geometry.LineCurve)
        VB: LagaRhino.LineCurveData.Axis(Rhino.Geometry.LineCurve)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Axis
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\LineCurveData.cs
        startLine: 20
      summary: "\nTransform a LineCurve to an Axis object.\n"
      example: []
      syntax:
        content:
          CSharp: public static LineCurve Axis(LineCurve axis)
          VB: Public Shared Function Axis(axis As LineCurve) As LineCurve
        parameters:
        - id: axis
          type: Rhino.Geometry.LineCurve
          description: LineCurve
        return:
          type: Rhino.Geometry.LineCurve
          description: LineCurve
      overload: LagaRhino.LineCurveData.Axis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.PlaneData
    commentId: T:LagaRhino.PlaneData
    language: CSharp
    name:
      CSharp: PlaneData
      VB: PlaneData
    nameWithType:
      CSharp: PlaneData
      VB: PlaneData
    qualifiedName:
      CSharp: LagaRhino.PlaneData
      VB: LagaRhino.PlaneData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: PlaneData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PlaneData.cs
      startLine: 12
    summary: "\nPlane data\n"
    example: []
    syntax:
      content:
        CSharp: public class PlaneData
        VB: Public Class PlaneData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: LagaRhino.PointData
    commentId: T:LagaRhino.PointData
    language: CSharp
    name:
      CSharp: PointData
      VB: PointData
    nameWithType:
      CSharp: PointData
      VB: PointData
    qualifiedName:
      CSharp: LagaRhino.PointData
      VB: LagaRhino.PointData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: PointData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
      startLine: 12
    summary: "\nPoint data\n"
    example: []
    syntax:
      content:
        CSharp: public class PointData
        VB: Public Class PointData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.PointData.SortPointsQuadrant(Rhino.Geometry.Point3d)
      commentId: M:LagaRhino.PointData.SortPointsQuadrant(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: SortPointsQuadrant(Point3d)
        VB: SortPointsQuadrant(Point3d)
      nameWithType:
        CSharp: PointData.SortPointsQuadrant(Point3d)
        VB: PointData.SortPointsQuadrant(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsQuadrant(Rhino.Geometry.Point3d)
        VB: LagaRhino.PointData.SortPointsQuadrant(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsQuadrant
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 19
      summary: "\nreturn the points sorted according to scrum Quadrants\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsQuadrant(Point3d pt)
          VB: Public Shared Function SortPointsQuadrant(pt As Point3d) As Point3d()
        parameters:
        - id: pt
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: Rhino.Geometry.Point3d[]
          description: Point3d[]
      overload: LagaRhino.PointData.SortPointsQuadrant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.PointQuadrant(Rhino.Geometry.Point3d)
      commentId: M:LagaRhino.PointData.PointQuadrant(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: PointQuadrant(Point3d)
        VB: PointQuadrant(Point3d)
      nameWithType:
        CSharp: PointData.PointQuadrant(Point3d)
        VB: PointData.PointQuadrant(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.PointQuadrant(Rhino.Geometry.Point3d)
        VB: LagaRhino.PointData.PointQuadrant(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PointQuadrant
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 40
      summary: "\ndetermine in which quadrant is the point. 0:++, 1:+-, 2:--, 3:-+.\n"
      example: []
      syntax:
        content:
          CSharp: public static int PointQuadrant(Point3d pt)
          VB: Public Shared Function PointQuadrant(pt As Point3d) As Integer
        parameters:
        - id: pt
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Int32
          description: int
      overload: LagaRhino.PointData.PointQuadrant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.DeepCopy(System.Collections.Generic.List{Rhino.Geometry.Curve})
      commentId: M:LagaRhino.PointData.DeepCopy(System.Collections.Generic.List{Rhino.Geometry.Curve})
      language: CSharp
      name:
        CSharp: DeepCopy(List<Curve>)
        VB: DeepCopy(List(Of Curve))
      nameWithType:
        CSharp: PointData.DeepCopy(List<Curve>)
        VB: PointData.DeepCopy(List(Of Curve))
      qualifiedName:
        CSharp: LagaRhino.PointData.DeepCopy(System.Collections.Generic.List<Rhino.Geometry.Curve>)
        VB: LagaRhino.PointData.DeepCopy(System.Collections.Generic.List(Of Rhino.Geometry.Curve))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: DeepCopy
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 71
      summary: "\nCrates a DeepCopy from the existing list of curves\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Curve> DeepCopy(List<Curve> lstToCopy)
          VB: Public Shared Function DeepCopy(lstToCopy As List(Of Curve)) As List(Of Curve)
        parameters:
        - id: lstToCopy
          type: System.Collections.Generic.List{Rhino.Geometry.Curve}
          description: The curves to perform the deep copy
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Curve}
          description: List<Curve></Curve>
      overload: LagaRhino.PointData.DeepCopy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsByZ(Rhino.Geometry.Point3d[])
      commentId: M:LagaRhino.PointData.SortPointsByZ(Rhino.Geometry.Point3d[])
      language: CSharp
      name:
        CSharp: SortPointsByZ(Point3d[])
        VB: SortPointsByZ(Point3d())
      nameWithType:
        CSharp: PointData.SortPointsByZ(Point3d[])
        VB: PointData.SortPointsByZ(Point3d())
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsByZ(Rhino.Geometry.Point3d[])
        VB: LagaRhino.PointData.SortPointsByZ(Rhino.Geometry.Point3d())
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsByZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 89
      summary: "\nSort points by Z coordinate\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsByZ(Point3d[] arrPts)
          VB: Public Shared Function SortPointsByZ(arrPts As Point3d()) As Point3d()
        parameters:
        - id: arrPts
          type: Rhino.Geometry.Point3d[]
          description: The points to sort
        return:
          type: Rhino.Geometry.Point3d[]
          description: point3d[]
      overload: LagaRhino.PointData.SortPointsByZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.GroupByZ(Rhino.Geometry.Point3d[])
      commentId: M:LagaRhino.PointData.GroupByZ(Rhino.Geometry.Point3d[])
      language: CSharp
      name:
        CSharp: GroupByZ(Point3d[])
        VB: GroupByZ(Point3d())
      nameWithType:
        CSharp: PointData.GroupByZ(Point3d[])
        VB: PointData.GroupByZ(Point3d())
      qualifiedName:
        CSharp: LagaRhino.PointData.GroupByZ(Rhino.Geometry.Point3d[])
        VB: LagaRhino.PointData.GroupByZ(Rhino.Geometry.Point3d())
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: GroupByZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 99
      summary: "\nGroup points by Z values.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Point3d[]> GroupByZ(Point3d[] arrPts)
          VB: Public Shared Function GroupByZ(arrPts As Point3d()) As List(Of Point3d())
        parameters:
        - id: arrPts
          type: Rhino.Geometry.Point3d[]
          description: the array of points to group
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d[]}
          description: a List of group points by the Z coordinate
      overload: LagaRhino.PointData.GroupByZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsByXY(Rhino.Geometry.Point3d[])
      commentId: M:LagaRhino.PointData.SortPointsByXY(Rhino.Geometry.Point3d[])
      language: CSharp
      name:
        CSharp: SortPointsByXY(Point3d[])
        VB: SortPointsByXY(Point3d())
      nameWithType:
        CSharp: PointData.SortPointsByXY(Point3d[])
        VB: PointData.SortPointsByXY(Point3d())
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsByXY(Rhino.Geometry.Point3d[])
        VB: LagaRhino.PointData.SortPointsByXY(Rhino.Geometry.Point3d())
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsByXY
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 127
      summary: "\nSort points by the coordinate X and then by the coordinate Y.\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsByXY(Point3d[] arrPts)
          VB: Public Shared Function SortPointsByXY(arrPts As Point3d()) As Point3d()
        parameters:
        - id: arrPts
          type: Rhino.Geometry.Point3d[]
          description: The points to sort
        return:
          type: Rhino.Geometry.Point3d[]
          description: point3d[]
      overload: LagaRhino.PointData.SortPointsByXY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortCoordinateZ(Rhino.Geometry.Point3d[])
      commentId: M:LagaRhino.PointData.SortCoordinateZ(Rhino.Geometry.Point3d[])
      language: CSharp
      name:
        CSharp: SortCoordinateZ(Point3d[])
        VB: SortCoordinateZ(Point3d())
      nameWithType:
        CSharp: PointData.SortCoordinateZ(Point3d[])
        VB: PointData.SortCoordinateZ(Point3d())
      qualifiedName:
        CSharp: LagaRhino.PointData.SortCoordinateZ(Rhino.Geometry.Point3d[])
        VB: LagaRhino.PointData.SortCoordinateZ(Rhino.Geometry.Point3d())
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortCoordinateZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 138
      summary: "\nSort the Z point coordinate\n"
      example: []
      syntax:
        content:
          CSharp: public static double[] SortCoordinateZ(Point3d[] arrPts)
          VB: Public Shared Function SortCoordinateZ(arrPts As Point3d()) As Double()
        parameters:
        - id: arrPts
          type: Rhino.Geometry.Point3d[]
          description: The points to evaluate
        return:
          type: System.Double[]
          description: double[]
      overload: LagaRhino.PointData.SortCoordinateZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.TwoPointsInterpolation(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)
      commentId: M:LagaRhino.PointData.TwoPointsInterpolation(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)
      language: CSharp
      name:
        CSharp: TwoPointsInterpolation(Point3d, Point3d, Double)
        VB: TwoPointsInterpolation(Point3d, Point3d, Double)
      nameWithType:
        CSharp: PointData.TwoPointsInterpolation(Point3d, Point3d, Double)
        VB: PointData.TwoPointsInterpolation(Point3d, Point3d, Double)
      qualifiedName:
        CSharp: LagaRhino.PointData.TwoPointsInterpolation(Rhino.Geometry.Point3d, Rhino.Geometry.Point3d, System.Double)
        VB: LagaRhino.PointData.TwoPointsInterpolation(Rhino.Geometry.Point3d, Rhino.Geometry.Point3d, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: TwoPointsInterpolation
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\PointData.cs
        startLine: 151
      summary: "\nWIP, create an interpolate point matrix between 2 points.\nThe method does not control exceptions for the point positions.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Point3d> TwoPointsInterpolation(Point3d ptStart, Point3d ptEnd, double span)
          VB: Public Shared Function TwoPointsInterpolation(ptStart As Point3d, ptEnd As Point3d, span As Double) As List(Of Point3d)
        parameters:
        - id: ptStart
          type: Rhino.Geometry.Point3d
          description: The start point, bottom left
        - id: ptEnd
          type: Rhino.Geometry.Point3d
          description: The end point, top right
        - id: span
          type: System.Double
          description: the aproximate point separation
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: List<Point3d>()</Point3d>
      overload: LagaRhino.PointData.TwoPointsInterpolation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.SurfaceData
    commentId: T:LagaRhino.SurfaceData
    language: CSharp
    name:
      CSharp: SurfaceData
      VB: SurfaceData
    nameWithType:
      CSharp: SurfaceData
      VB: SurfaceData
    qualifiedName:
      CSharp: LagaRhino.SurfaceData
      VB: LagaRhino.SurfaceData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: SurfaceData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\SurfaceData.cs
      startLine: 12
    summary: "\nSurface data\n"
    example: []
    syntax:
      content:
        CSharp: public class SurfaceData
        VB: Public Class SurfaceData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.SurfaceData.PlaneSurfaceAxis(Rhino.Geometry.LineCurve,System.Double)
      commentId: M:LagaRhino.SurfaceData.PlaneSurfaceAxis(Rhino.Geometry.LineCurve,System.Double)
      language: CSharp
      name:
        CSharp: PlaneSurfaceAxis(LineCurve, Double)
        VB: PlaneSurfaceAxis(LineCurve, Double)
      nameWithType:
        CSharp: SurfaceData.PlaneSurfaceAxis(LineCurve, Double)
        VB: SurfaceData.PlaneSurfaceAxis(LineCurve, Double)
      qualifiedName:
        CSharp: LagaRhino.SurfaceData.PlaneSurfaceAxis(Rhino.Geometry.LineCurve, System.Double)
        VB: LagaRhino.SurfaceData.PlaneSurfaceAxis(Rhino.Geometry.LineCurve, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PlaneSurfaceAxis
        path: C:\Users\delab\Documents\GitHub\Laga\LagaRhino\SurfaceData.cs
        startLine: 20
      summary: "\nBuild a vertical planar surface from a LineCurve axis.\n"
      example: []
      syntax:
        content:
          CSharp: public static Surface PlaneSurfaceAxis(LineCurve axis, double height = 100)
          VB: Public Shared Function PlaneSurfaceAxis(axis As LineCurve, height As Double = 100) As Surface
        parameters:
        - id: axis
          type: Rhino.Geometry.LineCurve
          description: the axis
        - id: height
          type: System.Double
          description: the height of the surface
        return:
          type: Rhino.Geometry.Surface
          description: Planar Surface
      overload: LagaRhino.SurfaceData.PlaneSurfaceAxis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  Rhino.Geometry:
    name:
      CSharp:
      - name: Rhino.Geometry
        nameWithType: Rhino.Geometry
        qualifiedName: Rhino.Geometry
        isExternal: true
      VB:
      - name: Rhino.Geometry
        nameWithType: Rhino.Geometry
        qualifiedName: Rhino.Geometry
    isDefinition: true
    commentId: N:Rhino.Geometry
  Rhino.Geometry.Point3d:
    name:
      CSharp:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      VB:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Point3d
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  LagaRhino.Box.#ctor*:
    name:
      CSharp:
      - id: LagaRhino.Box.#ctor*
        name: Box
        nameWithType: Box.Box
        qualifiedName: LagaRhino.Box.Box
      VB:
      - id: LagaRhino.Box.#ctor*
        name: Box
        nameWithType: Box.Box
        qualifiedName: LagaRhino.Box.Box
    isDefinition: true
    commentId: Overload:LagaRhino.Box.#ctor
  Rhino.Geometry.Brep:
    name:
      CSharp:
      - id: Rhino.Geometry.Brep
        name: Brep
        nameWithType: Brep
        qualifiedName: Rhino.Geometry.Brep
        isExternal: true
      VB:
      - id: Rhino.Geometry.Brep
        name: Brep
        nameWithType: Brep
        qualifiedName: Rhino.Geometry.Brep
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Brep
  LagaRhino.Box.MakeBox*:
    name:
      CSharp:
      - id: LagaRhino.Box.MakeBox*
        name: MakeBox
        nameWithType: Box.MakeBox
        qualifiedName: LagaRhino.Box.MakeBox
      VB:
      - id: LagaRhino.Box.MakeBox*
        name: MakeBox
        nameWithType: Box.MakeBox
        qualifiedName: LagaRhino.Box.MakeBox
    isDefinition: true
    commentId: Overload:LagaRhino.Box.MakeBox
  LagaRhino.Box:
    name:
      CSharp:
      - id: LagaRhino.Box
        name: Box
        nameWithType: Box
        qualifiedName: LagaRhino.Box
      VB:
      - id: LagaRhino.Box
        name: Box
        nameWithType: Box
        qualifiedName: LagaRhino.Box
    isDefinition: true
    commentId: T:LagaRhino.Box
  Rhino.Geometry.Point3d[]:
    name:
      CSharp:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{Rhino.Geometry.Curve}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Rhino.Geometry.Curve
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Rhino.Geometry.Curve
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Curve}
  LagaRhino.CurveData.GetPointFromCurves*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.GetPointFromCurves*
        name: GetPointFromCurves
        nameWithType: CurveData.GetPointFromCurves
        qualifiedName: LagaRhino.CurveData.GetPointFromCurves
      VB:
      - id: LagaRhino.CurveData.GetPointFromCurves*
        name: GetPointFromCurves
        nameWithType: CurveData.GetPointFromCurves
        qualifiedName: LagaRhino.CurveData.GetPointFromCurves
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.GetPointFromCurves
  LagaRhino.CurveData.DeepCopyListCurve*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.DeepCopyListCurve*
        name: DeepCopyListCurve
        nameWithType: CurveData.DeepCopyListCurve
        qualifiedName: LagaRhino.CurveData.DeepCopyListCurve
      VB:
      - id: LagaRhino.CurveData.DeepCopyListCurve*
        name: DeepCopyListCurve
        nameWithType: CurveData.DeepCopyListCurve
        qualifiedName: LagaRhino.CurveData.DeepCopyListCurve
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.DeepCopyListCurve
  Rhino.Geometry.Plane:
    name:
      CSharp:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
      VB:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Plane
  Rhino.Geometry.Curve:
    name:
      CSharp:
      - id: Rhino.Geometry.Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Rhino.Geometry.Curve
        isExternal: true
      VB:
      - id: Rhino.Geometry.Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Rhino.Geometry.Curve
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Curve
  LagaRhino.CurveData.PlaneCorrectOnCurveByParam*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.PlaneCorrectOnCurveByParam*
        name: PlaneCorrectOnCurveByParam
        nameWithType: CurveData.PlaneCorrectOnCurveByParam
        qualifiedName: LagaRhino.CurveData.PlaneCorrectOnCurveByParam
      VB:
      - id: LagaRhino.CurveData.PlaneCorrectOnCurveByParam*
        name: PlaneCorrectOnCurveByParam
        nameWithType: CurveData.PlaneCorrectOnCurveByParam
        qualifiedName: LagaRhino.CurveData.PlaneCorrectOnCurveByParam
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.PlaneCorrectOnCurveByParam
  LagaRhino.CurveData:
    name:
      CSharp:
      - id: LagaRhino.CurveData
        name: CurveData
        nameWithType: CurveData
        qualifiedName: LagaRhino.CurveData
      VB:
      - id: LagaRhino.CurveData
        name: CurveData
        nameWithType: CurveData
        qualifiedName: LagaRhino.CurveData
    isDefinition: true
    commentId: T:LagaRhino.CurveData
  Rhino.Geometry.LineCurve:
    name:
      CSharp:
      - id: Rhino.Geometry.LineCurve
        name: LineCurve
        nameWithType: LineCurve
        qualifiedName: Rhino.Geometry.LineCurve
        isExternal: true
      VB:
      - id: Rhino.Geometry.LineCurve
        name: LineCurve
        nameWithType: LineCurve
        qualifiedName: Rhino.Geometry.LineCurve
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.LineCurve
  LagaRhino.LineCurveData.Axis*:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData.Axis*
        name: Axis
        nameWithType: LineCurveData.Axis
        qualifiedName: LagaRhino.LineCurveData.Axis
      VB:
      - id: LagaRhino.LineCurveData.Axis*
        name: Axis
        nameWithType: LineCurveData.Axis
        qualifiedName: LagaRhino.LineCurveData.Axis
    isDefinition: true
    commentId: Overload:LagaRhino.LineCurveData.Axis
  LagaRhino.LineCurveData:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData
        name: LineCurveData
        nameWithType: LineCurveData
        qualifiedName: LagaRhino.LineCurveData
      VB:
      - id: LagaRhino.LineCurveData
        name: LineCurveData
        nameWithType: LineCurveData
        qualifiedName: LagaRhino.LineCurveData
    isDefinition: true
    commentId: T:LagaRhino.LineCurveData
  LagaRhino.PlaneData:
    name:
      CSharp:
      - id: LagaRhino.PlaneData
        name: PlaneData
        nameWithType: PlaneData
        qualifiedName: LagaRhino.PlaneData
      VB:
      - id: LagaRhino.PlaneData
        name: PlaneData
        nameWithType: PlaneData
        qualifiedName: LagaRhino.PlaneData
    isDefinition: true
    commentId: T:LagaRhino.PlaneData
  LagaRhino.PointData.SortPointsQuadrant*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsQuadrant*
        name: SortPointsQuadrant
        nameWithType: PointData.SortPointsQuadrant
        qualifiedName: LagaRhino.PointData.SortPointsQuadrant
      VB:
      - id: LagaRhino.PointData.SortPointsQuadrant*
        name: SortPointsQuadrant
        nameWithType: PointData.SortPointsQuadrant
        qualifiedName: LagaRhino.PointData.SortPointsQuadrant
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsQuadrant
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  LagaRhino.PointData.PointQuadrant*:
    name:
      CSharp:
      - id: LagaRhino.PointData.PointQuadrant*
        name: PointQuadrant
        nameWithType: PointData.PointQuadrant
        qualifiedName: LagaRhino.PointData.PointQuadrant
      VB:
      - id: LagaRhino.PointData.PointQuadrant*
        name: PointQuadrant
        nameWithType: PointData.PointQuadrant
        qualifiedName: LagaRhino.PointData.PointQuadrant
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.PointQuadrant
  LagaRhino.PointData.DeepCopy*:
    name:
      CSharp:
      - id: LagaRhino.PointData.DeepCopy*
        name: DeepCopy
        nameWithType: PointData.DeepCopy
        qualifiedName: LagaRhino.PointData.DeepCopy
      VB:
      - id: LagaRhino.PointData.DeepCopy*
        name: DeepCopy
        nameWithType: PointData.DeepCopy
        qualifiedName: LagaRhino.PointData.DeepCopy
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.DeepCopy
  LagaRhino.PointData.SortPointsByZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsByZ*
        name: SortPointsByZ
        nameWithType: PointData.SortPointsByZ
        qualifiedName: LagaRhino.PointData.SortPointsByZ
      VB:
      - id: LagaRhino.PointData.SortPointsByZ*
        name: SortPointsByZ
        nameWithType: PointData.SortPointsByZ
        qualifiedName: LagaRhino.PointData.SortPointsByZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsByZ
  System.Collections.Generic.List{Rhino.Geometry.Point3d[]}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Point3d[]}
  LagaRhino.PointData.GroupByZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.GroupByZ*
        name: GroupByZ
        nameWithType: PointData.GroupByZ
        qualifiedName: LagaRhino.PointData.GroupByZ
      VB:
      - id: LagaRhino.PointData.GroupByZ*
        name: GroupByZ
        nameWithType: PointData.GroupByZ
        qualifiedName: LagaRhino.PointData.GroupByZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.GroupByZ
  LagaRhino.PointData.SortPointsByXY*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsByXY*
        name: SortPointsByXY
        nameWithType: PointData.SortPointsByXY
        qualifiedName: LagaRhino.PointData.SortPointsByXY
      VB:
      - id: LagaRhino.PointData.SortPointsByXY*
        name: SortPointsByXY
        nameWithType: PointData.SortPointsByXY
        qualifiedName: LagaRhino.PointData.SortPointsByXY
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsByXY
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  LagaRhino.PointData.SortCoordinateZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortCoordinateZ*
        name: SortCoordinateZ
        nameWithType: PointData.SortCoordinateZ
        qualifiedName: LagaRhino.PointData.SortCoordinateZ
      VB:
      - id: LagaRhino.PointData.SortCoordinateZ*
        name: SortCoordinateZ
        nameWithType: PointData.SortCoordinateZ
        qualifiedName: LagaRhino.PointData.SortCoordinateZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortCoordinateZ
  System.Collections.Generic.List{Rhino.Geometry.Point3d}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Point3d}
  LagaRhino.PointData.TwoPointsInterpolation*:
    name:
      CSharp:
      - id: LagaRhino.PointData.TwoPointsInterpolation*
        name: TwoPointsInterpolation
        nameWithType: PointData.TwoPointsInterpolation
        qualifiedName: LagaRhino.PointData.TwoPointsInterpolation
      VB:
      - id: LagaRhino.PointData.TwoPointsInterpolation*
        name: TwoPointsInterpolation
        nameWithType: PointData.TwoPointsInterpolation
        qualifiedName: LagaRhino.PointData.TwoPointsInterpolation
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.TwoPointsInterpolation
  LagaRhino.PointData:
    name:
      CSharp:
      - id: LagaRhino.PointData
        name: PointData
        nameWithType: PointData
        qualifiedName: LagaRhino.PointData
      VB:
      - id: LagaRhino.PointData
        name: PointData
        nameWithType: PointData
        qualifiedName: LagaRhino.PointData
    isDefinition: true
    commentId: T:LagaRhino.PointData
  Rhino.Geometry.Surface:
    name:
      CSharp:
      - id: Rhino.Geometry.Surface
        name: Surface
        nameWithType: Surface
        qualifiedName: Rhino.Geometry.Surface
        isExternal: true
      VB:
      - id: Rhino.Geometry.Surface
        name: Surface
        nameWithType: Surface
        qualifiedName: Rhino.Geometry.Surface
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Surface
  LagaRhino.SurfaceData.PlaneSurfaceAxis*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceData.PlaneSurfaceAxis*
        name: PlaneSurfaceAxis
        nameWithType: SurfaceData.PlaneSurfaceAxis
        qualifiedName: LagaRhino.SurfaceData.PlaneSurfaceAxis
      VB:
      - id: LagaRhino.SurfaceData.PlaneSurfaceAxis*
        name: PlaneSurfaceAxis
        nameWithType: SurfaceData.PlaneSurfaceAxis
        qualifiedName: LagaRhino.SurfaceData.PlaneSurfaceAxis
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceData.PlaneSurfaceAxis
  LagaRhino.SurfaceData:
    name:
      CSharp:
      - id: LagaRhino.SurfaceData
        name: SurfaceData
        nameWithType: SurfaceData
        qualifiedName: LagaRhino.SurfaceData
      VB:
      - id: LagaRhino.SurfaceData
        name: SurfaceData
        nameWithType: SurfaceData
        qualifiedName: LagaRhino.SurfaceData
    isDefinition: true
    commentId: T:LagaRhino.SurfaceData
  LagaRhino:
    name:
      CSharp:
      - name: LagaRhino
        nameWithType: LagaRhino
        qualifiedName: LagaRhino
      VB:
      - name: LagaRhino
        nameWithType: LagaRhino
        qualifiedName: LagaRhino
    isDefinition: true
    commentId: N:LagaRhino
