<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LagaRhino</name>
    </assembly>
    <members>
        <member name="T:LagaRhino.CurveData">
            <summary>
            Simple Manipulations on Rhino Curves
            </summary>
        </member>
        <member name="M:LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.List{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Apply the same t parameter to a list of curves to return an array of points
            </summary>
            <param name="lstCrvs">The list of curves</param>
            <param name="t">t param</param>
            <returns>Point3d[]</returns>
        </member>
        <member name="M:LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.List{Rhino.Geometry.Curve})">
            <summary>
            Makes a deep copy from a list of curves.
            </summary>
            <param name="lstToCopy">The list to copy</param>
            <returns><![CDATA[List<Curve>]]></returns>
        </member>
        <member name="M:LagaRhino.CurveData.CorrectPlaneOnCurveByParam(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Align Perpendicular frames in the Curve
            </summary>
            <param name="crv">the curve in the analysis</param>
            <param name="t">the t param on the curve</param>
            <returns>Plane</returns>
        </member>
        <member name="T:LagaRhino.LineCurveData">
            <summary>
            Simple manipulations on Rhino LineCurves
            </summary>
        </member>
        <member name="M:LagaRhino.LineCurveData.Axis(Rhino.Geometry.LineCurve)">
            <summary>
            Transform a LineCurve to an Axis, The origin of the axis is the further point from the (0,0,0)
            </summary>
            <param name="axis">LineCurve</param>
            <returns>LineCurve</returns>
        </member>
        <member name="T:LagaRhino.PointData">
            <summary>
            Simple Manipulations on Rhino Points
            </summary>
        </member>
        <member name="M:LagaRhino.PointData.MirrorPointQuadrant(Rhino.Geometry.Point3d)">
            <summary>
            Mirror a point by the 4 quadrants
            </summary>
            <param name="point">point to mirror</param>
            <returns>Point3d[]</returns>
        </member>
        <member name="M:LagaRhino.PointData.PointQuadrant(Rhino.Geometry.Point3d)">
            <summary>
            determine in which quadrant is the point, if 0:++, 1:+-, 2:--, 3:-+.
            </summary>
            <param name="point">Test point</param>
            <returns>int</returns>
        </member>
        <member name="M:LagaRhino.PointData.SortPointsByZ(Rhino.Geometry.Point3d[])">
            <summary>
            Sort points by Z coordinate
            </summary>
            <param name="points">The points to sort</param>
            <returns>point3d[]</returns>
        </member>
        <member name="M:LagaRhino.PointData.SortPointsByXY(Rhino.Geometry.Point3d[])">
            <summary>
            Sort points by the coordinate X and then by the coordinate Y.
            </summary>
            <param name="points">The points to sort</param>
            <returns>point3d[]</returns>
        </member>
        <member name="M:LagaRhino.PointData.GroupByZ(Rhino.Geometry.Point3d[])">
            <summary>
            Group points by Z coordinate.
            </summary>
            <param name="points">the array of points to group</param>
            <returns><![CDATA[List<Point3d[]>]]></returns>
        </member>
        <member name="M:LagaRhino.PointData.TwoPointsInterpolation(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Interpolate 2 points by span distance
            </summary>
            <param name="pointA">Start point</param>
            <param name="pointB">End point</param>
            <param name="span">span distance</param>
            <returns>Point3d[]</returns>
        </member>
        <member name="M:LagaRhino.PointData.VectorToPoint3d(Laga.Geometry.Vector)">
            <summary>
            Convert Laga Vector to Rhino Point3d
            </summary>
            <param name="vector">The Vector to convert</param>
            <returns>Point3d</returns>
        </member>
        <member name="M:LagaRhino.PointData.Point3dToVector(Rhino.Geometry.Point3d)">
            <summary>
            Convert Rhino Point3d to Laga Vector
            </summary>
            <param name="point">The point to convert</param>
            <returns>Vector</returns>
        </member>
        <member name="T:LagaRhino.Shoebox">
            <summary>
            Class to build and analize shoeboxes types.
            </summary>
        </member>
        <member name="P:LagaRhino.Shoebox.ShoeBox">
            <summary>
            Get the ShoeBox geometry.
            </summary>
        </member>
        <member name="P:LagaRhino.Shoebox.Volume">
            <summary>
            Length Shoebox Property
            </summary>
        </member>
        <member name="P:LagaRhino.Shoebox.Area">
            <summary>
            Width Shoebox property
            </summary>
        </member>
        <member name="M:LagaRhino.Shoebox.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shoebox by length, width and height
            </summary>
            <param name="point">Base point location</param>
            <param name="rotate">Rotate parameter</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:LagaRhino.Shoebox.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shoebox with the free Z top points
            </summary>
            <param name="point">Base point location</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
            <param name="eHeight">Z parameter for e point</param>
            <param name="fHeight">Z parameter for f point</param>
            <param name="gHeight">Z parameter for g point</param>
            <param name="hHeight">Z parameter for h point</param>
            <param name="rotate">Rotate parameter</param>
        </member>
        <member name="T:LagaRhino.SurfaceData">
            <summary>
            Simple Manipulations on Rhino Surfaces
            </summary>
        </member>
        <member name="P:LagaRhino.SurfaceData.SurfacePoints">
            <summary>
            The points on the surface
            </summary>
        </member>
        <member name="M:LagaRhino.SurfaceData.#ctor(Rhino.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Construct a SurfaceData object
            </summary>
            <param name="surface">The base surface</param>
            <param name="uCount">number of points in u direction</param>
            <param name="vCount">number of points in v direction</param>
        </member>
        <member name="M:LagaRhino.SurfaceData.CustomPattern">
            <summary>
            To develop a custom pattern on surface
            </summary>
        </member>
        <member name="M:LagaRhino.SurfaceData.TriangularPatter">
            <summary>
            To develop Triangular Pattern
            </summary>
        </member>
        <member name="M:LagaRhino.SurfaceData.QuadPattern">
            <summary>
            Return a Quad Pattern division
            </summary>
            <returns><![CDATA[List<Polyline>]]></returns>
        </member>
        <member name="M:LagaRhino.SurfaceData.PlaneSurfaceAxis(Rhino.Geometry.LineCurve,System.Double)">
            <summary>
            Build a vertical planar surface from a LineCurve axis.
            </summary>
            <param name="axis">the axis</param>
            <param name="height">the height of the surface</param>
            <returns>Surface</returns>
        </member>
    </members>
</doc>
