id: LagaRhino
language: CSharp
name:
  Default: LagaRhino
qualifiedName:
  Default: LagaRhino
type: Assembly
modifiers: {}
items:
- id: LagaRhino
  commentId: N:LagaRhino
  language: CSharp
  name:
    CSharp: LagaRhino
    VB: LagaRhino
  nameWithType:
    CSharp: LagaRhino
    VB: LagaRhino
  qualifiedName:
    CSharp: LagaRhino
    VB: LagaRhino
  type: Namespace
  assemblies:
  - LagaRhino
  modifiers: {}
  items:
  - id: LagaRhino.Convexhull
    commentId: T:LagaRhino.Convexhull
    language: CSharp
    name:
      CSharp: Convexhull
      VB: Convexhull
    nameWithType:
      CSharp: Convexhull
      VB: Convexhull
    qualifiedName:
      CSharp: LagaRhino.Convexhull
      VB: LagaRhino.Convexhull
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: Convexhull
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Convexhull.cs
      startLine: 9
    summary: "\nConvexhull Class\n"
    example: []
    syntax:
      content:
        CSharp: public class Convexhull
        VB: Public Class Convexhull
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.Convexhull.ConvexHull2D(System.Collections.Generic.List{Point3d})
      commentId: M:LagaRhino.Convexhull.ConvexHull2D(System.Collections.Generic.List{Point3d})
      language: CSharp
      name:
        CSharp: ConvexHull2D(List<Point3d>)
        VB: ConvexHull2D(List(Of Point3d))
      nameWithType:
        CSharp: Convexhull.ConvexHull2D(List<Point3d>)
        VB: Convexhull.ConvexHull2D(List(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.Convexhull.ConvexHull2D(System.Collections.Generic.List<Point3d>)
        VB: LagaRhino.Convexhull.ConvexHull2D(System.Collections.Generic.List(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: ConvexHull2D
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Convexhull.cs
        startLine: 16
      summary: "\nConvexHull2d\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Point3d> ConvexHull2D(List<Point3d> points)
          VB: Public Shared Function ConvexHull2D(points As List(Of Point3d)) As List(Of Point3d)
        parameters:
        - id: points
          type: System.Collections.Generic.List{Point3d}
          description: The points
        return:
          type: System.Collections.Generic.List{Point3d}
          description: convexhull points
      overload: LagaRhino.Convexhull.ConvexHull2D*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.CurveData
    commentId: T:LagaRhino.CurveData
    language: CSharp
    name:
      CSharp: CurveData
      VB: CurveData
    nameWithType:
      CSharp: CurveData
      VB: CurveData
    qualifiedName:
      CSharp: LagaRhino.CurveData
      VB: LagaRhino.CurveData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: CurveData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
      startLine: 10
    summary: "\nSimple Manipulations on Rhino Curves\n"
    example: []
    syntax:
      content:
        CSharp: public class CurveData
        VB: Public Class CurveData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.CurveData.Reparam(Curve)
      commentId: M:LagaRhino.CurveData.Reparam(Curve)
      language: CSharp
      name:
        CSharp: Reparam(Curve)
        VB: Reparam(Curve)
      nameWithType:
        CSharp: CurveData.Reparam(Curve)
        VB: CurveData.Reparam(Curve)
      qualifiedName:
        CSharp: LagaRhino.CurveData.Reparam(Curve)
        VB: LagaRhino.CurveData.Reparam(Curve)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Reparam
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 18
      summary: "\nReparametrize Curve\n"
      example: []
      syntax:
        content:
          CSharp: public static void Reparam(Curve curve)
          VB: Public Shared Sub Reparam(curve As Curve)
        parameters:
        - id: curve
          type: Curve
          description: Curve to modify
      overload: LagaRhino.CurveData.Reparam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.PerpendicularSegment(Curve,System.Double,System.Double)
      commentId: M:LagaRhino.CurveData.PerpendicularSegment(Curve,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: PerpendicularSegment(Curve, Double, Double)
        VB: PerpendicularSegment(Curve, Double, Double)
      nameWithType:
        CSharp: CurveData.PerpendicularSegment(Curve, Double, Double)
        VB: CurveData.PerpendicularSegment(Curve, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.CurveData.PerpendicularSegment(Curve, System.Double, System.Double)
        VB: LagaRhino.CurveData.PerpendicularSegment(Curve, System.Double, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PerpendicularSegment
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 23
      syntax:
        content:
          CSharp: public static LineCurve PerpendicularSegment(Curve curve, double t, double length = 1)
          VB: Public Shared Function PerpendicularSegment(curve As Curve, t As Double, length As Double = 1) As LineCurve
        parameters:
        - id: curve
          type: Curve
        - id: t
          type: System.Double
        - id: length
          type: System.Double
        return:
          type: LineCurve
      overload: LagaRhino.CurveData.PerpendicularSegment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.Axis(Curve)
      commentId: M:LagaRhino.CurveData.Axis(Curve)
      language: CSharp
      name:
        CSharp: Axis(Curve)
        VB: Axis(Curve)
      nameWithType:
        CSharp: CurveData.Axis(Curve)
        VB: CurveData.Axis(Curve)
      qualifiedName:
        CSharp: LagaRhino.CurveData.Axis(Curve)
        VB: LagaRhino.CurveData.Axis(Curve)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Axis
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 52
      summary: "\nfrom the curve end points build an axis.\n"
      example: []
      syntax:
        content:
          CSharp: public static LineCurve Axis(Curve curve)
          VB: Public Shared Function Axis(curve As Curve) As LineCurve
        parameters:
        - id: curve
          type: Curve
          description: the curve to convert
        return:
          type: LineCurve
          description: LineCurve
      overload: LagaRhino.CurveData.Axis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.Evaluate(Curve,System.Double[])
      commentId: M:LagaRhino.CurveData.Evaluate(Curve,System.Double[])
      language: CSharp
      name:
        CSharp: Evaluate(Curve, Double[])
        VB: Evaluate(Curve, Double())
      nameWithType:
        CSharp: CurveData.Evaluate(Curve, Double[])
        VB: CurveData.Evaluate(Curve, Double())
      qualifiedName:
        CSharp: LagaRhino.CurveData.Evaluate(Curve, System.Double[])
        VB: LagaRhino.CurveData.Evaluate(Curve, System.Double())
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Evaluate
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 64
      summary: "\nEvaluate a curve based on array of parameters\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] Evaluate(Curve curve, double[] arrT)
          VB: Public Shared Function Evaluate(curve As Curve, arrT As Double()) As Point3d()
        parameters:
        - id: curve
          type: Curve
          description: The curve to evaluate
        - id: arrT
          type: System.Double[]
          description: the array of parameters
        return:
          type: Point3d[]
          description: Point3d[]
      overload: LagaRhino.CurveData.Evaluate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.IEnumerable{Curve},System.Double)
      commentId: M:LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.IEnumerable{Curve},System.Double)
      language: CSharp
      name:
        CSharp: GetPointFromCurves(IEnumerable<Curve>, Double)
        VB: GetPointFromCurves(IEnumerable(Of Curve), Double)
      nameWithType:
        CSharp: CurveData.GetPointFromCurves(IEnumerable<Curve>, Double)
        VB: CurveData.GetPointFromCurves(IEnumerable(Of Curve), Double)
      qualifiedName:
        CSharp: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.IEnumerable<Curve>, System.Double)
        VB: LagaRhino.CurveData.GetPointFromCurves(System.Collections.Generic.IEnumerable(Of Curve), System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: GetPointFromCurves
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 88
      summary: "\nApply the same t parameter to a list of curves to return an array of points\n"
      example:
      - "\nShows how to get the same point parameter from a list of curves.\n<pre><code>using LagaRhino;\n{\n    A = CurveData.GetPointFromCurves(curves, t);\n}</code></pre>\n"
      syntax:
        content:
          CSharp: public static Point3d[] GetPointFromCurves(IEnumerable<Curve> curves, double t)
          VB: Public Shared Function GetPointFromCurves(curves As IEnumerable(Of Curve), t As Double) As Point3d()
        parameters:
        - id: curves
          type: System.Collections.Generic.IEnumerable{Curve}
          description: The list of curves
        - id: t
          type: System.Double
          description: t param
        return:
          type: Point3d[]
          description: Point3d[]
      overload: LagaRhino.CurveData.GetPointFromCurves*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.IEnumerable{Curve})
      commentId: M:LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.IEnumerable{Curve})
      language: CSharp
      name:
        CSharp: DeepCopyListCurve(IEnumerable<Curve>)
        VB: DeepCopyListCurve(IEnumerable(Of Curve))
      nameWithType:
        CSharp: CurveData.DeepCopyListCurve(IEnumerable<Curve>)
        VB: CurveData.DeepCopyListCurve(IEnumerable(Of Curve))
      qualifiedName:
        CSharp: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.IEnumerable<Curve>)
        VB: LagaRhino.CurveData.DeepCopyListCurve(System.Collections.Generic.IEnumerable(Of Curve))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: DeepCopyListCurve
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 105
      summary: "\nMakes a deep copy from a list of curves.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Curve> DeepCopyListCurve(IEnumerable<Curve> curves)
          VB: Public Shared Function DeepCopyListCurve(curves As IEnumerable(Of Curve)) As List(Of Curve)
        parameters:
        - id: curves
          type: System.Collections.Generic.IEnumerable{Curve}
          description: The list to copy
        return:
          type: System.Collections.Generic.List{Curve}
          description: List&lt;Curve>
      overload: LagaRhino.CurveData.DeepCopyListCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.CorrectPlaneOnCurveByParam(Curve,System.Double)
      commentId: M:LagaRhino.CurveData.CorrectPlaneOnCurveByParam(Curve,System.Double)
      language: CSharp
      name:
        CSharp: CorrectPlaneOnCurveByParam(Curve, Double)
        VB: CorrectPlaneOnCurveByParam(Curve, Double)
      nameWithType:
        CSharp: CurveData.CorrectPlaneOnCurveByParam(Curve, Double)
        VB: CurveData.CorrectPlaneOnCurveByParam(Curve, Double)
      qualifiedName:
        CSharp: LagaRhino.CurveData.CorrectPlaneOnCurveByParam(Curve, System.Double)
        VB: LagaRhino.CurveData.CorrectPlaneOnCurveByParam(Curve, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: CorrectPlaneOnCurveByParam
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 122
      summary: "\nAlign Perpendicular frames in the Curve\n"
      example: []
      syntax:
        content:
          CSharp: public static Plane CorrectPlaneOnCurveByParam(Curve curve, double t)
          VB: Public Shared Function CorrectPlaneOnCurveByParam(curve As Curve, t As Double) As Plane
        parameters:
        - id: curve
          type: Curve
          description: the curve in the analysis
        - id: t
          type: System.Double
          description: the t param on the curve
        return:
          type: Plane
          description: Plane
      overload: LagaRhino.CurveData.CorrectPlaneOnCurveByParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.MirrorCurve(Curve,Plane)
      commentId: M:LagaRhino.CurveData.MirrorCurve(Curve,Plane)
      language: CSharp
      name:
        CSharp: MirrorCurve(Curve, Plane)
        VB: MirrorCurve(Curve, Plane)
      nameWithType:
        CSharp: CurveData.MirrorCurve(Curve, Plane)
        VB: CurveData.MirrorCurve(Curve, Plane)
      qualifiedName:
        CSharp: LagaRhino.CurveData.MirrorCurve(Curve, Plane)
        VB: LagaRhino.CurveData.MirrorCurve(Curve, Plane)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: MirrorCurve
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 147
      syntax:
        content:
          CSharp: public static Curve MirrorCurve(Curve curve, Plane plane)
          VB: Public Shared Function MirrorCurve(curve As Curve, plane As Plane) As Curve
        parameters:
        - id: curve
          type: Curve
        - id: plane
          type: Plane
        return:
          type: Curve
      overload: LagaRhino.CurveData.MirrorCurve*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.CurveData.CurvesZCoordinate(System.Collections.Generic.IEnumerable{Curve})
      commentId: M:LagaRhino.CurveData.CurvesZCoordinate(System.Collections.Generic.IEnumerable{Curve})
      language: CSharp
      name:
        CSharp: CurvesZCoordinate(IEnumerable<Curve>)
        VB: CurvesZCoordinate(IEnumerable(Of Curve))
      nameWithType:
        CSharp: CurveData.CurvesZCoordinate(IEnumerable<Curve>)
        VB: CurveData.CurvesZCoordinate(IEnumerable(Of Curve))
      qualifiedName:
        CSharp: LagaRhino.CurveData.CurvesZCoordinate(System.Collections.Generic.IEnumerable<Curve>)
        VB: LagaRhino.CurveData.CurvesZCoordinate(System.Collections.Generic.IEnumerable(Of Curve))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: CurvesZCoordinate
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\CurveData.cs
        startLine: 165
      summary: "\nGroup a collection of curves by their Z Value.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<double> CurvesZCoordinate(IEnumerable<Curve> curves)
          VB: Public Shared Function CurvesZCoordinate(curves As IEnumerable(Of Curve)) As List(Of Double)
        parameters:
        - id: curves
          type: System.Collections.Generic.IEnumerable{Curve}
          description: lstCrv
        return:
          type: System.Collections.Generic.List{System.Double}
          description: List&lt;double>
      overload: LagaRhino.CurveData.CurvesZCoordinate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.DrawText
    commentId: T:LagaRhino.DrawText
    language: CSharp
    name:
      CSharp: DrawText
      VB: DrawText
    nameWithType:
      CSharp: DrawText
      VB: DrawText
    qualifiedName:
      CSharp: LagaRhino.DrawText
      VB: LagaRhino.DrawText
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: DrawText
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\DrawText.cs
      startLine: 9
    summary: "\nDraw RichText in Rhino.\n"
    example: []
    syntax:
      content:
        CSharp: public class DrawText
        VB: Public Class DrawText
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.DrawText.#ctor(Plane,System.String,System.Int32)
      commentId: M:LagaRhino.DrawText.#ctor(Plane,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: DrawText(Plane, String, Int32)
        VB: DrawText(Plane, String, Int32)
      nameWithType:
        CSharp: DrawText.DrawText(Plane, String, Int32)
        VB: DrawText.DrawText(Plane, String, Int32)
      qualifiedName:
        CSharp: LagaRhino.DrawText.DrawText(Plane, System.String, System.Int32)
        VB: LagaRhino.DrawText.DrawText(Plane, System.String, System.Int32)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\DrawText.cs
        startLine: 21
      summary: "\nbasic constructor for draw text.\n"
      example: []
      syntax:
        content:
          CSharp: public DrawText(Plane plane, string message, int TextHeight = 20)
          VB: Public Sub New(plane As Plane, message As String, TextHeight As Integer = 20)
        parameters:
        - id: plane
          type: Plane
          description: ''
        - id: message
          type: System.String
          description: ''
        - id: TextHeight
          type: System.Int32
          description: The text height
      overload: LagaRhino.DrawText.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LagaRhino.LineCurveData
    commentId: T:LagaRhino.LineCurveData
    language: CSharp
    name:
      CSharp: LineCurveData
      VB: LineCurveData
    nameWithType:
      CSharp: LineCurveData
      VB: LineCurveData
    qualifiedName:
      CSharp: LagaRhino.LineCurveData
      VB: LagaRhino.LineCurveData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: LineCurveData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\LineCurveData.cs
      startLine: 7
    summary: "\nSimple manipulations on Rhino LineCurves\n"
    example: []
    syntax:
      content:
        CSharp: public class LineCurveData
        VB: Public Class LineCurveData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.LineCurveData.BuildPlane(LineCurve)
      commentId: M:LagaRhino.LineCurveData.BuildPlane(LineCurve)
      language: CSharp
      name:
        CSharp: BuildPlane(LineCurve)
        VB: BuildPlane(LineCurve)
      nameWithType:
        CSharp: LineCurveData.BuildPlane(LineCurve)
        VB: LineCurveData.BuildPlane(LineCurve)
      qualifiedName:
        CSharp: LagaRhino.LineCurveData.BuildPlane(LineCurve)
        VB: LagaRhino.LineCurveData.BuildPlane(LineCurve)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: BuildPlane
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\LineCurveData.cs
        startLine: 14
      summary: "\nBuild a plane from the axis, it&apos;s not the perpendicular plane.\n"
      example: []
      syntax:
        content:
          CSharp: public static Plane BuildPlane(LineCurve axis)
          VB: Public Shared Function BuildPlane(axis As LineCurve) As Plane
        parameters:
        - id: axis
          type: LineCurve
          description: The LineCurve base
        return:
          type: Plane
          description: Plane
      overload: LagaRhino.LineCurveData.BuildPlane*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.LineCurveData.Axis(LineCurve)
      commentId: M:LagaRhino.LineCurveData.Axis(LineCurve)
      language: CSharp
      name:
        CSharp: Axis(LineCurve)
        VB: Axis(LineCurve)
      nameWithType:
        CSharp: LineCurveData.Axis(LineCurve)
        VB: LineCurveData.Axis(LineCurve)
      qualifiedName:
        CSharp: LagaRhino.LineCurveData.Axis(LineCurve)
        VB: LagaRhino.LineCurveData.Axis(LineCurve)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Axis
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\LineCurveData.cs
        startLine: 34
      summary: "\nTransform a LineCurve to an Axis, The origin of the axis is the further point from the (0,0,0)\n"
      example: []
      syntax:
        content:
          CSharp: public static LineCurve Axis(LineCurve axis)
          VB: Public Shared Function Axis(axis As LineCurve) As LineCurve
        parameters:
        - id: axis
          type: LineCurve
          description: LineCurve
        return:
          type: LineCurve
          description: LineCurve
      overload: LagaRhino.LineCurveData.Axis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.LineCurveData.PlaneSurfaceAxis(LineCurve,System.Double)
      commentId: M:LagaRhino.LineCurveData.PlaneSurfaceAxis(LineCurve,System.Double)
      language: CSharp
      name:
        CSharp: PlaneSurfaceAxis(LineCurve, Double)
        VB: PlaneSurfaceAxis(LineCurve, Double)
      nameWithType:
        CSharp: LineCurveData.PlaneSurfaceAxis(LineCurve, Double)
        VB: LineCurveData.PlaneSurfaceAxis(LineCurve, Double)
      qualifiedName:
        CSharp: LagaRhino.LineCurveData.PlaneSurfaceAxis(LineCurve, System.Double)
        VB: LagaRhino.LineCurveData.PlaneSurfaceAxis(LineCurve, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PlaneSurfaceAxis
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\LineCurveData.cs
        startLine: 56
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public static Surface PlaneSurfaceAxis(LineCurve axis, double height = 100)
          VB: Public Shared Function PlaneSurfaceAxis(axis As LineCurve, height As Double = 100) As Surface
        parameters:
        - id: axis
          type: LineCurve
          description: ''
        - id: height
          type: System.Double
          description: ''
        return:
          type: Surface
          description: ''
      overload: LagaRhino.LineCurveData.PlaneSurfaceAxis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.PointData
    commentId: T:LagaRhino.PointData
    language: CSharp
    name:
      CSharp: PointData
      VB: PointData
    nameWithType:
      CSharp: PointData
      VB: PointData
    qualifiedName:
      CSharp: LagaRhino.PointData
      VB: LagaRhino.PointData
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: PointData
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
      startLine: 12
    summary: "\nSimple Manipulations on Rhino Points\n"
    example: []
    syntax:
      content:
        CSharp: public class PointData
        VB: Public Class PointData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.PointData.MirrorPointQuadrant(Point3d)
      commentId: M:LagaRhino.PointData.MirrorPointQuadrant(Point3d)
      language: CSharp
      name:
        CSharp: MirrorPointQuadrant(Point3d)
        VB: MirrorPointQuadrant(Point3d)
      nameWithType:
        CSharp: PointData.MirrorPointQuadrant(Point3d)
        VB: PointData.MirrorPointQuadrant(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.MirrorPointQuadrant(Point3d)
        VB: LagaRhino.PointData.MirrorPointQuadrant(Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: MirrorPointQuadrant
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 19
      summary: "\nMirror a point by the 4 quadrants\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] MirrorPointQuadrant(Point3d point)
          VB: Public Shared Function MirrorPointQuadrant(point As Point3d) As Point3d()
        parameters:
        - id: point
          type: Point3d
          description: point to mirror
        return:
          type: Point3d[]
          description: Point3d[]
      overload: LagaRhino.PointData.MirrorPointQuadrant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.PointQuadrant(Point3d)
      commentId: M:LagaRhino.PointData.PointQuadrant(Point3d)
      language: CSharp
      name:
        CSharp: PointQuadrant(Point3d)
        VB: PointQuadrant(Point3d)
      nameWithType:
        CSharp: PointData.PointQuadrant(Point3d)
        VB: PointData.PointQuadrant(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.PointQuadrant(Point3d)
        VB: LagaRhino.PointData.PointQuadrant(Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PointQuadrant
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 40
      summary: "\ndetermine in which quadrant is the point, if 0:++, 1:+-, 2:--, 3:-+.\n"
      example: []
      syntax:
        content:
          CSharp: public static int PointQuadrant(Point3d point)
          VB: Public Shared Function PointQuadrant(point As Point3d) As Integer
        parameters:
        - id: point
          type: Point3d
          description: Test point
        return:
          type: System.Int32
          description: int
      overload: LagaRhino.PointData.PointQuadrant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsByZ(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.SortPointsByZ(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: SortPointsByZ(IEnumerable<Point3d>)
        VB: SortPointsByZ(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.SortPointsByZ(IEnumerable<Point3d>)
        VB: PointData.SortPointsByZ(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsByZ(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.SortPointsByZ(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsByZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 71
      summary: "\nSort points by Z coordinate\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsByZ(IEnumerable<Point3d> points)
          VB: Public Shared Function SortPointsByZ(points As IEnumerable(Of Point3d)) As Point3d()
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: The points to sort
        return:
          type: Point3d[]
          description: point3d[]
      overload: LagaRhino.PointData.SortPointsByZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortCoordinateZ(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.SortCoordinateZ(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: SortCoordinateZ(IEnumerable<Point3d>)
        VB: SortCoordinateZ(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.SortCoordinateZ(IEnumerable<Point3d>)
        VB: PointData.SortCoordinateZ(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.SortCoordinateZ(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.SortCoordinateZ(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortCoordinateZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 81
      summary: "\nSort the Z coordinate from an array of points\n"
      example: []
      syntax:
        content:
          CSharp: public static double[] SortCoordinateZ(IEnumerable<Point3d> points)
          VB: Public Shared Function SortCoordinateZ(points As IEnumerable(Of Point3d)) As Double()
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: ''
        return:
          type: System.Double[]
          description: double[]
      overload: LagaRhino.PointData.SortCoordinateZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsQuadrant(Point3d)
      commentId: M:LagaRhino.PointData.SortPointsQuadrant(Point3d)
      language: CSharp
      name:
        CSharp: SortPointsQuadrant(Point3d)
        VB: SortPointsQuadrant(Point3d)
      nameWithType:
        CSharp: PointData.SortPointsQuadrant(Point3d)
        VB: PointData.SortPointsQuadrant(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsQuadrant(Point3d)
        VB: LagaRhino.PointData.SortPointsQuadrant(Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsQuadrant
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 91
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsQuadrant(Point3d point)
          VB: Public Shared Function SortPointsQuadrant(point As Point3d) As Point3d()
        parameters:
        - id: point
          type: Point3d
          description: ''
        return:
          type: Point3d[]
          description: ''
      overload: LagaRhino.PointData.SortPointsQuadrant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsByXY(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.SortPointsByXY(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: SortPointsByXY(IEnumerable<Point3d>)
        VB: SortPointsByXY(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.SortPointsByXY(IEnumerable<Point3d>)
        VB: PointData.SortPointsByXY(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsByXY(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.SortPointsByXY(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsByXY
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 110
      summary: "\nSort points by the coordinate X and then by the coordinate Y.\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d[] SortPointsByXY(IEnumerable<Point3d> points)
          VB: Public Shared Function SortPointsByXY(points As IEnumerable(Of Point3d)) As Point3d()
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: The points to sort
        return:
          type: Point3d[]
          description: point3d[]
      overload: LagaRhino.PointData.SortPointsByXY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.SortPointsClockwise(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.SortPointsClockwise(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: SortPointsClockwise(IEnumerable<Point3d>)
        VB: SortPointsClockwise(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.SortPointsClockwise(IEnumerable<Point3d>)
        VB: PointData.SortPointsClockwise(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.SortPointsClockwise(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.SortPointsClockwise(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SortPointsClockwise
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 122
      summary: "\nSort a list of points clockwise\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Point3d> SortPointsClockwise(IEnumerable<Point3d> points)
          VB: Public Shared Function SortPointsClockwise(points As IEnumerable(Of Point3d)) As List(Of Point3d)
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: the list of points
        return:
          type: System.Collections.Generic.List{Point3d}
          description: List&lt;Point3d>
      overload: LagaRhino.PointData.SortPointsClockwise*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.GroupPointsByZ(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.GroupPointsByZ(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: GroupPointsByZ(IEnumerable<Point3d>)
        VB: GroupPointsByZ(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.GroupPointsByZ(IEnumerable<Point3d>)
        VB: PointData.GroupPointsByZ(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.GroupPointsByZ(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.GroupPointsByZ(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: GroupPointsByZ
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 146
      summary: "\nGroup points by Z coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public static Population<Point3d> GroupPointsByZ(IEnumerable<Point3d> points)
          VB: Public Shared Function GroupPointsByZ(points As IEnumerable(Of Point3d)) As Population(Of Point3d)
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: the array of points to group
        return:
          type: Laga.GeneticAlgorithm.Population{Point3d}
          description: List&lt;Point3d[]>
      overload: LagaRhino.PointData.GroupPointsByZ*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.Interpolate2Points(Point3d,Point3d,System.Double)
      commentId: M:LagaRhino.PointData.Interpolate2Points(Point3d,Point3d,System.Double)
      language: CSharp
      name:
        CSharp: Interpolate2Points(Point3d, Point3d, Double)
        VB: Interpolate2Points(Point3d, Point3d, Double)
      nameWithType:
        CSharp: PointData.Interpolate2Points(Point3d, Point3d, Double)
        VB: PointData.Interpolate2Points(Point3d, Point3d, Double)
      qualifiedName:
        CSharp: LagaRhino.PointData.Interpolate2Points(Point3d, Point3d, System.Double)
        VB: LagaRhino.PointData.Interpolate2Points(Point3d, Point3d, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Interpolate2Points
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 178
      summary: "\nInterpolate 2 points by span distance\n"
      example: []
      syntax:
        content:
          CSharp: public static Population<Point3d> Interpolate2Points(Point3d pointA, Point3d pointB, double span)
          VB: Public Shared Function Interpolate2Points(pointA As Point3d, pointB As Point3d, span As Double) As Population(Of Point3d)
        parameters:
        - id: pointA
          type: Point3d
          description: Start point
        - id: pointB
          type: Point3d
          description: End point
        - id: span
          type: System.Double
          description: span distance
        return:
          type: Laga.GeneticAlgorithm.Population{Point3d}
          description: Point3d[,]
      overload: LagaRhino.PointData.Interpolate2Points*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.Vector2Point(Laga.Geometry.Vector)
      commentId: M:LagaRhino.PointData.Vector2Point(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Vector2Point(Vector)
        VB: Vector2Point(Vector)
      nameWithType:
        CSharp: PointData.Vector2Point(Vector)
        VB: PointData.Vector2Point(Vector)
      qualifiedName:
        CSharp: LagaRhino.PointData.Vector2Point(Laga.Geometry.Vector)
        VB: LagaRhino.PointData.Vector2Point(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Vector2Point
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 200
      summary: "\nConvert Laga Vector to Rhino Point\n"
      example: []
      syntax:
        content:
          CSharp: public static Point3d Vector2Point(Vector vector)
          VB: Public Shared Function Vector2Point(vector As Vector) As Point3d
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
          description: The Vector to convert
        return:
          type: Point3d
          description: Point3d
      overload: LagaRhino.PointData.Vector2Point*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.Vectors2Points(System.Collections.Generic.IEnumerable{Laga.Geometry.Vector})
      commentId: M:LagaRhino.PointData.Vectors2Points(System.Collections.Generic.IEnumerable{Laga.Geometry.Vector})
      language: CSharp
      name:
        CSharp: Vectors2Points(IEnumerable<Vector>)
        VB: Vectors2Points(IEnumerable(Of Vector))
      nameWithType:
        CSharp: PointData.Vectors2Points(IEnumerable<Vector>)
        VB: PointData.Vectors2Points(IEnumerable(Of Vector))
      qualifiedName:
        CSharp: LagaRhino.PointData.Vectors2Points(System.Collections.Generic.IEnumerable<Laga.Geometry.Vector>)
        VB: LagaRhino.PointData.Vectors2Points(System.Collections.Generic.IEnumerable(Of Laga.Geometry.Vector))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Vectors2Points
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 210
      summary: "\nConvert Laga Vectors to Rhino Points\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Point3d> Vectors2Points(IEnumerable<Vector> vectors)
          VB: Public Shared Function Vectors2Points(vectors As IEnumerable(Of Vector)) As List(Of Point3d)
        parameters:
        - id: vectors
          type: System.Collections.Generic.IEnumerable{Laga.Geometry.Vector}
          description: The arry of Vectors to convert
        return:
          type: System.Collections.Generic.List{Point3d}
          description: Point3d[]
      overload: LagaRhino.PointData.Vectors2Points*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.Point2Vector(Point3d)
      commentId: M:LagaRhino.PointData.Point2Vector(Point3d)
      language: CSharp
      name:
        CSharp: Point2Vector(Point3d)
        VB: Point2Vector(Point3d)
      nameWithType:
        CSharp: PointData.Point2Vector(Point3d)
        VB: PointData.Point2Vector(Point3d)
      qualifiedName:
        CSharp: LagaRhino.PointData.Point2Vector(Point3d)
        VB: LagaRhino.PointData.Point2Vector(Point3d)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Point2Vector
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 225
      summary: "\nConvert Rhino Point to Laga Vector\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector Point2Vector(Point3d point)
          VB: Public Shared Function Point2Vector(point As Point3d) As Vector
        parameters:
        - id: point
          type: Point3d
          description: The point to convert
        return:
          type: Laga.Geometry.Vector
          description: Vector
      overload: LagaRhino.PointData.Point2Vector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.Points2Vectors(System.Collections.Generic.IEnumerable{Point3d})
      commentId: M:LagaRhino.PointData.Points2Vectors(System.Collections.Generic.IEnumerable{Point3d})
      language: CSharp
      name:
        CSharp: Points2Vectors(IEnumerable<Point3d>)
        VB: Points2Vectors(IEnumerable(Of Point3d))
      nameWithType:
        CSharp: PointData.Points2Vectors(IEnumerable<Point3d>)
        VB: PointData.Points2Vectors(IEnumerable(Of Point3d))
      qualifiedName:
        CSharp: LagaRhino.PointData.Points2Vectors(System.Collections.Generic.IEnumerable<Point3d>)
        VB: LagaRhino.PointData.Points2Vectors(System.Collections.Generic.IEnumerable(Of Point3d))
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Points2Vectors
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 242
      summary: "\nConvert Rhino Point3ds to Laga Vectors\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Vector> Points2Vectors(IEnumerable<Point3d> points)
          VB: Public Shared Function Points2Vectors(points As IEnumerable(Of Point3d)) As List(Of Vector)
        parameters:
        - id: points
          type: System.Collections.Generic.IEnumerable{Point3d}
          description: The list of Points3d to convert
        return:
          type: System.Collections.Generic.List{Laga.Geometry.Vector}
          description: Vectors
      overload: LagaRhino.PointData.Points2Vectors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.PointData.FindZDifference(System.Collections.Generic.List{System.Double},System.Double,System.Double)
      commentId: M:LagaRhino.PointData.FindZDifference(System.Collections.Generic.List{System.Double},System.Double,System.Double)
      language: CSharp
      name:
        CSharp: FindZDifference(List<Double>, Double, Double)
        VB: FindZDifference(List(Of Double), Double, Double)
      nameWithType:
        CSharp: PointData.FindZDifference(List<Double>, Double, Double)
        VB: PointData.FindZDifference(List(Of Double), Double, Double)
      qualifiedName:
        CSharp: LagaRhino.PointData.FindZDifference(System.Collections.Generic.List<System.Double>, System.Double, System.Double)
        VB: LagaRhino.PointData.FindZDifference(System.Collections.Generic.List(Of System.Double), System.Double, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: FindZDifference
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\PointData.cs
        startLine: 259
      summary: "\nlist of Z values... not really...\n"
      example: []
      syntax:
        content:
          CSharp: public static double FindZDifference(List<double> pattern, double test, double stand = 0.35)
          VB: Public Shared Function FindZDifference(pattern As List(Of Double), test As Double, stand As Double = 0.35) As Double
        parameters:
        - id: pattern
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: test
          type: System.Double
          description: ''
        - id: stand
          type: System.Double
          description: ''
        return:
          type: System.Double
          description: double
      overload: LagaRhino.PointData.FindZDifference*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: LagaRhino.Shoebox
    commentId: T:LagaRhino.Shoebox
    language: CSharp
    name:
      CSharp: Shoebox
      VB: Shoebox
    nameWithType:
      CSharp: Shoebox
      VB: Shoebox
    qualifiedName:
      CSharp: LagaRhino.Shoebox
      VB: LagaRhino.Shoebox
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: Shoebox
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
      startLine: 7
    summary: "\nClass to build and analize shoeboxes types.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Shoebox : Brep'
        VB: >-
          Public Class Shoebox

              Inherits Brep
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.Shoebox.ShoeBox
      commentId: P:LagaRhino.Shoebox.ShoeBox
      language: CSharp
      name:
        CSharp: ShoeBox
        VB: ShoeBox
      nameWithType:
        CSharp: Shoebox.ShoeBox
        VB: Shoebox.ShoeBox
      qualifiedName:
        CSharp: LagaRhino.Shoebox.ShoeBox
        VB: LagaRhino.Shoebox.ShoeBox
      type: Property
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: ShoeBox
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 19
      summary: "\nGet the ShoeBox geometry.\n"
      example: []
      syntax:
        content:
          CSharp: public Brep ShoeBox { get; }
          VB: Public ReadOnly Property ShoeBox As Brep
        parameters: []
        return:
          type: Brep
      overload: LagaRhino.Shoebox.ShoeBox*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: LagaRhino.Shoebox.Volume
      commentId: P:LagaRhino.Shoebox.Volume
      language: CSharp
      name:
        CSharp: Volume
        VB: Volume
      nameWithType:
        CSharp: Shoebox.Volume
        VB: Shoebox.Volume
      qualifiedName:
        CSharp: LagaRhino.Shoebox.Volume
        VB: LagaRhino.Shoebox.Volume
      type: Property
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Volume
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 24
      summary: "\nLength Shoebox Property\n"
      example: []
      syntax:
        content:
          CSharp: public double Volume { get; }
          VB: Public ReadOnly Property Volume As Double
        parameters: []
        return:
          type: System.Double
      overload: LagaRhino.Shoebox.Volume*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: LagaRhino.Shoebox.Area
      commentId: P:LagaRhino.Shoebox.Area
      language: CSharp
      name:
        CSharp: Area
        VB: Area
      nameWithType:
        CSharp: Shoebox.Area
        VB: Shoebox.Area
      qualifiedName:
        CSharp: LagaRhino.Shoebox.Area
        VB: LagaRhino.Shoebox.Area
      type: Property
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Area
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 30
      summary: "\nWidth Shoebox property\n"
      example: []
      syntax:
        content:
          CSharp: public double Area { get; }
          VB: Public ReadOnly Property Area As Double
        parameters: []
        return:
          type: System.Double
      overload: LagaRhino.Shoebox.Area*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: LagaRhino.Shoebox.#ctor(Point3d,System.Double,System.Double,System.Double,System.Double)
      commentId: M:LagaRhino.Shoebox.#ctor(Point3d,System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Shoebox(Point3d, Double, Double, Double, Double)
        VB: Shoebox(Point3d, Double, Double, Double, Double)
      nameWithType:
        CSharp: Shoebox.Shoebox(Point3d, Double, Double, Double, Double)
        VB: Shoebox.Shoebox(Point3d, Double, Double, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.Shoebox.Shoebox(Point3d, System.Double, System.Double, System.Double, System.Double)
        VB: LagaRhino.Shoebox.Shoebox(Point3d, System.Double, System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 41
      summary: "\nShoebox by length, width and height\n"
      example: []
      syntax:
        content:
          CSharp: public Shoebox(Point3d point, double length, double width, double height, double rotate = 0)
          VB: Public Sub New(point As Point3d, length As Double, width As Double, height As Double, rotate As Double = 0)
        parameters:
        - id: point
          type: Point3d
          description: Base point location
        - id: length
          type: System.Double
          description: Length
        - id: width
          type: System.Double
          description: Width
        - id: height
          type: System.Double
          description: Height
        - id: rotate
          type: System.Double
          description: Rotate parameter
      overload: LagaRhino.Shoebox.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.Shoebox.Rot(System.Double)
      commentId: M:LagaRhino.Shoebox.Rot(System.Double)
      language: CSharp
      name:
        CSharp: Rot(Double)
        VB: Rot(Double)
      nameWithType:
        CSharp: Shoebox.Rot(Double)
        VB: Shoebox.Rot(Double)
      qualifiedName:
        CSharp: LagaRhino.Shoebox.Rot(System.Double)
        VB: LagaRhino.Shoebox.Rot(System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: Rot
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 63
      summary: "\nRotate Shoebox\n"
      example: []
      syntax:
        content:
          CSharp: public void Rot(double angle)
          VB: Public Sub Rot(angle As Double)
        parameters:
        - id: angle
          type: System.Double
          description: Rotation angle in radians
      overload: LagaRhino.Shoebox.Rot*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.Shoebox.#ctor(Point3d,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
      commentId: M:LagaRhino.Shoebox.#ctor(Point3d,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Shoebox(Point3d, Double, Double, Double, Double, Double, Double, Double)
        VB: Shoebox(Point3d, Double, Double, Double, Double, Double, Double, Double)
      nameWithType:
        CSharp: Shoebox.Shoebox(Point3d, Double, Double, Double, Double, Double, Double, Double)
        VB: Shoebox.Shoebox(Point3d, Double, Double, Double, Double, Double, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.Shoebox.Shoebox(Point3d, System.Double, System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)
        VB: LagaRhino.Shoebox.Shoebox(Point3d, System.Double, System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\Shoebox.cs
        startLine: 79
      summary: "\nShoebox with the free Z top points\n"
      example: []
      syntax:
        content:
          CSharp: public Shoebox(Point3d point, double length, double width, double eHeight, double fHeight, double gHeight, double hHeight, double rotate = 0)
          VB: Public Sub New(point As Point3d, length As Double, width As Double, eHeight As Double, fHeight As Double, gHeight As Double, hHeight As Double, rotate As Double = 0)
        parameters:
        - id: point
          type: Point3d
          description: Base point location
        - id: length
          type: System.Double
          description: Length
        - id: width
          type: System.Double
          description: Width
        - id: eHeight
          type: System.Double
          description: Z parameter for e point
        - id: fHeight
          type: System.Double
          description: Z parameter for f point
        - id: gHeight
          type: System.Double
          description: Z parameter for g point
        - id: hHeight
          type: System.Double
          description: Z parameter for h point
        - id: rotate
          type: System.Double
          description: Rotate parameter
      overload: LagaRhino.Shoebox.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LagaRhino.SurfaceAnalysis
    commentId: T:LagaRhino.SurfaceAnalysis
    language: CSharp
    name:
      CSharp: SurfaceAnalysis
      VB: SurfaceAnalysis
    nameWithType:
      CSharp: SurfaceAnalysis
      VB: SurfaceAnalysis
    qualifiedName:
      CSharp: LagaRhino.SurfaceAnalysis
      VB: LagaRhino.SurfaceAnalysis
    type: Class
    assemblies:
    - LagaRhino
    namespace: LagaRhino
    source:
      id: SurfaceAnalysis
      path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
      startLine: 16
    summary: "\nSimple Manipulations on Rhino Surfaces\n"
    example: []
    syntax:
      content:
        CSharp: public class SurfaceAnalysis
        VB: Public Class SurfaceAnalysis
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LagaRhino.SurfaceAnalysis.PointsOnSurface
      commentId: P:LagaRhino.SurfaceAnalysis.PointsOnSurface
      language: CSharp
      name:
        CSharp: PointsOnSurface
        VB: PointsOnSurface
      nameWithType:
        CSharp: SurfaceAnalysis.PointsOnSurface
        VB: SurfaceAnalysis.PointsOnSurface
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.PointsOnSurface
        VB: LagaRhino.SurfaceAnalysis.PointsOnSurface
      type: Property
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: PointsOnSurface
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 27
      summary: "\nGet access to all points on the surface.\n"
      example: []
      syntax:
        content:
          CSharp: public Population<Point3d> PointsOnSurface { get; }
          VB: Public ReadOnly Property PointsOnSurface As Population(Of Point3d)
        parameters: []
        return:
          type: Laga.GeneticAlgorithm.Population{Point3d}
      overload: LagaRhino.SurfaceAnalysis.PointsOnSurface*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: LagaRhino.SurfaceAnalysis.#ctor(Surface,System.Int32,System.Int32)
      commentId: M:LagaRhino.SurfaceAnalysis.#ctor(Surface,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SurfaceAnalysis(Surface, Int32, Int32)
        VB: SurfaceAnalysis(Surface, Int32, Int32)
      nameWithType:
        CSharp: SurfaceAnalysis.SurfaceAnalysis(Surface, Int32, Int32)
        VB: SurfaceAnalysis.SurfaceAnalysis(Surface, Int32, Int32)
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.SurfaceAnalysis(Surface, System.Int32, System.Int32)
        VB: LagaRhino.SurfaceAnalysis.SurfaceAnalysis(Surface, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 64
      summary: "\nConstructor, Subdivide the surface by u and v numbers.\n"
      example: []
      syntax:
        content:
          CSharp: public SurfaceAnalysis(Surface surface, int uCount, int vCount)
          VB: Public Sub New(surface As Surface, uCount As Integer, vCount As Integer)
        parameters:
        - id: surface
          type: Surface
          description: The base surface
        - id: uCount
          type: System.Int32
          description: number of points in u direction
        - id: vCount
          type: System.Int32
          description: number of points in v direction
      overload: LagaRhino.SurfaceAnalysis.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.SurfaceAnalysis.#ctor(Surface,System.Double,System.Double)
      commentId: M:LagaRhino.SurfaceAnalysis.#ctor(Surface,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: SurfaceAnalysis(Surface, Double, Double)
        VB: SurfaceAnalysis(Surface, Double, Double)
      nameWithType:
        CSharp: SurfaceAnalysis.SurfaceAnalysis(Surface, Double, Double)
        VB: SurfaceAnalysis.SurfaceAnalysis(Surface, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.SurfaceAnalysis(Surface, System.Double, System.Double)
        VB: LagaRhino.SurfaceAnalysis.SurfaceAnalysis(Surface, System.Double, System.Double)
      type: Constructor
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: .ctor
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 82
      summary: "\nConstructor, Subdivide the surface by uspan length and vspan length.\n"
      example: []
      syntax:
        content:
          CSharp: public SurfaceAnalysis(Surface surface, double uSpan, double vSpan)
          VB: Public Sub New(surface As Surface, uSpan As Double, vSpan As Double)
        parameters:
        - id: surface
          type: Surface
          description: The base surface
        - id: uSpan
          type: System.Double
          description: the span length for u direction
        - id: vSpan
          type: System.Double
          description: the span length for v direction
      overload: LagaRhino.SurfaceAnalysis.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.SurfaceAnalysis.SubdividebyPlanes(Surface,System.Int32,System.Int32,System.Double,System.Double)
      commentId: M:LagaRhino.SurfaceAnalysis.SubdividebyPlanes(Surface,System.Int32,System.Int32,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: SubdividebyPlanes(Surface, Int32, Int32, Double, Double)
        VB: SubdividebyPlanes(Surface, Int32, Int32, Double, Double)
      nameWithType:
        CSharp: SurfaceAnalysis.SubdividebyPlanes(Surface, Int32, Int32, Double, Double)
        VB: SurfaceAnalysis.SubdividebyPlanes(Surface, Int32, Int32, Double, Double)
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.SubdividebyPlanes(Surface, System.Int32, System.Int32, System.Double, System.Double)
        VB: LagaRhino.SurfaceAnalysis.SubdividebyPlanes(Surface, System.Int32, System.Int32, System.Double, System.Double)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: SubdividebyPlanes
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 100
      summary: "\nSubdivide surface by planes.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Plane> SubdividebyPlanes(Surface surface, int uCount, int vCount, double uSpan = 0, double vSpan = 0)
          VB: Public Shared Function SubdividebyPlanes(surface As Surface, uCount As Integer, vCount As Integer, uSpan As Double = 0, vSpan As Double = 0) As List(Of Plane)
        parameters:
        - id: surface
          type: Surface
          description: The surface
        - id: uCount
          type: System.Int32
          description: The number of divisions in u direction
        - id: vCount
          type: System.Int32
          description: The number of divisions in v direction
        - id: uSpan
          type: System.Double
          description: The offset span from u direction
        - id: vSpan
          type: System.Double
          description: the offset span from v direction
        return:
          type: System.Collections.Generic.List{Plane}
          description: List<Plane></Plane>
      overload: LagaRhino.SurfaceAnalysis.SubdividebyPlanes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LagaRhino.SurfaceAnalysis.CustomPattern(System.String)
      commentId: M:LagaRhino.SurfaceAnalysis.CustomPattern(System.String)
      language: CSharp
      name:
        CSharp: CustomPattern(String)
        VB: CustomPattern(String)
      nameWithType:
        CSharp: SurfaceAnalysis.CustomPattern(String)
        VB: SurfaceAnalysis.CustomPattern(String)
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.CustomPattern(System.String)
        VB: LagaRhino.SurfaceAnalysis.CustomPattern(System.String)
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: CustomPattern
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 125
      summary: "\nTo develop a custom pattern on surface\n"
      example: []
      syntax:
        content:
          CSharp: public void CustomPattern(string grammar)
          VB: Public Sub CustomPattern(grammar As String)
        parameters:
        - id: grammar
          type: System.String
      overload: LagaRhino.SurfaceAnalysis.CustomPattern*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.SurfaceAnalysis.TriangularPattern
      commentId: M:LagaRhino.SurfaceAnalysis.TriangularPattern
      language: CSharp
      name:
        CSharp: TriangularPattern()
        VB: TriangularPattern()
      nameWithType:
        CSharp: SurfaceAnalysis.TriangularPattern()
        VB: SurfaceAnalysis.TriangularPattern()
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.TriangularPattern()
        VB: LagaRhino.SurfaceAnalysis.TriangularPattern()
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: TriangularPattern
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 133
      summary: "\nTo develop Triangular Pattern\n"
      example: []
      syntax:
        content:
          CSharp: public void TriangularPattern()
          VB: Public Sub TriangularPattern
      overload: LagaRhino.SurfaceAnalysis.TriangularPattern*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LagaRhino.SurfaceAnalysis.QuadPattern
      commentId: M:LagaRhino.SurfaceAnalysis.QuadPattern
      language: CSharp
      name:
        CSharp: QuadPattern()
        VB: QuadPattern()
      nameWithType:
        CSharp: SurfaceAnalysis.QuadPattern()
        VB: SurfaceAnalysis.QuadPattern()
      qualifiedName:
        CSharp: LagaRhino.SurfaceAnalysis.QuadPattern()
        VB: LagaRhino.SurfaceAnalysis.QuadPattern()
      type: Method
      assemblies:
      - LagaRhino
      namespace: LagaRhino
      source:
        id: QuadPattern
        path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\LagaRhino\SurfaceAnalysis.cs
        startLine: 142
      summary: "\nReturn a Quad Pattern division\n"
      example: []
      syntax:
        content:
          CSharp: public Population<Polyline> QuadPattern()
          VB: Public Function QuadPattern As Population(Of Polyline)
        return:
          type: Laga.GeneticAlgorithm.Population{Polyline}
          description: List&lt;Polyline>
      overload: LagaRhino.SurfaceAnalysis.QuadPattern*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{Point3d}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Point3d}
  LagaRhino.Convexhull.ConvexHull2D*:
    name:
      CSharp:
      - id: LagaRhino.Convexhull.ConvexHull2D*
        name: ConvexHull2D
        nameWithType: Convexhull.ConvexHull2D
        qualifiedName: LagaRhino.Convexhull.ConvexHull2D
      VB:
      - id: LagaRhino.Convexhull.ConvexHull2D*
        name: ConvexHull2D
        nameWithType: Convexhull.ConvexHull2D
        qualifiedName: LagaRhino.Convexhull.ConvexHull2D
    isDefinition: true
    commentId: Overload:LagaRhino.Convexhull.ConvexHull2D
  LagaRhino.Convexhull:
    name:
      CSharp:
      - id: LagaRhino.Convexhull
        name: Convexhull
        nameWithType: Convexhull
        qualifiedName: LagaRhino.Convexhull
      VB:
      - id: LagaRhino.Convexhull
        name: Convexhull
        nameWithType: Convexhull
        qualifiedName: LagaRhino.Convexhull
    isDefinition: true
    commentId: T:LagaRhino.Convexhull
  Curve:
    name:
      CSharp:
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
      VB:
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
    isDefinition: true
  LagaRhino.CurveData.Reparam*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.Reparam*
        name: Reparam
        nameWithType: CurveData.Reparam
        qualifiedName: LagaRhino.CurveData.Reparam
      VB:
      - id: LagaRhino.CurveData.Reparam*
        name: Reparam
        nameWithType: CurveData.Reparam
        qualifiedName: LagaRhino.CurveData.Reparam
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.Reparam
  LineCurve:
    name:
      CSharp:
      - id: LineCurve
        name: LineCurve
        nameWithType: LineCurve
        qualifiedName: LineCurve
        isExternal: true
      VB:
      - id: LineCurve
        name: LineCurve
        nameWithType: LineCurve
        qualifiedName: LineCurve
        isExternal: true
    isDefinition: true
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  LagaRhino.CurveData.PerpendicularSegment*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.PerpendicularSegment*
        name: PerpendicularSegment
        nameWithType: CurveData.PerpendicularSegment
        qualifiedName: LagaRhino.CurveData.PerpendicularSegment
      VB:
      - id: LagaRhino.CurveData.PerpendicularSegment*
        name: PerpendicularSegment
        nameWithType: CurveData.PerpendicularSegment
        qualifiedName: LagaRhino.CurveData.PerpendicularSegment
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.PerpendicularSegment
  LagaRhino.CurveData.Axis*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.Axis*
        name: Axis
        nameWithType: CurveData.Axis
        qualifiedName: LagaRhino.CurveData.Axis
      VB:
      - id: LagaRhino.CurveData.Axis*
        name: Axis
        nameWithType: CurveData.Axis
        qualifiedName: LagaRhino.CurveData.Axis
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.Axis
  Point3d[]:
    name:
      CSharp:
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  LagaRhino.CurveData.Evaluate*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.Evaluate*
        name: Evaluate
        nameWithType: CurveData.Evaluate
        qualifiedName: LagaRhino.CurveData.Evaluate
      VB:
      - id: LagaRhino.CurveData.Evaluate*
        name: Evaluate
        nameWithType: CurveData.Evaluate
        qualifiedName: LagaRhino.CurveData.Evaluate
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.Evaluate
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{Curve}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Curve}
  LagaRhino.CurveData.GetPointFromCurves*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.GetPointFromCurves*
        name: GetPointFromCurves
        nameWithType: CurveData.GetPointFromCurves
        qualifiedName: LagaRhino.CurveData.GetPointFromCurves
      VB:
      - id: LagaRhino.CurveData.GetPointFromCurves*
        name: GetPointFromCurves
        nameWithType: CurveData.GetPointFromCurves
        qualifiedName: LagaRhino.CurveData.GetPointFromCurves
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.GetPointFromCurves
  System.Collections.Generic.List{Curve}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Curve
        name: Curve
        nameWithType: Curve
        qualifiedName: Curve
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Curve}
  LagaRhino.CurveData.DeepCopyListCurve*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.DeepCopyListCurve*
        name: DeepCopyListCurve
        nameWithType: CurveData.DeepCopyListCurve
        qualifiedName: LagaRhino.CurveData.DeepCopyListCurve
      VB:
      - id: LagaRhino.CurveData.DeepCopyListCurve*
        name: DeepCopyListCurve
        nameWithType: CurveData.DeepCopyListCurve
        qualifiedName: LagaRhino.CurveData.DeepCopyListCurve
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.DeepCopyListCurve
  Plane:
    name:
      CSharp:
      - id: Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Plane
        isExternal: true
      VB:
      - id: Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Plane
        isExternal: true
    isDefinition: true
  LagaRhino.CurveData.CorrectPlaneOnCurveByParam*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.CorrectPlaneOnCurveByParam*
        name: CorrectPlaneOnCurveByParam
        nameWithType: CurveData.CorrectPlaneOnCurveByParam
        qualifiedName: LagaRhino.CurveData.CorrectPlaneOnCurveByParam
      VB:
      - id: LagaRhino.CurveData.CorrectPlaneOnCurveByParam*
        name: CorrectPlaneOnCurveByParam
        nameWithType: CurveData.CorrectPlaneOnCurveByParam
        qualifiedName: LagaRhino.CurveData.CorrectPlaneOnCurveByParam
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.CorrectPlaneOnCurveByParam
  LagaRhino.CurveData.MirrorCurve*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.MirrorCurve*
        name: MirrorCurve
        nameWithType: CurveData.MirrorCurve
        qualifiedName: LagaRhino.CurveData.MirrorCurve
      VB:
      - id: LagaRhino.CurveData.MirrorCurve*
        name: MirrorCurve
        nameWithType: CurveData.MirrorCurve
        qualifiedName: LagaRhino.CurveData.MirrorCurve
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.MirrorCurve
  System.Collections.Generic.List{System.Double}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Double}
  LagaRhino.CurveData.CurvesZCoordinate*:
    name:
      CSharp:
      - id: LagaRhino.CurveData.CurvesZCoordinate*
        name: CurvesZCoordinate
        nameWithType: CurveData.CurvesZCoordinate
        qualifiedName: LagaRhino.CurveData.CurvesZCoordinate
      VB:
      - id: LagaRhino.CurveData.CurvesZCoordinate*
        name: CurvesZCoordinate
        nameWithType: CurveData.CurvesZCoordinate
        qualifiedName: LagaRhino.CurveData.CurvesZCoordinate
    isDefinition: true
    commentId: Overload:LagaRhino.CurveData.CurvesZCoordinate
  LagaRhino.CurveData:
    name:
      CSharp:
      - id: LagaRhino.CurveData
        name: CurveData
        nameWithType: CurveData
        qualifiedName: LagaRhino.CurveData
      VB:
      - id: LagaRhino.CurveData
        name: CurveData
        nameWithType: CurveData
        qualifiedName: LagaRhino.CurveData
    isDefinition: true
    commentId: T:LagaRhino.CurveData
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  LagaRhino.DrawText.#ctor*:
    name:
      CSharp:
      - id: LagaRhino.DrawText.#ctor*
        name: DrawText
        nameWithType: DrawText.DrawText
        qualifiedName: LagaRhino.DrawText.DrawText
      VB:
      - id: LagaRhino.DrawText.#ctor*
        name: DrawText
        nameWithType: DrawText.DrawText
        qualifiedName: LagaRhino.DrawText.DrawText
    isDefinition: true
    commentId: Overload:LagaRhino.DrawText.#ctor
  LagaRhino.DrawText:
    name:
      CSharp:
      - id: LagaRhino.DrawText
        name: DrawText
        nameWithType: DrawText
        qualifiedName: LagaRhino.DrawText
      VB:
      - id: LagaRhino.DrawText
        name: DrawText
        nameWithType: DrawText
        qualifiedName: LagaRhino.DrawText
    isDefinition: true
    commentId: T:LagaRhino.DrawText
  LagaRhino.LineCurveData.BuildPlane*:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData.BuildPlane*
        name: BuildPlane
        nameWithType: LineCurveData.BuildPlane
        qualifiedName: LagaRhino.LineCurveData.BuildPlane
      VB:
      - id: LagaRhino.LineCurveData.BuildPlane*
        name: BuildPlane
        nameWithType: LineCurveData.BuildPlane
        qualifiedName: LagaRhino.LineCurveData.BuildPlane
    isDefinition: true
    commentId: Overload:LagaRhino.LineCurveData.BuildPlane
  LagaRhino.LineCurveData.Axis*:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData.Axis*
        name: Axis
        nameWithType: LineCurveData.Axis
        qualifiedName: LagaRhino.LineCurveData.Axis
      VB:
      - id: LagaRhino.LineCurveData.Axis*
        name: Axis
        nameWithType: LineCurveData.Axis
        qualifiedName: LagaRhino.LineCurveData.Axis
    isDefinition: true
    commentId: Overload:LagaRhino.LineCurveData.Axis
  Surface:
    name:
      CSharp:
      - id: Surface
        name: Surface
        nameWithType: Surface
        qualifiedName: Surface
        isExternal: true
      VB:
      - id: Surface
        name: Surface
        nameWithType: Surface
        qualifiedName: Surface
        isExternal: true
    isDefinition: true
  LagaRhino.LineCurveData.PlaneSurfaceAxis*:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData.PlaneSurfaceAxis*
        name: PlaneSurfaceAxis
        nameWithType: LineCurveData.PlaneSurfaceAxis
        qualifiedName: LagaRhino.LineCurveData.PlaneSurfaceAxis
      VB:
      - id: LagaRhino.LineCurveData.PlaneSurfaceAxis*
        name: PlaneSurfaceAxis
        nameWithType: LineCurveData.PlaneSurfaceAxis
        qualifiedName: LagaRhino.LineCurveData.PlaneSurfaceAxis
    isDefinition: true
    commentId: Overload:LagaRhino.LineCurveData.PlaneSurfaceAxis
  LagaRhino.LineCurveData:
    name:
      CSharp:
      - id: LagaRhino.LineCurveData
        name: LineCurveData
        nameWithType: LineCurveData
        qualifiedName: LagaRhino.LineCurveData
      VB:
      - id: LagaRhino.LineCurveData
        name: LineCurveData
        nameWithType: LineCurveData
        qualifiedName: LagaRhino.LineCurveData
    isDefinition: true
    commentId: T:LagaRhino.LineCurveData
  Point3d:
    name:
      CSharp:
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      VB:
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
    isDefinition: true
  LagaRhino.PointData.MirrorPointQuadrant*:
    name:
      CSharp:
      - id: LagaRhino.PointData.MirrorPointQuadrant*
        name: MirrorPointQuadrant
        nameWithType: PointData.MirrorPointQuadrant
        qualifiedName: LagaRhino.PointData.MirrorPointQuadrant
      VB:
      - id: LagaRhino.PointData.MirrorPointQuadrant*
        name: MirrorPointQuadrant
        nameWithType: PointData.MirrorPointQuadrant
        qualifiedName: LagaRhino.PointData.MirrorPointQuadrant
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.MirrorPointQuadrant
  LagaRhino.PointData.PointQuadrant*:
    name:
      CSharp:
      - id: LagaRhino.PointData.PointQuadrant*
        name: PointQuadrant
        nameWithType: PointData.PointQuadrant
        qualifiedName: LagaRhino.PointData.PointQuadrant
      VB:
      - id: LagaRhino.PointData.PointQuadrant*
        name: PointQuadrant
        nameWithType: PointData.PointQuadrant
        qualifiedName: LagaRhino.PointData.PointQuadrant
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.PointQuadrant
  System.Collections.Generic.IEnumerable{Point3d}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Point3d}
  LagaRhino.PointData.SortPointsByZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsByZ*
        name: SortPointsByZ
        nameWithType: PointData.SortPointsByZ
        qualifiedName: LagaRhino.PointData.SortPointsByZ
      VB:
      - id: LagaRhino.PointData.SortPointsByZ*
        name: SortPointsByZ
        nameWithType: PointData.SortPointsByZ
        qualifiedName: LagaRhino.PointData.SortPointsByZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsByZ
  LagaRhino.PointData.SortCoordinateZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortCoordinateZ*
        name: SortCoordinateZ
        nameWithType: PointData.SortCoordinateZ
        qualifiedName: LagaRhino.PointData.SortCoordinateZ
      VB:
      - id: LagaRhino.PointData.SortCoordinateZ*
        name: SortCoordinateZ
        nameWithType: PointData.SortCoordinateZ
        qualifiedName: LagaRhino.PointData.SortCoordinateZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortCoordinateZ
  LagaRhino.PointData.SortPointsQuadrant*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsQuadrant*
        name: SortPointsQuadrant
        nameWithType: PointData.SortPointsQuadrant
        qualifiedName: LagaRhino.PointData.SortPointsQuadrant
      VB:
      - id: LagaRhino.PointData.SortPointsQuadrant*
        name: SortPointsQuadrant
        nameWithType: PointData.SortPointsQuadrant
        qualifiedName: LagaRhino.PointData.SortPointsQuadrant
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsQuadrant
  LagaRhino.PointData.SortPointsByXY*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsByXY*
        name: SortPointsByXY
        nameWithType: PointData.SortPointsByXY
        qualifiedName: LagaRhino.PointData.SortPointsByXY
      VB:
      - id: LagaRhino.PointData.SortPointsByXY*
        name: SortPointsByXY
        nameWithType: PointData.SortPointsByXY
        qualifiedName: LagaRhino.PointData.SortPointsByXY
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsByXY
  LagaRhino.PointData.SortPointsClockwise*:
    name:
      CSharp:
      - id: LagaRhino.PointData.SortPointsClockwise*
        name: SortPointsClockwise
        nameWithType: PointData.SortPointsClockwise
        qualifiedName: LagaRhino.PointData.SortPointsClockwise
      VB:
      - id: LagaRhino.PointData.SortPointsClockwise*
        name: SortPointsClockwise
        nameWithType: PointData.SortPointsClockwise
        qualifiedName: LagaRhino.PointData.SortPointsClockwise
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.SortPointsClockwise
  Laga.GeneticAlgorithm.Population`1:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.Population`1
  Laga.GeneticAlgorithm:
    name:
      CSharp:
      - name: Laga.GeneticAlgorithm
        nameWithType: Laga.GeneticAlgorithm
        qualifiedName: Laga.GeneticAlgorithm
      VB:
      - name: Laga.GeneticAlgorithm
        nameWithType: Laga.GeneticAlgorithm
        qualifiedName: Laga.GeneticAlgorithm
    isDefinition: true
    commentId: N:Laga.GeneticAlgorithm
  Laga.GeneticAlgorithm.Population{Point3d}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Point3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{Point3d}
  LagaRhino.PointData.GroupPointsByZ*:
    name:
      CSharp:
      - id: LagaRhino.PointData.GroupPointsByZ*
        name: GroupPointsByZ
        nameWithType: PointData.GroupPointsByZ
        qualifiedName: LagaRhino.PointData.GroupPointsByZ
      VB:
      - id: LagaRhino.PointData.GroupPointsByZ*
        name: GroupPointsByZ
        nameWithType: PointData.GroupPointsByZ
        qualifiedName: LagaRhino.PointData.GroupPointsByZ
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.GroupPointsByZ
  LagaRhino.PointData.Interpolate2Points*:
    name:
      CSharp:
      - id: LagaRhino.PointData.Interpolate2Points*
        name: Interpolate2Points
        nameWithType: PointData.Interpolate2Points
        qualifiedName: LagaRhino.PointData.Interpolate2Points
      VB:
      - id: LagaRhino.PointData.Interpolate2Points*
        name: Interpolate2Points
        nameWithType: PointData.Interpolate2Points
        qualifiedName: LagaRhino.PointData.Interpolate2Points
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.Interpolate2Points
  Laga.Geometry:
    name:
      CSharp:
      - name: Laga.Geometry
        nameWithType: Laga.Geometry
        qualifiedName: Laga.Geometry
      VB:
      - name: Laga.Geometry
        nameWithType: Laga.Geometry
        qualifiedName: Laga.Geometry
    isDefinition: true
    commentId: N:Laga.Geometry
  Laga.Geometry.Vector:
    name:
      CSharp:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
      VB:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
    isDefinition: true
    parent: Laga.Geometry
    commentId: T:Laga.Geometry.Vector
  LagaRhino.PointData.Vector2Point*:
    name:
      CSharp:
      - id: LagaRhino.PointData.Vector2Point*
        name: Vector2Point
        nameWithType: PointData.Vector2Point
        qualifiedName: LagaRhino.PointData.Vector2Point
      VB:
      - id: LagaRhino.PointData.Vector2Point*
        name: Vector2Point
        nameWithType: PointData.Vector2Point
        qualifiedName: LagaRhino.PointData.Vector2Point
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.Vector2Point
  System.Collections.Generic.IEnumerable{Laga.Geometry.Vector}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Laga.Geometry.Vector}
  LagaRhino.PointData.Vectors2Points*:
    name:
      CSharp:
      - id: LagaRhino.PointData.Vectors2Points*
        name: Vectors2Points
        nameWithType: PointData.Vectors2Points
        qualifiedName: LagaRhino.PointData.Vectors2Points
      VB:
      - id: LagaRhino.PointData.Vectors2Points*
        name: Vectors2Points
        nameWithType: PointData.Vectors2Points
        qualifiedName: LagaRhino.PointData.Vectors2Points
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.Vectors2Points
  LagaRhino.PointData.Point2Vector*:
    name:
      CSharp:
      - id: LagaRhino.PointData.Point2Vector*
        name: Point2Vector
        nameWithType: PointData.Point2Vector
        qualifiedName: LagaRhino.PointData.Point2Vector
      VB:
      - id: LagaRhino.PointData.Point2Vector*
        name: Point2Vector
        nameWithType: PointData.Point2Vector
        qualifiedName: LagaRhino.PointData.Point2Vector
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.Point2Vector
  System.Collections.Generic.List{Laga.Geometry.Vector}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Laga.Geometry.Vector}
  LagaRhino.PointData.Points2Vectors*:
    name:
      CSharp:
      - id: LagaRhino.PointData.Points2Vectors*
        name: Points2Vectors
        nameWithType: PointData.Points2Vectors
        qualifiedName: LagaRhino.PointData.Points2Vectors
      VB:
      - id: LagaRhino.PointData.Points2Vectors*
        name: Points2Vectors
        nameWithType: PointData.Points2Vectors
        qualifiedName: LagaRhino.PointData.Points2Vectors
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.Points2Vectors
  LagaRhino.PointData.FindZDifference*:
    name:
      CSharp:
      - id: LagaRhino.PointData.FindZDifference*
        name: FindZDifference
        nameWithType: PointData.FindZDifference
        qualifiedName: LagaRhino.PointData.FindZDifference
      VB:
      - id: LagaRhino.PointData.FindZDifference*
        name: FindZDifference
        nameWithType: PointData.FindZDifference
        qualifiedName: LagaRhino.PointData.FindZDifference
    isDefinition: true
    commentId: Overload:LagaRhino.PointData.FindZDifference
  LagaRhino.PointData:
    name:
      CSharp:
      - id: LagaRhino.PointData
        name: PointData
        nameWithType: PointData
        qualifiedName: LagaRhino.PointData
      VB:
      - id: LagaRhino.PointData
        name: PointData
        nameWithType: PointData
        qualifiedName: LagaRhino.PointData
    isDefinition: true
    commentId: T:LagaRhino.PointData
  Brep:
    name:
      CSharp:
      - id: Brep
        name: Brep
        nameWithType: Brep
        qualifiedName: Brep
        isExternal: true
      VB:
      - id: Brep
        name: Brep
        nameWithType: Brep
        qualifiedName: Brep
        isExternal: true
    isDefinition: true
    commentId: '!:Brep'
  LagaRhino.Shoebox.ShoeBox*:
    name:
      CSharp:
      - id: LagaRhino.Shoebox.ShoeBox*
        name: ShoeBox
        nameWithType: Shoebox.ShoeBox
        qualifiedName: LagaRhino.Shoebox.ShoeBox
      VB:
      - id: LagaRhino.Shoebox.ShoeBox*
        name: ShoeBox
        nameWithType: Shoebox.ShoeBox
        qualifiedName: LagaRhino.Shoebox.ShoeBox
    isDefinition: true
    commentId: Overload:LagaRhino.Shoebox.ShoeBox
  LagaRhino.Shoebox.Volume*:
    name:
      CSharp:
      - id: LagaRhino.Shoebox.Volume*
        name: Volume
        nameWithType: Shoebox.Volume
        qualifiedName: LagaRhino.Shoebox.Volume
      VB:
      - id: LagaRhino.Shoebox.Volume*
        name: Volume
        nameWithType: Shoebox.Volume
        qualifiedName: LagaRhino.Shoebox.Volume
    isDefinition: true
    commentId: Overload:LagaRhino.Shoebox.Volume
  LagaRhino.Shoebox.Area*:
    name:
      CSharp:
      - id: LagaRhino.Shoebox.Area*
        name: Area
        nameWithType: Shoebox.Area
        qualifiedName: LagaRhino.Shoebox.Area
      VB:
      - id: LagaRhino.Shoebox.Area*
        name: Area
        nameWithType: Shoebox.Area
        qualifiedName: LagaRhino.Shoebox.Area
    isDefinition: true
    commentId: Overload:LagaRhino.Shoebox.Area
  LagaRhino.Shoebox.#ctor*:
    name:
      CSharp:
      - id: LagaRhino.Shoebox.#ctor*
        name: Shoebox
        nameWithType: Shoebox.Shoebox
        qualifiedName: LagaRhino.Shoebox.Shoebox
      VB:
      - id: LagaRhino.Shoebox.#ctor*
        name: Shoebox
        nameWithType: Shoebox.Shoebox
        qualifiedName: LagaRhino.Shoebox.Shoebox
    isDefinition: true
    commentId: Overload:LagaRhino.Shoebox.#ctor
  LagaRhino.Shoebox.Rot*:
    name:
      CSharp:
      - id: LagaRhino.Shoebox.Rot*
        name: Rot
        nameWithType: Shoebox.Rot
        qualifiedName: LagaRhino.Shoebox.Rot
      VB:
      - id: LagaRhino.Shoebox.Rot*
        name: Rot
        nameWithType: Shoebox.Rot
        qualifiedName: LagaRhino.Shoebox.Rot
    isDefinition: true
    commentId: Overload:LagaRhino.Shoebox.Rot
  LagaRhino.Shoebox:
    name:
      CSharp:
      - id: LagaRhino.Shoebox
        name: Shoebox
        nameWithType: Shoebox
        qualifiedName: LagaRhino.Shoebox
      VB:
      - id: LagaRhino.Shoebox
        name: Shoebox
        nameWithType: Shoebox
        qualifiedName: LagaRhino.Shoebox
    isDefinition: true
    commentId: T:LagaRhino.Shoebox
  LagaRhino.SurfaceAnalysis.PointsOnSurface*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.PointsOnSurface*
        name: PointsOnSurface
        nameWithType: SurfaceAnalysis.PointsOnSurface
        qualifiedName: LagaRhino.SurfaceAnalysis.PointsOnSurface
      VB:
      - id: LagaRhino.SurfaceAnalysis.PointsOnSurface*
        name: PointsOnSurface
        nameWithType: SurfaceAnalysis.PointsOnSurface
        qualifiedName: LagaRhino.SurfaceAnalysis.PointsOnSurface
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.PointsOnSurface
  LagaRhino.SurfaceAnalysis.#ctor*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.#ctor*
        name: SurfaceAnalysis
        nameWithType: SurfaceAnalysis.SurfaceAnalysis
        qualifiedName: LagaRhino.SurfaceAnalysis.SurfaceAnalysis
      VB:
      - id: LagaRhino.SurfaceAnalysis.#ctor*
        name: SurfaceAnalysis
        nameWithType: SurfaceAnalysis.SurfaceAnalysis
        qualifiedName: LagaRhino.SurfaceAnalysis.SurfaceAnalysis
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.#ctor
  System.Collections.Generic.List{Plane}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Plane
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Plane
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Plane}
  LagaRhino.SurfaceAnalysis.SubdividebyPlanes*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.SubdividebyPlanes*
        name: SubdividebyPlanes
        nameWithType: SurfaceAnalysis.SubdividebyPlanes
        qualifiedName: LagaRhino.SurfaceAnalysis.SubdividebyPlanes
      VB:
      - id: LagaRhino.SurfaceAnalysis.SubdividebyPlanes*
        name: SubdividebyPlanes
        nameWithType: SurfaceAnalysis.SubdividebyPlanes
        qualifiedName: LagaRhino.SurfaceAnalysis.SubdividebyPlanes
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.SubdividebyPlanes
  LagaRhino.SurfaceAnalysis.CustomPattern*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.CustomPattern*
        name: CustomPattern
        nameWithType: SurfaceAnalysis.CustomPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.CustomPattern
      VB:
      - id: LagaRhino.SurfaceAnalysis.CustomPattern*
        name: CustomPattern
        nameWithType: SurfaceAnalysis.CustomPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.CustomPattern
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.CustomPattern
  LagaRhino.SurfaceAnalysis.TriangularPattern*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.TriangularPattern*
        name: TriangularPattern
        nameWithType: SurfaceAnalysis.TriangularPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.TriangularPattern
      VB:
      - id: LagaRhino.SurfaceAnalysis.TriangularPattern*
        name: TriangularPattern
        nameWithType: SurfaceAnalysis.TriangularPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.TriangularPattern
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.TriangularPattern
  Laga.GeneticAlgorithm.Population{Polyline}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Polyline
        name: Polyline
        nameWithType: Polyline
        qualifiedName: Polyline
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Polyline
        name: Polyline
        nameWithType: Polyline
        qualifiedName: Polyline
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{Polyline}
  LagaRhino.SurfaceAnalysis.QuadPattern*:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis.QuadPattern*
        name: QuadPattern
        nameWithType: SurfaceAnalysis.QuadPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.QuadPattern
      VB:
      - id: LagaRhino.SurfaceAnalysis.QuadPattern*
        name: QuadPattern
        nameWithType: SurfaceAnalysis.QuadPattern
        qualifiedName: LagaRhino.SurfaceAnalysis.QuadPattern
    isDefinition: true
    commentId: Overload:LagaRhino.SurfaceAnalysis.QuadPattern
  LagaRhino.SurfaceAnalysis:
    name:
      CSharp:
      - id: LagaRhino.SurfaceAnalysis
        name: SurfaceAnalysis
        nameWithType: SurfaceAnalysis
        qualifiedName: LagaRhino.SurfaceAnalysis
      VB:
      - id: LagaRhino.SurfaceAnalysis
        name: SurfaceAnalysis
        nameWithType: SurfaceAnalysis
        qualifiedName: LagaRhino.SurfaceAnalysis
    isDefinition: true
    commentId: T:LagaRhino.SurfaceAnalysis
  LagaRhino:
    name:
      CSharp:
      - name: LagaRhino
        nameWithType: LagaRhino
        qualifiedName: LagaRhino
      VB:
      - name: LagaRhino
        nameWithType: LagaRhino
        qualifiedName: LagaRhino
    isDefinition: true
    commentId: N:LagaRhino
