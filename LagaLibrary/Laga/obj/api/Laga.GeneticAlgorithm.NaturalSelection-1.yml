### YamlMime:ManagedReference
items:
- uid: Laga.GeneticAlgorithm.NaturalSelection`1
  commentId: T:Laga.GeneticAlgorithm.NaturalSelection`1
  id: NaturalSelection`1
  parent: Laga.GeneticAlgorithm
  children:
  - Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
  - Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
  - Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
  langs:
  - csharp
  - vb
  name: NaturalSelection<T>
  nameWithType: NaturalSelection<T>
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>
  type: Class
  source:
    id: NaturalSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 10
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nNatural selection class\n"
  example: []
  syntax:
    content: public class NaturalSelection<T>
    typeParameters:
    - id: T
    content.vb: Public Class NaturalSelection(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: NaturalSelection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T)
  name.vb: NaturalSelection(Of T)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
  id: '#ctor'
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: NaturalSelection()
  nameWithType: NaturalSelection<T>.NaturalSelection()
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.NaturalSelection()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 15
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe class to select and operates on populations\n"
  example: []
  syntax:
    content: public NaturalSelection()
    content.vb: Public Sub New
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*
  nameWithType.vb: NaturalSelection(Of T).NaturalSelection()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).NaturalSelection()
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  id: RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Population<T>, Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Population<T>, Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(Laga.GeneticAlgorithm.Population<T>, System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 26
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nPerforms a roulette wheel selection over a population\n"
  example: []
  syntax:
    content: public static Population<T> RouletteWheel(Population<T> population, int maxItem)
    parameters:
    - id: population
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: The popolution to perform the roulette wheel selection
    - id: maxItem
      type: System.Int32
      description: the maximum number of chromosomes in the roulette
    return:
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: Population
    content.vb: Public Shared Function RouletteWheel(population As Population(Of T), maxItem As Integer) As Population(Of T)
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Population(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
  name.vb: RouletteWheel(Population(Of T), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  id: RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelNonPolinomicMin2(Population<T>, Int32)
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin2(Population<T>, Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population<T>, System.Int32)
  type: Method
  source:
    id: RouletteWheelNonPolinomicMin2
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 55
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nRoulette Wheel\n"
  example: []
  syntax:
    content: public static Population<T> RouletteWheelNonPolinomicMin2(Population<T> population, int maxItem)
    parameters:
    - id: population
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: Popultion
    - id: maxItem
      type: System.Int32
      description: Maximum size in the roulette
    return:
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: Population
    content.vb: Public Shared Function RouletteWheelNonPolinomicMin2(population As Population(Of T), maxItem As Integer) As Population(Of T)
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin2(Population(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
  name.vb: RouletteWheelNonPolinomicMin2(Population(Of T), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
  id: RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelNonPolinomicMin(Population<T>, Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Population<T>, Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population<T>, System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheelNonPolinomicMin
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 91
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)\n"
  example: []
  syntax:
    content: public static Population<T> RouletteWheelNonPolinomicMin(Population<T> population, float[] arrFitness, int maxItem)
    parameters:
    - id: population
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: The Population
    - id: arrFitness
      type: System.Single[]
      description: the Fitness list
    - id: maxItem
      type: System.Int32
      description: The maximum number of chromosomes selected in the roulette wheel
    return:
      type: Laga.GeneticAlgorithm.Population{{T}}
      description: IPopulation
    content.vb: Public Shared Function RouletteWheelNonPolinomicMin(population As Population(Of T), arrFitness As Single(), maxItem As Integer) As Population(Of T)
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Population(Of T), Single(), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population(Of T), System.Single(), System.Int32)
  name.vb: RouletteWheelNonPolinomicMin(Population(Of T), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)
  id: Elitism(System.Object[][],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: Elitism(Object[][], Int32)
  nameWithType: NaturalSelection<T>.Elitism(Object[][], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Object[][], System.Int32)
  type: Method
  source:
    id: Elitism
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 125
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nselect the number of the best individual in the population.\n"
  example: []
  syntax:
    content: public object[][] Elitism(object[][] srtPopulation, int count)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: count
      type: System.Int32
      description: The number of individuals to select
    return:
      type: System.Object[][]
      description: objec[][]
    content.vb: Public Function Elitism(srtPopulation As Object()(), count As Integer) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  nameWithType.vb: NaturalSelection(Of T).Elitism(Object()(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Object()(), System.Int32)
  name.vb: Elitism(Object()(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)
  id: Elitism(System.Double[][],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: Elitism(Double[][], Int32)
  nameWithType: NaturalSelection<T>.Elitism(Double[][], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Double[][], System.Int32)
  type: Method
  source:
    id: Elitism
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 148
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nselect the number of the best individual in the population.\n"
  example: []
  syntax:
    content: public double[][] Elitism(double[][] srtPopulation, int count)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: count
      type: System.Int32
      description: the number of individuals to select
    return:
      type: System.Double[][]
      description: double[][]
    content.vb: Public Function Elitism(srtPopulation As Double()(), count As Integer) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  nameWithType.vb: NaturalSelection(Of T).Elitism(Double()(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Double()(), System.Int32)
  name.vb: Elitism(Double()(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)
  id: Elitism(System.Single[][],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: Elitism(Single[][], Int32)
  nameWithType: NaturalSelection<T>.Elitism(Single[][], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Single[][], System.Int32)
  type: Method
  source:
    id: Elitism
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 167
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nselect the number of the best individual in the population.\n"
  example: []
  syntax:
    content: public float[][] Elitism(float[][] srtPopulation, int count)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: count
      type: System.Int32
      description: The number of individuals to select
    return:
      type: System.Single[][]
      description: float[][]
    content.vb: Public Function Elitism(srtPopulation As Single()(), count As Integer) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  nameWithType.vb: NaturalSelection(Of T).Elitism(Single()(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Single()(), System.Int32)
  name.vb: Elitism(Single()(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)
  id: Elitism(System.Int32[][],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: Elitism(Int32[][], Int32)
  nameWithType: NaturalSelection<T>.Elitism(Int32[][], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Int32[][], System.Int32)
  type: Method
  source:
    id: Elitism
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 188
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nselect the number of the best individual in the population.\n"
  example: []
  syntax:
    content: public int[][] Elitism(int[][] srtPopulation, int count)
    parameters:
    - id: srtPopulation
      type: System.Int32[][]
      description: The sorted population
    - id: count
      type: System.Int32
      description: The number of individuals to select
    return:
      type: System.Int32[][]
      description: int[][]
    content.vb: Public Function Elitism(srtPopulation As Integer()(), count As Integer) As Integer()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  nameWithType.vb: NaturalSelection(Of T).Elitism(Int32()(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Int32()(), System.Int32)
  name.vb: Elitism(Int32()(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)
  id: Elitism(System.Char[][],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: Elitism(Char[][], Int32)
  nameWithType: NaturalSelection<T>.Elitism(Char[][], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Char[][], System.Int32)
  type: Method
  source:
    id: Elitism
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 227
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nselect the number of the best individual in the population.\n"
  example:
  - "\n<pre><code>GenrPopulation pop = new GenrPopulation(20);\nchar[][] charPop = pop.CharPopulation(5, 97, 122);\nfloat[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);\nRankingSort rs = new RankingSort();\nrs.BidirectionalBubbleSort(charPop, rndFitness, false);\n\nNaturalSelection ns = new NaturalSelection();\nchar[][] nsPop = ns.Elitism(charPop, 5);</code></pre>\n"
  syntax:
    content: public char[][] Elitism(char[][] srtPopulation, int count)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function Elitism(srtPopulation As Char()(), count As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  nameWithType.vb: NaturalSelection(Of T).Elitism(Char()(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Char()(), System.Int32)
  name.vb: Elitism(Char()(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
  id: RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelNonPolinomicMin(Object[][], Int32[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Object[][], Int32[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Object[][], System.Int32[], System.Int32)
  type: Method
  source:
    id: RouletteWheelNonPolinomicMin
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 252
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)\n"
  example: []
  syntax:
    content: public object[][] RouletteWheelNonPolinomicMin(object[][] srtPopulation, int[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Object()(), results As Integer(), maxItem As Integer) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Object()(), Int32(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Object()(), System.Int32(), System.Int32)
  name.vb: RouletteWheelNonPolinomicMin(Object()(), Int32(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
  id: RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelNonPolinomicMin(Double[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Double[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Double[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheelNonPolinomicMin
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 296
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)\n"
  example: []
  syntax:
    content: public double[][] RouletteWheelNonPolinomicMin(double[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Double[][]
      description: double[][]
    content.vb: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Double()(), results As Single(), maxItem As Integer) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Double()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Double()(), System.Single(), System.Int32)
  name.vb: RouletteWheelNonPolinomicMin(Double()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
  id: RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelNonPolinomicMin(Char[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Char[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Char[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheelNonPolinomicMin
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 350
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)\n"
  example:
  - "\n<pre><code>GenrPopulation pop = new GenrPopulation(20);\nchar[][] charPop = pop.CharPopulation(5, 97, 122);\nfloat[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);\nRankingSort rs = new RankingSort();\nrs.BidirectionalBubbleSort(charPop, rndFitness, false);\n\nNaturalSelection ns = new NaturalSelection();\nchar[][] nsPop = ns.RouletteWheelNonPolinomicMin(charPop, rndFitness, 10);</code></pre>\n"
  syntax:
    content: public char[][] RouletteWheelNonPolinomicMin(char[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Char()(), results As Single(), maxItem As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Char()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Char()(), System.Single(), System.Int32)
  name.vb: RouletteWheelNonPolinomicMin(Char()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)
  id: RouletteWheel(System.Object[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Object[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Object[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Object[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 394
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public object[][] RouletteWheel(object[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Object()(), results As Single(), maxItem As Integer) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Object()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Object()(), System.Single(), System.Int32)
  name.vb: RouletteWheel(Object()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)
  id: RouletteWheel(System.Double[][],System.Int32[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Double[][], Int32[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Double[][], Int32[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Double[][], System.Int32[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 436
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public double[][] RouletteWheel(double[][] srtPopulation, int[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Double[][]
      description: double[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Double()(), results As Integer(), maxItem As Integer) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Double()(), Int32(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Double()(), System.Int32(), System.Int32)
  name.vb: RouletteWheel(Double()(), Int32(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)
  id: RouletteWheel(System.Single[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Single[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Single[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Single[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 478
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public float[][] RouletteWheel(float[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Single[][]
      description: float[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Single()(), results As Single(), maxItem As Integer) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Single()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Single()(), System.Single(), System.Int32)
  name.vb: RouletteWheel(Single()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)
  id: RouletteWheel(System.Single[][],System.Int32[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Single[][], Int32[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Single[][], Int32[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Single[][], System.Int32[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 520
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public float[][] RouletteWheel(float[][] srtPopulation, int[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Single[][]
      description: float[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Single()(), results As Integer(), maxItem As Integer) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Single()(), Int32(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Single()(), System.Int32(), System.Int32)
  name.vb: RouletteWheel(Single()(), Int32(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)
  id: RouletteWheel(System.Int32[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Int32[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Int32[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Int32[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 562
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public int[][] RouletteWheel(int[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Int32[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Int32[][]
      description: int[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Integer()(), results As Single(), maxItem As Integer) As Integer()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Int32()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Int32()(), System.Single(), System.Int32)
  name.vb: RouletteWheel(Int32()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)
  id: RouletteWheel(System.Char[][],System.Single[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Char[][], Single[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Char[][], Single[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Char[][], System.Single[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 604
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example: []
  syntax:
    content: public char[][] RouletteWheel(char[][] srtPopulation, float[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Char()(), results As Single(), maxItem As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Char()(), Single(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Char()(), System.Single(), System.Int32)
  name.vb: RouletteWheel(Char()(), Single(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)
  id: RouletteWheel(System.Char[][],System.Int32[],System.Int32)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheel(Char[][], Int32[], Int32)
  nameWithType: NaturalSelection<T>.RouletteWheel(Char[][], Int32[], Int32)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Char[][], System.Int32[], System.Int32)
  type: Method
  source:
    id: RouletteWheel
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 658
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nThe individual fitness is proportional to the possibilities of being selected.\n"
  example:
  - "\n<pre><code>GenrPopulation pop = new GenrPopulation(20);\nchar[][] charPop = pop.CharPopulation(5, 97, 122);\nfloat[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);\nRankingSort rs = new RankingSort();\nrs.BidirectionalBubbleSort(charPop, rndFitness, false);\n\nNaturalSelection ns = new NaturalSelection();\nchar[][] nsPop = ns.RouletteWheel(charPop, rndFitness, 5);</code></pre>\n"
  syntax:
    content: public char[][] RouletteWheel(char[][] srtPopulation, int[] results, int maxItem)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: maxItem
      type: System.Int32
      description: Maximum number of selected individuals
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function RouletteWheel(srtPopulation As Char()(), results As Integer(), maxItem As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel(Char()(), Int32(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Char()(), System.Int32(), System.Int32)
  name.vb: RouletteWheel(Char()(), Int32(), Int32)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  id: RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelSigmoidal(Object[][], Int32, Int32, Int32, Int32, Int32, Single)
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal(Object[][], Int32, Int32, Int32, Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Object[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: RouletteWheelSigmoidal
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 709
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA roulette wheel selection distributed on a sigmoid curve \n"
  example: []
  syntax:
    content: public object[][] RouletteWheelSigmoidal(object[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: sizeRoulette
      type: System.Int32
      description: Number of individuals selected
    - id: A1
      type: System.Int32
      description: The maximum number of selected individuals in the roulette wheel
    - id: A2
      type: System.Int32
      description: The minimum number of selected individuals in the roulette wheel
    - id: B1
      type: System.Int32
      description: The start index in the population. 1 is the second individual
    - id: B2
      type: System.Int32
      description: The last index in the population. 5 is the sixth individual
    - id: s
      type: System.Single
      description: the factor decay, values between 0.00 and 1.00
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function RouletteWheelSigmoidal(srtPopulation As Object()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal(Object()(), Int32, Int32, Int32, Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Object()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  name.vb: RouletteWheelSigmoidal(Object()(), Int32, Int32, Int32, Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  id: RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelSigmoidal(Double[][], Int32, Int32, Int32, Int32, Int32, Single)
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal(Double[][], Int32, Int32, Int32, Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Double[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: RouletteWheelSigmoidal
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 749
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA roulette wheel selection distributed on a sigmoid curve \n"
  example: []
  syntax:
    content: public double[][] RouletteWheelSigmoidal(double[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: sizeRoulette
      type: System.Int32
      description: Number of individuals selected
    - id: A1
      type: System.Int32
      description: The maximum number of selected individuals in the roulette wheel
    - id: A2
      type: System.Int32
      description: The minimum number of selected individuals in the roulette wheel
    - id: B1
      type: System.Int32
      description: The start index in the population. 1 is the second individual
    - id: B2
      type: System.Int32
      description: The last index in the population. 5 is the sixth individual
    - id: s
      type: System.Single
      description: the factor decay, values between 0.00 and 1.00
    return:
      type: System.Double[][]
      description: double[][]
    content.vb: Public Function RouletteWheelSigmoidal(srtPopulation As Double()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal(Double()(), Int32, Int32, Int32, Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Double()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  name.vb: RouletteWheelSigmoidal(Double()(), Int32, Int32, Int32, Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  id: RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelSigmoidal(Single[][], Int32, Int32, Int32, Int32, Int32, Single)
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal(Single[][], Int32, Int32, Int32, Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Single[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: RouletteWheelSigmoidal
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 789
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA roulette wheel selection distributed on a sigmoid curve \n"
  example: []
  syntax:
    content: public float[][] RouletteWheelSigmoidal(float[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: sizeRoulette
      type: System.Int32
      description: Number of individuals selected
    - id: A1
      type: System.Int32
      description: The maximum number of selected individuals in the roulette wheel
    - id: A2
      type: System.Int32
      description: The minimum number of selected individuals in the roulette wheel
    - id: B1
      type: System.Int32
      description: The start index in the population. 1 is the second individual
    - id: B2
      type: System.Int32
      description: The last index in the population. 5 is the sixth individual
    - id: s
      type: System.Single
      description: the factor decay, values between 0.00 and 1.00
    return:
      type: System.Single[][]
      description: float[][]
    content.vb: Public Function RouletteWheelSigmoidal(srtPopulation As Single()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal(Single()(), Int32, Int32, Int32, Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Single()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  name.vb: RouletteWheelSigmoidal(Single()(), Int32, Int32, Int32, Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  id: RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelSigmoidal(Char[][], Int32, Int32, Int32, Int32, Int32, Single)
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal(Char[][], Int32, Int32, Int32, Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Char[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: RouletteWheelSigmoidal
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 829
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA roulette wheel selection distributed on a sigmoid curve \n"
  example: []
  syntax:
    content: public char[][] RouletteWheelSigmoidal(char[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: sizeRoulette
      type: System.Int32
      description: Number of individuals selected
    - id: A1
      type: System.Int32
      description: The maximum number of selected individuals in the roulette wheel
    - id: A2
      type: System.Int32
      description: The minimum number of selected individuals in the roulette wheel
    - id: B1
      type: System.Int32
      description: The start index in the population. 1 is the second individual
    - id: B2
      type: System.Int32
      description: The last index in the population. 5 is the sixth individual
    - id: s
      type: System.Single
      description: the factor decay, values between 0.00 and 1.00
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function RouletteWheelSigmoidal(srtPopulation As Char()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal(Char()(), Int32, Int32, Int32, Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Char()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  name.vb: RouletteWheelSigmoidal(Char()(), Int32, Int32, Int32, Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  id: RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: RouletteWheelSigmoidal(Int32[][], Int32, Int32, Int32, Int32, Int32, Single)
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal(Int32[][], Int32, Int32, Int32, Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Int32[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: RouletteWheelSigmoidal
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 869
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA roulette wheel selection distributed on a sigmoid curve \n"
  example: []
  syntax:
    content: public int[][] RouletteWheelSigmoidal(int[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
    parameters:
    - id: srtPopulation
      type: System.Int32[][]
      description: The sorted population
    - id: sizeRoulette
      type: System.Int32
      description: Number of individuals selected
    - id: A1
      type: System.Int32
      description: The maximum number of selected individuals in the roulette wheel
    - id: A2
      type: System.Int32
      description: The minimum number of selected individuals in the roulette wheel
    - id: B1
      type: System.Int32
      description: The start index in the population. 1 is the second individual
    - id: B2
      type: System.Int32
      description: The last index in the population. 5 is the sixth individual
    - id: s
      type: System.Single
      description: the factor decay, values between 0.00 and 1.00
    return:
      type: System.Int32[][]
      description: int[][]
    content.vb: Public Function RouletteWheelSigmoidal(srtPopulation As Integer()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Integer()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal(Int32()(), Int32, Int32, Int32, Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Int32()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
  name.vb: RouletteWheelSigmoidal(Int32()(), Int32, Int32, Int32, Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Object[][], Int32[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Object[][], Int32[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Object[][], System.Int32[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 911
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public object[][] TournamentSelection(object[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Object()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Object()(), Int32(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Object()(), System.Int32(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Object()(), Int32(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Object[][], Single[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Object[][], Single[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Object[][], System.Single[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 945
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public object[][] TournamentSelection(object[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Object[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Object[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Object()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Object()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Object()(), Single(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Object()(), System.Single(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Object()(), Single(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Double[][], Single[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Double[][], Single[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Double[][], System.Single[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 980
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public double[][] TournamentSelection(double[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Double[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Double()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Double()(), Single(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Double()(), System.Single(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Double()(), Single(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Double[][], Int32[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Double[][], Int32[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Double[][], System.Int32[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1014
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public double[][] TournamentSelection(double[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Double[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Double[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Double()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Double()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Double()(), Int32(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Double()(), System.Int32(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Double()(), Int32(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Single[][], Single[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Single[][], Single[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Single[][], System.Single[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1048
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public float[][] TournamentSelection(float[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Single[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Single()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Single()(), Single(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Single()(), System.Single(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Single()(), Single(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Single[][], Int32[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Single[][], Int32[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Single[][], System.Int32[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1082
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public float[][] TournamentSelection(float[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Single[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Single[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Single()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Single()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Single()(), Int32(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Single()(), System.Int32(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Single()(), Int32(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Int32[][], Single[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Int32[][], Single[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Int32[][], System.Single[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1116
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public int[][] TournamentSelection(int[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Int32[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Int32[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Integer()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Integer()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Int32()(), Single(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Int32()(), System.Single(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Int32()(), Single(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Int32[][], Int32[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Int32[][], Int32[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Int32[][], System.Int32[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1150
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public int[][] TournamentSelection(int[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Int32[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Int32[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Integer()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Integer()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Int32()(), Int32(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Int32()(), System.Int32(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Int32()(), Int32(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Char[][], Single[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Char[][], Single[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Char[][], System.Single[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1184
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public char[][] TournamentSelection(char[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: results
      type: System.Single[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Char[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Char()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Char()(), Single(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Char()(), System.Single(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Char()(), Single(), Int32, Int32, String)
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
  commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
  id: TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
  parent: Laga.GeneticAlgorithm.NaturalSelection`1
  langs:
  - csharp
  - vb
  name: TournamentSelection(Char[][], Int32[], Int32, Int32, String)
  nameWithType: NaturalSelection<T>.TournamentSelection(Char[][], Int32[], Int32, Int32, String)
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Char[][], System.Int32[], System.Int32, System.Int32, System.String)
  type: Method
  source:
    id: TournamentSelection
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\NaturalSelection.cs
    startLine: 1218
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nAs medieval tournament, the individuals have to compete in a tournament, \nthe tournament winner is selected.\n"
  example: []
  syntax:
    content: public char[][] TournamentSelection(char[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
    parameters:
    - id: srtPopulation
      type: System.Char[][]
      description: The sorted population
    - id: results
      type: System.Int32[]
      description: The result array from the evaluation
    - id: numbTour
      type: System.Int32
      description: Number of tournaments
    - id: preasure
      type: System.Int32
      description: Number of individuals in the tournament
    - id: type
      type: System.String
      description: if is &quot;min&quot; the smallest fitness is selected, otherwise the highest
    return:
      type: System.Char[][]
      description: object[][]
    content.vb: Public Function TournamentSelection(srtPopulation As Char()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Char()()
  overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection(Char()(), Int32(), Int32, Int32, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Char()(), System.Int32(), System.Int32, System.Int32, System.String)
  name.vb: TournamentSelection(Char()(), Int32(), Int32, Int32, String)
references:
- uid: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  name: Laga.GeneticAlgorithm
  nameWithType: Laga.GeneticAlgorithm
  fullName: Laga.GeneticAlgorithm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
  name: NaturalSelection
  nameWithType: NaturalSelection<T>.NaturalSelection
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.NaturalSelection
  nameWithType.vb: NaturalSelection(Of T).NaturalSelection
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).NaturalSelection
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel
  name: RouletteWheel
  nameWithType: NaturalSelection<T>.RouletteWheel
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel
  nameWithType.vb: NaturalSelection(Of T).RouletteWheel
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel
- uid: Laga.GeneticAlgorithm.Population{{T}}
  commentId: T:Laga.GeneticAlgorithm.Population{`0}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.GeneticAlgorithm.Population`1
  commentId: T:Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2
  name: RouletteWheelNonPolinomicMin2
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin2
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin2
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin2
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin2
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin
  name: RouletteWheelNonPolinomicMin
  nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelNonPolinomicMin
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin
- uid: System.Single[]
  isExternal: true
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism
  name: Elitism
  nameWithType: NaturalSelection<T>.Elitism
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism
  nameWithType.vb: NaturalSelection(Of T).Elitism
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism
- uid: System.Object[][]
  isExternal: true
  name: Object[][]
  nameWithType: Object[][]
  fullName: System.Object[][]
  nameWithType.vb: Object()()
  fullName.vb: System.Object()()
  name.vb: Object()()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double[][]
  isExternal: true
  name: Double[][]
  nameWithType: Double[][]
  fullName: System.Double[][]
  nameWithType.vb: Double()()
  fullName.vb: System.Double()()
  name.vb: Double()()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single[][]
  isExternal: true
  name: Single[][]
  nameWithType: Single[][]
  fullName: System.Single[][]
  nameWithType.vb: Single()()
  fullName.vb: System.Single()()
  name.vb: Single()()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[][]
  isExternal: true
  name: Int32[][]
  nameWithType: Int32[][]
  fullName: System.Int32[][]
  nameWithType.vb: Int32()()
  fullName.vb: System.Int32()()
  name.vb: Int32()()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[][]
  isExternal: true
  name: Char[][]
  nameWithType: Char[][]
  fullName: System.Char[][]
  nameWithType.vb: Char()()
  fullName.vb: System.Char()()
  name.vb: Char()()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal
  name: RouletteWheelSigmoidal
  nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal
  nameWithType.vb: NaturalSelection(Of T).RouletteWheelSigmoidal
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
  commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection
  name: TournamentSelection
  nameWithType: NaturalSelection<T>.TournamentSelection
  fullName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection
  nameWithType.vb: NaturalSelection(Of T).TournamentSelection
  fullName.vb: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
