### YamlMime:ManagedReference
items:
- uid: Laga.Geometry.Vector
  commentId: T:Laga.Geometry.Vector
  id: Vector
  parent: Laga.Geometry
  children:
  - Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.#ctor(System.Double,System.Double)
  - Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)
  - Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
  - Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
  - Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)
  - Laga.Geometry.Vector.IsVectorCero(System.Double)
  - Laga.Geometry.Vector.Normalize
  - Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)
  - Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
  - Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
  - Laga.Geometry.Vector.ToString
  - Laga.Geometry.Vector.X
  - Laga.Geometry.Vector.Y
  - Laga.Geometry.Vector.Z
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: Vector
  fullName: Laga.Geometry.Vector
  type: Struct
  source:
    id: Vector
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 9
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nVector struct for operations\n"
  example: []
  syntax:
    content: public struct Vector
    content.vb: Public Structure Vector
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Laga.Geometry.Vector.X
  commentId: P:Laga.Geometry.Vector.X
  id: X
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector.X
  fullName: Laga.Geometry.Vector.X
  type: Property
  source:
    id: X
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 19
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nX coordinate\n"
  example: []
  syntax:
    content: public double X { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property X As Double
  overload: Laga.Geometry.Vector.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.Y
  commentId: P:Laga.Geometry.Vector.Y
  id: Y
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector.Y
  fullName: Laga.Geometry.Vector.Y
  type: Property
  source:
    id: Y
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 34
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nY Coordinate\n"
  example: []
  syntax:
    content: public double Y { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Y As Double
  overload: Laga.Geometry.Vector.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.Z
  commentId: P:Laga.Geometry.Vector.Z
  id: Z
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vector.Z
  fullName: Laga.Geometry.Vector.Z
  type: Property
  source:
    id: Z
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 49
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nZ Coordinate\n"
  example: []
  syntax:
    content: public double Z { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Z As Double
  overload: Laga.Geometry.Vector.Z*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.#ctor(System.Double,System.Double)
  commentId: M:Laga.Geometry.Vector.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Vector(Double, Double)
  nameWithType: Vector.Vector(Double, Double)
  fullName: Laga.Geometry.Vector.Vector(System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 66
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCreate a 2D vector in XY plane \n"
  example: []
  syntax:
    content: public Vector(double X, double Y)
    parameters:
    - id: X
      type: System.Double
      description: X coordinate
    - id: Y
      type: System.Double
      description: Y coordinate
    content.vb: Public Sub New(X As Double, Y As Double)
  overload: Laga.Geometry.Vector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)
  commentId: M:Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Vector(Double, Double, Double)
  nameWithType: Vector.Vector(Double, Double, Double)
  fullName: Laga.Geometry.Vector.Vector(System.Double, System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 79
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCreate a 3D Vector\n"
  example: []
  syntax:
    content: public Vector(double X, double Y, double Z)
    parameters:
    - id: X
      type: System.Double
      description: X coordinate
    - id: Y
      type: System.Double
      description: Y coordinate
    - id: Z
      type: System.Double
      description: Z coordinate
    content.vb: Public Sub New(X As Double, Y As Double, Z As Double)
  overload: Laga.Geometry.Vector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)
  id: '#ctor(Laga.Geometry.Vector)'
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Vector(Vector)
  nameWithType: Vector.Vector(Vector)
  fullName: Laga.Geometry.Vector.Vector(Laga.Geometry.Vector)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 89
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCreates the vector zero\n"
  example: []
  syntax:
    content: public Vector(Vector vector)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
    content.vb: Public Sub New(vector As Vector)
  overload: Laga.Geometry.Vector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
  id: OrthogonalTo(Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: OrthogonalTo(Vector)
  nameWithType: Vector.OrthogonalTo(Vector)
  fullName: Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
  type: Method
  source:
    id: OrthogonalTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 101
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCreates a orthogonal vector\n"
  example: []
  syntax:
    content: public static Vector OrthogonalTo(Vector vector)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: Vector
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Shared Function OrthogonalTo(vector As Vector) As Vector
  overload: Laga.Geometry.Vector.OrthogonalTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: CrossProduct(Vector, Vector)
  nameWithType: Vector.CrossProduct(Vector, Vector)
  fullName: Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: CrossProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 119
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCross Product\n"
  example: []
  syntax:
    content: public static Vector CrossProduct(Vector vectorA, Vector vectorB)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Shared Function CrossProduct(vectorA As Vector, vectorB As Vector) As Vector
  overload: Laga.Geometry.Vector.CrossProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: CrossProductLength(Vector, Vector, Vector)
  nameWithType: Vector.CrossProductLength(Vector, Vector, Vector)
  fullName: Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: CrossProductLength
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 136
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nReturn the cross product length\n| B x BC | = |AB| * |BC| * Sin(theta)\n"
  example: []
  syntax:
    content: public static double CrossProductLength(Vector vectorA, Vector vectorB, Vector vectorC)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    - id: vectorC
      type: Laga.Geometry.Vector
      description: Vector C
    return:
      type: System.Double
      description: Z coordinate of the cross product
    content.vb: Public Shared Function CrossProductLength(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
  overload: Laga.Geometry.Vector.CrossProductLength*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
  id: ComponentProjectTo(Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: ComponentProjectTo(Vector)
  nameWithType: Vector.ComponentProjectTo(Vector)
  fullName: Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
  type: Method
  source:
    id: ComponentProjectTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 151
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nProject to vector base B\n"
  example: []
  syntax:
    content: public Vector ComponentProjectTo(Vector vectorB)
    parameters:
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector base
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Function ComponentProjectTo(vectorB As Vector) As Vector
  overload: Laga.Geometry.Vector.ComponentProjectTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
  id: ComponentOrthogonalTo(Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: ComponentOrthogonalTo(Vector)
  nameWithType: Vector.ComponentOrthogonalTo(Vector)
  fullName: Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
  type: Method
  source:
    id: ComponentOrthogonalTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 164
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nCreates the orthogonal component to vector base B\n"
  example: []
  syntax:
    content: public Vector ComponentOrthogonalTo(Vector vectorB)
    parameters:
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector base
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Function ComponentOrthogonalTo(vectorB As Vector) As Vector
  overload: Laga.Geometry.Vector.ComponentOrthogonalTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.IsVectorCero(System.Double)
  commentId: M:Laga.Geometry.Vector.IsVectorCero(System.Double)
  id: IsVectorCero(System.Double)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: IsVectorCero(Double)
  nameWithType: Vector.IsVectorCero(Double)
  fullName: Laga.Geometry.Vector.IsVectorCero(System.Double)
  type: Method
  source:
    id: IsVectorCero
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 175
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nTest if is vector zero\n"
  example: []
  syntax:
    content: public bool IsVectorCero(double tolerance = 0.001)
    parameters:
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IsVectorCero(tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Vector.IsVectorCero*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
  commentId: M:Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
  id: IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: IsOrthogonalTo(Vector, Double)
  nameWithType: Vector.IsOrthogonalTo(Vector, Double)
  fullName: Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector, System.Double)
  type: Method
  source:
    id: IsOrthogonalTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 186
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nTest if vector is orthogonal\n"
  example: []
  syntax:
    content: public bool IsOrthogonalTo(Vector vector, double tolerance = 0.001)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: Vector to test
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IsOrthogonalTo(vector As Vector, tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Vector.IsOrthogonalTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)
  commentId: M:Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)
  id: IsParallelTo(Laga.Geometry.Vector,System.Double)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: IsParallelTo(Vector, Double)
  nameWithType: Vector.IsParallelTo(Vector, Double)
  fullName: Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector, System.Double)
  type: Method
  source:
    id: IsParallelTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 197
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nTest if 2 vectors are parallel\n"
  example: []
  syntax:
    content: public bool IsParallelTo(Vector vector, double tolerance = 0.001)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: The vector to test
    - id: tolerance
      type: System.Double
      description: 'Default tolerance: 1e-3'
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function IsParallelTo(vector As Vector, tolerance As Double = 0.001) As Boolean
  overload: Laga.Geometry.Vector.IsParallelTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: DotProduct(Vector, Vector)
  nameWithType: Vector.DotProduct(Vector, Vector)
  fullName: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: DotProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 212
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nDot product\n"
  example: []
  syntax:
    content: public static double DotProduct(Vector vectorA, Vector vectorB)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    return:
      type: System.Double
      description: double
    content.vb: Public Shared Function DotProduct(vectorA As Vector, vectorB As Vector) As Double
  overload: Laga.Geometry.Vector.DotProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: DotProduct(Vector, Vector, Vector)
  nameWithType: Vector.DotProduct(Vector, Vector, Vector)
  fullName: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: DotProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 224
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nDot Product AB · BC\n"
  example: []
  syntax:
    content: public static double DotProduct(Vector vectorA, Vector vectorB, Vector vectorC)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: ''
    - id: vectorB
      type: Laga.Geometry.Vector
      description: ''
    - id: vectorC
      type: Laga.Geometry.Vector
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function DotProduct(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
  overload: Laga.Geometry.Vector.DotProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Angle(Vector, Vector)
  nameWithType: Vector.Angle(Vector, Vector)
  fullName: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: Angle
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 240
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nAngle\n"
  example: []
  syntax:
    content: public static double Angle(Vector vectorA, Vector vectorB)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    return:
      type: System.Double
      description: double
    content.vb: Public Shared Function Angle(vectorA As Vector, vectorB As Vector) As Double
  overload: Laga.Geometry.Vector.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Angle(Vector, Vector, Vector)
  nameWithType: Vector.Angle(Vector, Vector, Vector)
  fullName: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Method
  source:
    id: Angle
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 258
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nABC angle between PI and -PI\n"
  example: []
  syntax:
    content: public static double Angle(Vector vectorA, Vector vectorB, Vector vectorC)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    - id: vectorC
      type: Laga.Geometry.Vector
      description: Vector C
    return:
      type: System.Double
      description: double
    content.vb: Public Shared Function Angle(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
  overload: Laga.Geometry.Vector.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
  id: DistanceTo(Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: DistanceTo(Vector)
  nameWithType: Vector.DistanceTo(Vector)
  fullName: Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
  type: Method
  source:
    id: DistanceTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 275
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nDistance\n"
  example: []
  syntax:
    content: public double DistanceTo(Vector vector)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: vector to test
    return:
      type: System.Double
      description: double
    content.vb: Public Function DistanceTo(vector As Vector) As Double
  overload: Laga.Geometry.Vector.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.Normalize
  commentId: M:Laga.Geometry.Vector.Normalize
  id: Normalize
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector.Normalize()
  fullName: Laga.Geometry.Vector.Normalize()
  type: Method
  source:
    id: Normalize
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 285
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nNormalize the vector to 1\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: Laga.Geometry.Vector.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Addition(Vector, Vector)
  nameWithType: Vector.Addition(Vector, Vector)
  fullName: Laga.Geometry.Vector.Addition(Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Operator
  source:
    id: op_Addition
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 297
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nAddition\n"
  example: []
  syntax:
    content: public static Vector operator +(Vector vectorA, Vector vectorB)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Shared Operator +(vectorA As Vector, vectorB As Vector) As Vector
  overload: Laga.Geometry.Vector.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
  id: op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Subtraction(Vector, Vector)
  nameWithType: Vector.Subtraction(Vector, Vector)
  fullName: Laga.Geometry.Vector.Subtraction(Laga.Geometry.Vector, Laga.Geometry.Vector)
  type: Operator
  source:
    id: op_Subtraction
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 311
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nSubstraction\n"
  example: []
  syntax:
    content: public static Vector operator -(Vector vectorA, Vector vectorB)
    parameters:
    - id: vectorA
      type: Laga.Geometry.Vector
      description: Vector A
    - id: vectorB
      type: Laga.Geometry.Vector
      description: Vector B
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Shared Operator -(vectorA As Vector, vectorB As Vector) As Vector
  overload: Laga.Geometry.Vector.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)
  commentId: M:Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)
  id: op_Multiply(Laga.Geometry.Vector,System.Double)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Multiply(Vector, Double)
  nameWithType: Vector.Multiply(Vector, Double)
  fullName: Laga.Geometry.Vector.Multiply(Laga.Geometry.Vector, System.Double)
  type: Operator
  source:
    id: op_Multiply
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 325
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nScale multuplication\n"
  example: []
  syntax:
    content: public static Vector operator *(Vector vector, double factor)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: Vector to scale
    - id: factor
      type: System.Double
      description: factor
    return:
      type: Laga.Geometry.Vector
      description: Vector
    content.vb: Public Shared Operator *(vector As Vector, factor As Double) As Vector
  overload: Laga.Geometry.Vector.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.ToString
  commentId: M:Laga.Geometry.Vector.ToString
  id: ToString
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector.ToString()
  fullName: Laga.Geometry.Vector.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 337
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\nPrint vector data\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: string
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Laga.Geometry.Vector.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
  commentId: M:Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
  id: Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: Interpolation(Vector, Vector, Double)
  nameWithType: Vector.Interpolation(Vector, Vector, Double)
  fullName: Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector, Laga.Geometry.Vector, System.Double)
  type: Method
  source:
    id: Interpolation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 350
  assemblies:
  - Laga
  namespace: Laga.Geometry
  syntax:
    content: public static List<Vector> Interpolation(Vector pointA, Vector pointB, double span)
    parameters:
    - id: pointA
      type: Laga.Geometry.Vector
    - id: pointB
      type: Laga.Geometry.Vector
    - id: span
      type: System.Double
    return:
      type: System.Collections.Generic.List{Laga.Geometry.Vector}
    content.vb: Public Shared Function Interpolation(pointA As Vector, pointB As Vector, span As Double) As List(Of Vector)
  overload: Laga.Geometry.Vector.Interpolation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
  commentId: M:Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
  id: EqualTo(Laga.Geometry.Vector)
  parent: Laga.Geometry.Vector
  langs:
  - csharp
  - vb
  name: EqualTo(Vector)
  nameWithType: Vector.EqualTo(Vector)
  fullName: Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
  type: Method
  source:
    id: EqualTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Vector.cs
    startLine: 385
  assemblies:
  - Laga
  namespace: Laga.Geometry
  summary: "\ntest if 2 vectors are equal\n"
  example: []
  syntax:
    content: public bool EqualTo(Vector vector)
    parameters:
    - id: vector
      type: Laga.Geometry.Vector
      description: Vector to test
    return:
      type: System.Boolean
      description: bool
    content.vb: Public Function EqualTo(vector As Vector) As Boolean
  overload: Laga.Geometry.Vector.EqualTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Laga.Geometry
  commentId: N:Laga.Geometry
  name: Laga.Geometry
  nameWithType: Laga.Geometry
  fullName: Laga.Geometry
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.Geometry.Vector.X*
  commentId: Overload:Laga.Geometry.Vector.X
  name: X
  nameWithType: Vector.X
  fullName: Laga.Geometry.Vector.X
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Laga.Geometry.Vector.Y*
  commentId: Overload:Laga.Geometry.Vector.Y
  name: Y
  nameWithType: Vector.Y
  fullName: Laga.Geometry.Vector.Y
- uid: Laga.Geometry.Vector.Z*
  commentId: Overload:Laga.Geometry.Vector.Z
  name: Z
  nameWithType: Vector.Z
  fullName: Laga.Geometry.Vector.Z
- uid: Laga.Geometry.Vector.#ctor*
  commentId: Overload:Laga.Geometry.Vector.#ctor
  name: Vector
  nameWithType: Vector.Vector
  fullName: Laga.Geometry.Vector.Vector
- uid: Laga.Geometry.Vector
  commentId: T:Laga.Geometry.Vector
  parent: Laga.Geometry
  name: Vector
  nameWithType: Vector
  fullName: Laga.Geometry.Vector
- uid: Laga.Geometry.Vector.OrthogonalTo*
  commentId: Overload:Laga.Geometry.Vector.OrthogonalTo
  name: OrthogonalTo
  nameWithType: Vector.OrthogonalTo
  fullName: Laga.Geometry.Vector.OrthogonalTo
- uid: Laga.Geometry.Vector.CrossProduct*
  commentId: Overload:Laga.Geometry.Vector.CrossProduct
  name: CrossProduct
  nameWithType: Vector.CrossProduct
  fullName: Laga.Geometry.Vector.CrossProduct
- uid: Laga.Geometry.Vector.CrossProductLength*
  commentId: Overload:Laga.Geometry.Vector.CrossProductLength
  name: CrossProductLength
  nameWithType: Vector.CrossProductLength
  fullName: Laga.Geometry.Vector.CrossProductLength
- uid: Laga.Geometry.Vector.ComponentProjectTo*
  commentId: Overload:Laga.Geometry.Vector.ComponentProjectTo
  name: ComponentProjectTo
  nameWithType: Vector.ComponentProjectTo
  fullName: Laga.Geometry.Vector.ComponentProjectTo
- uid: Laga.Geometry.Vector.ComponentOrthogonalTo*
  commentId: Overload:Laga.Geometry.Vector.ComponentOrthogonalTo
  name: ComponentOrthogonalTo
  nameWithType: Vector.ComponentOrthogonalTo
  fullName: Laga.Geometry.Vector.ComponentOrthogonalTo
- uid: Laga.Geometry.Vector.IsVectorCero*
  commentId: Overload:Laga.Geometry.Vector.IsVectorCero
  name: IsVectorCero
  nameWithType: Vector.IsVectorCero
  fullName: Laga.Geometry.Vector.IsVectorCero
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Laga.Geometry.Vector.IsOrthogonalTo*
  commentId: Overload:Laga.Geometry.Vector.IsOrthogonalTo
  name: IsOrthogonalTo
  nameWithType: Vector.IsOrthogonalTo
  fullName: Laga.Geometry.Vector.IsOrthogonalTo
- uid: Laga.Geometry.Vector.IsParallelTo*
  commentId: Overload:Laga.Geometry.Vector.IsParallelTo
  name: IsParallelTo
  nameWithType: Vector.IsParallelTo
  fullName: Laga.Geometry.Vector.IsParallelTo
- uid: Laga.Geometry.Vector.DotProduct*
  commentId: Overload:Laga.Geometry.Vector.DotProduct
  name: DotProduct
  nameWithType: Vector.DotProduct
  fullName: Laga.Geometry.Vector.DotProduct
- uid: Laga.Geometry.Vector.Angle*
  commentId: Overload:Laga.Geometry.Vector.Angle
  name: Angle
  nameWithType: Vector.Angle
  fullName: Laga.Geometry.Vector.Angle
- uid: Laga.Geometry.Vector.DistanceTo*
  commentId: Overload:Laga.Geometry.Vector.DistanceTo
  name: DistanceTo
  nameWithType: Vector.DistanceTo
  fullName: Laga.Geometry.Vector.DistanceTo
- uid: Laga.Geometry.Vector.Normalize*
  commentId: Overload:Laga.Geometry.Vector.Normalize
  name: Normalize
  nameWithType: Vector.Normalize
  fullName: Laga.Geometry.Vector.Normalize
- uid: Laga.Geometry.Vector.op_Addition*
  commentId: Overload:Laga.Geometry.Vector.op_Addition
  name: Addition
  nameWithType: Vector.Addition
  fullName: Laga.Geometry.Vector.Addition
- uid: Laga.Geometry.Vector.op_Subtraction*
  commentId: Overload:Laga.Geometry.Vector.op_Subtraction
  name: Subtraction
  nameWithType: Vector.Subtraction
  fullName: Laga.Geometry.Vector.Subtraction
- uid: Laga.Geometry.Vector.op_Multiply*
  commentId: Overload:Laga.Geometry.Vector.op_Multiply
  name: Multiply
  nameWithType: Vector.Multiply
  fullName: Laga.Geometry.Vector.Multiply
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.Geometry.Vector.ToString*
  commentId: Overload:Laga.Geometry.Vector.ToString
  name: ToString
  nameWithType: Vector.ToString
  fullName: Laga.Geometry.Vector.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Laga.Geometry.Vector.Interpolation*
  commentId: Overload:Laga.Geometry.Vector.Interpolation
  name: Interpolation
  nameWithType: Vector.Interpolation
  fullName: Laga.Geometry.Vector.Interpolation
- uid: System.Collections.Generic.List{Laga.Geometry.Vector}
  commentId: T:System.Collections.Generic.List{Laga.Geometry.Vector}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector>
  nameWithType: List<Vector>
  fullName: System.Collections.Generic.List<Laga.Geometry.Vector>
  nameWithType.vb: List(Of Vector)
  fullName.vb: System.Collections.Generic.List(Of Laga.Geometry.Vector)
  name.vb: List(Of Vector)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Laga.Geometry.Vector
    name: Vector
    nameWithType: Vector
    fullName: Laga.Geometry.Vector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Laga.Geometry.Vector
    name: Vector
    nameWithType: Vector
    fullName: Laga.Geometry.Vector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Laga.Geometry.Vector.EqualTo*
  commentId: Overload:Laga.Geometry.Vector.EqualTo
  name: EqualTo
  nameWithType: Vector.EqualTo
  fullName: Laga.Geometry.Vector.EqualTo
