### YamlMime:ManagedReference
items:
- uid: Laga.GeneticAlgorithm.GenrPopulation
  commentId: T:Laga.GeneticAlgorithm.GenrPopulation
  id: GenrPopulation
  parent: Laga.GeneticAlgorithm
  children:
  - Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)
  - Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)
  - Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.GenrPopulation.SizePop
  langs:
  - csharp
  - vb
  name: GenrPopulation
  nameWithType: GenrPopulation
  fullName: Laga.GeneticAlgorithm.GenrPopulation
  type: Class
  source:
    id: GenrPopulation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 10
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenerate basic populations\n"
  example: []
  syntax:
    content: public class GenrPopulation
    content.vb: Public Class GenrPopulation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Laga.GeneticAlgorithm.GenrPopulation.SizePop
  commentId: P:Laga.GeneticAlgorithm.GenrPopulation.SizePop
  id: SizePop
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: SizePop
  nameWithType: GenrPopulation.SizePop
  fullName: Laga.GeneticAlgorithm.GenrPopulation.SizePop
  type: Property
  source:
    id: SizePop
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 17
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nSizePopulation\n"
  example: []
  syntax:
    content: public int SizePop { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property SizePop As Integer
  overload: Laga.GeneticAlgorithm.GenrPopulation.SizePop*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: GenrPopulation(Int32)
  nameWithType: GenrPopulation.GenrPopulation(Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation(System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 33
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nConstructor:\n"
  example: []
  syntax:
    content: public GenrPopulation(int SizePopulation)
    parameters:
    - id: SizePopulation
      type: System.Int32
      description: The size of the Population
    content.vb: Public Sub New(SizePopulation As Integer)
  overload: Laga.GeneticAlgorithm.GenrPopulation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)
  id: Rand_Double(System.Int32,System.Double,System.Double)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Rand_Double(Int32, Double, Double)
  nameWithType: GenrPopulation.Rand_Double(Int32, Double, Double)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32, System.Double, System.Double)
  type: Method
  source:
    id: Rand_Double
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 45
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by random floats.\n"
  example: []
  syntax:
    content: public Population<double> Rand_Double(int size, double min, double max)
    parameters:
    - id: size
      type: System.Int32
      description: the number of doubles in the chromosome
    - id: min
      type: System.Double
      description: min value
    - id: max
      type: System.Double
      description: max value
    return:
      type: Laga.GeneticAlgorithm.Population{System.Double}
      description: double Population
    content.vb: Public Function Rand_Double(size As Integer, min As Double, max As Double) As Population(Of Double)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)
  id: Rand_float(System.Int32,System.Single,System.Single)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Rand_float(Int32, Single, Single)
  nameWithType: GenrPopulation.Rand_float(Int32, Single, Single)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32, System.Single, System.Single)
  type: Method
  source:
    id: Rand_float
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 61
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by random floats.\n"
  example: []
  syntax:
    content: public Population<float> Rand_float(int size, float min, float max)
    parameters:
    - id: size
      type: System.Int32
      description: the number of floats in the chromosome
    - id: min
      type: System.Single
      description: min value
    - id: max
      type: System.Single
      description: max value
    return:
      type: Laga.GeneticAlgorithm.Population{System.Single}
      description: float Population
    content.vb: Public Function Rand_float(size As Integer, min As Single, max As Single) As Population(Of Single)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_float*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)
  id: Rand_Integer(System.Int32,System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Rand_Integer(Int32, Int32, Int32)
  nameWithType: GenrPopulation.Rand_Integer(Int32, Int32, Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: Rand_Integer
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 77
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by random integers.\n"
  example: []
  syntax:
    content: public Population<int> Rand_Integer(int size, int min, int max)
    parameters:
    - id: size
      type: System.Int32
      description: the number of integers in the chromosome
    - id: min
      type: System.Int32
      description: min value
    - id: max
      type: System.Int32
      description: max value
    return:
      type: Laga.GeneticAlgorithm.Population{System.Int32}
      description: int Population
    content.vb: Public Function Rand_Integer(size As Integer, min As Integer, max As Integer) As Population(Of Integer)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
  id: Binary_Integer(System.Int32)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Binary_Integer(Int32)
  nameWithType: GenrPopulation.Binary_Integer(Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
  type: Method
  source:
    id: Binary_Integer
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 107
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by 1s and 0s int type.\n"
  example:
  - "\n<pre><code>Population pop = new GenrPopulation(5).Binary_Integer(20);\nresult:\nChromosome: 0\n- 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,\nChromosome: 1\n- 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,\nChromosome: 2\n- 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\nChromosome: 3\n- 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1,\nChromosome: 4\n- 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,</code></pre>\n"
  syntax:
    content: public Population<int> Binary_Integer(int size)
    parameters:
    - id: size
      type: System.Int32
      description: the number of integers in the chromosome
    return:
      type: Laga.GeneticAlgorithm.Population{System.Int32}
      description: int Population
    content.vb: Public Function Binary_Integer(size As Integer) As Population(Of Integer)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)
  id: Shuffle_Integer(System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Shuffle_Integer(Int32, Int32)
  nameWithType: GenrPopulation.Shuffle_Integer(Int32, Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32, System.Int32)
  type: Method
  source:
    id: Shuffle_Integer
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 138
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by non repeated integers between min and max included.\n"
  example:
  - "\n<pre><code>Population pop = new GenrPopulation(5).Shuffle_Integer(0, 10);\nresults\nChromosome: 0\n- 1, 4, 8, 6, 2, 10, 9, 5, 0, 7, 3,\nChromosome: 1\n- 5, 4, 0, 1, 7, 6, 8, 10, 2, 3, 9,\n Chromosome: 2\n- 1, 6, 10, 7, 3, 5, 9, 2, 0, 8, 4,\nChromosome: 3\n- 9, 1, 4, 6, 10, 2, 7, 5, 8, 0, 3,\nChromosome: 4\n- 2, 5, 0, 7, 6, 1, 4, 3, 8, 9, 10,</code></pre>\n"
  syntax:
    content: public Population<int> Shuffle_Integer(int min, int max)
    parameters:
    - id: min
      type: System.Int32
      description: min value
    - id: max
      type: System.Int32
      description: max value
    return:
      type: Laga.GeneticAlgorithm.Population{System.Int32}
      description: int Population
    content.vb: Public Function Shuffle_Integer(min As Integer, max As Integer) As Population(Of Integer)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
  id: Binary_Char(System.Int32)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Binary_Char(Int32)
  nameWithType: GenrPopulation.Binary_Char(Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
  type: Method
  source:
    id: Binary_Char
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 166
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by binary characters of 1s and 0s.\n"
  example:
  - "\nPopulation pop = new GenrPopulation(5).Binary_Char(10);\nresult:\nChromosome: 0\n- 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\nChromosome: 1\n- 1, 1, 1, 1, 0, 1, 0, 0, 0, 1,\nChromosome: 2\n- 1, 1, 0, 0, 0, 1, 0, 1, 0, 1,\nChromosome: 3\n- 0, 1, 0, 0, 1, 1, 1, 0, 1, 0,\nChromosome: 4\n- 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n"
  syntax:
    content: public Population<char> Binary_Char(int size)
    parameters:
    - id: size
      type: System.Int32
      description: the number of characters in the chromosome
    return:
      type: Laga.GeneticAlgorithm.Population{System.Char}
      description: char Population
    content.vb: Public Function Binary_Char(size As Integer) As Population(Of Char)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)
  id: Rand_Char(System.Int32,System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.GenrPopulation
  langs:
  - csharp
  - vb
  name: Rand_Char(Int32, Int32, Int32)
  nameWithType: GenrPopulation.Rand_Char(Int32, Int32, Int32)
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: Rand_Char
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\GenrPopulation.cs
    startLine: 199
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nGenr8 a Population of chromosomes composed by random characters.\nSee <a href=\"http://www.asciitable.com/\">this link</a> for more information.\n"
  example:
  - "\n<pre><code> \nPopulation pop = new GenrPopulation(5).Rand_Char(30, 50, 100);\nresult:\nChromosome: 0\n- Q, 5, A, P, ^, \\, T, ^, F, ;, U, ?, Z, :, 5, E, B, ], S, H, A, L, I, =, _, ~, E, B, @, H\nChromosome: 1\n- C, 7, T, ], W, W, 7, ?, 4, b, 4, C, L, ], I, Z, J, 8, :, A, S, b, L, 9, a, 7, Q, 6, U, T\nChromosome: 2\n- H, C, O, b, ], O, M, a, H, C, @, 5, [, U, F, b, 2, P, X, 7, W, ?, :, d, Z, E, P, L, a, R\nChromosome: 3\n- 7, 3, N, E, L, U, Y, N, 2, ^, ?, M, U, \\, 3, O, 9, [, X, c, 7, 3, C, O, b, ;, ;, P, :, I\nChromosome: 4\n- d, 2, 2, Z, =, ?, L, H, ;, V, :, H, P, ^,], ;, O, B, b, [, @, Y, Y, b, L, 5, T, c, G</code></pre>\n"
  syntax:
    content: public Population<char> Rand_Char(int size, int start, int end)
    parameters:
    - id: size
      type: System.Int32
      description: the number of characters in the chromosome
    - id: start
      type: System.Int32
      description: the start number in the table, inclusive
    - id: end
      type: System.Int32
      description: the end number in the table, exclusive
    return:
      type: Laga.GeneticAlgorithm.Population{System.Char}
      description: char Population
    content.vb: Public Function Rand_Char(size As Integer, start As Integer, end As Integer) As Population(Of Char)
  overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  name: Laga.GeneticAlgorithm
  nameWithType: Laga.GeneticAlgorithm
  fullName: Laga.GeneticAlgorithm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.GeneticAlgorithm.GenrPopulation.SizePop*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.SizePop
  name: SizePop
  nameWithType: GenrPopulation.SizePop
  fullName: Laga.GeneticAlgorithm.GenrPopulation.SizePop
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.GeneticAlgorithm.GenrPopulation.#ctor*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.#ctor
  name: GenrPopulation
  nameWithType: GenrPopulation.GenrPopulation
  fullName: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Double
  name: Rand_Double
  nameWithType: GenrPopulation.Rand_Double
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Laga.GeneticAlgorithm.Population{System.Double}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Double}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Double>
  nameWithType: Population<Double>
  fullName: Laga.GeneticAlgorithm.Population<System.Double>
  nameWithType.vb: Population(Of Double)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Double)
  name.vb: Population(Of Double)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Population`1
  commentId: T:Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_float*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_float
  name: Rand_float
  nameWithType: GenrPopulation.Rand_float
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_float
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Laga.GeneticAlgorithm.Population{System.Single}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Single}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Single>
  nameWithType: Population<Single>
  fullName: Laga.GeneticAlgorithm.Population<System.Single>
  nameWithType.vb: Population(Of Single)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Single)
  name.vb: Population(Of Single)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer
  name: Rand_Integer
  nameWithType: GenrPopulation.Rand_Integer
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer
- uid: Laga.GeneticAlgorithm.Population{System.Int32}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Int32}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Int32>
  nameWithType: Population<Int32>
  fullName: Laga.GeneticAlgorithm.Population<System.Int32>
  nameWithType.vb: Population(Of Int32)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Int32)
  name.vb: Population(Of Int32)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer
  name: Binary_Integer
  nameWithType: GenrPopulation.Binary_Integer
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer
- uid: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer
  name: Shuffle_Integer
  nameWithType: GenrPopulation.Shuffle_Integer
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer
- uid: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Binary_Char
  name: Binary_Char
  nameWithType: GenrPopulation.Binary_Char
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char
- uid: Laga.GeneticAlgorithm.Population{System.Char}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Char}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Char>
  nameWithType: Population<Char>
  fullName: Laga.GeneticAlgorithm.Population<System.Char>
  nameWithType.vb: Population(Of Char)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Char)
  name.vb: Population(Of Char)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*
  commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Char
  name: Rand_Char
  nameWithType: GenrPopulation.Rand_Char
  fullName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char
