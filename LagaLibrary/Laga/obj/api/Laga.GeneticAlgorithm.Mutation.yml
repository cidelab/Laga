### YamlMime:ManagedReference
items:
- uid: Laga.GeneticAlgorithm.Mutation
  commentId: T:Laga.GeneticAlgorithm.Mutation
  id: Mutation
  parent: Laga.GeneticAlgorithm
  children:
  - Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)
  - Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)
  - Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
  - Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)
  - Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
  - Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
  - Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
  - Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: Mutation
  nameWithType: Mutation
  fullName: Laga.GeneticAlgorithm.Mutation
  type: Class
  source:
    id: Mutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 8
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nApply Mutations on the Population\n"
  example: []
  syntax:
    content: public class Mutation
    content.vb: Public Class Mutation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: Mutation(Single)
  nameWithType: Mutation.Mutation(Single)
  fullName: Laga.GeneticAlgorithm.Mutation.Mutation(System.Single)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 20
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public Mutation(float MutationRate)
    parameters:
    - id: MutationRate
      type: System.Single
      description: ''
    content.vb: Public Sub New(MutationRate As Single)
  overload: Laga.GeneticAlgorithm.Mutation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
  id: CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: CharMutation(Population<Char>, Single, Int32, Int32)
  nameWithType: Mutation.CharMutation(Population<Char>, Single, Int32, Int32)
  fullName: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population<System.Char>, System.Single, System.Int32, System.Int32)
  type: Method
  source:
    id: CharMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 34
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public static Population<char> CharMutation(Population<char> population, float percentChrom, int start, int end)
    parameters:
    - id: population
      type: Laga.GeneticAlgorithm.Population{System.Char}
      description: ''
    - id: percentChrom
      type: System.Single
      description: ''
    - id: start
      type: System.Int32
      description: ''
    - id: end
      type: System.Int32
      description: ''
    return:
      type: Laga.GeneticAlgorithm.Population{System.Char}
      description: ''
    content.vb: Public Shared Function CharMutation(population As Population(Of Char), percentChrom As Single, start As Integer, end As Integer) As Population(Of Char)
  overload: Laga.GeneticAlgorithm.Mutation.CharMutation*
  nameWithType.vb: Mutation.CharMutation(Population(Of Char), Single, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population(Of System.Char), System.Single, System.Int32, System.Int32)
  name.vb: CharMutation(Population(Of Char), Single, Int32, Int32)
- uid: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
  commentId: M:Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
  id: Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: Number(Population<Double>, Single, Double, Double)
  nameWithType: Mutation.Number(Population<Double>, Single, Double, Double)
  fullName: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population<System.Double>, System.Single, System.Double, System.Double)
  type: Method
  source:
    id: Number
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 59
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public static Population<double> Number(Population<double> population, float MutationRate, double min, double max)
    parameters:
    - id: population
      type: Laga.GeneticAlgorithm.Population{System.Double}
      description: ''
    - id: MutationRate
      type: System.Single
      description: ''
    - id: min
      type: System.Double
      description: ''
    - id: max
      type: System.Double
      description: ''
    return:
      type: Laga.GeneticAlgorithm.Population{System.Double}
      description: ''
    content.vb: Public Shared Function Number(population As Population(Of Double), MutationRate As Single, min As Double, max As Double) As Population(Of Double)
  overload: Laga.GeneticAlgorithm.Mutation.Number*
  nameWithType.vb: Mutation.Number(Population(Of Double), Single, Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population(Of System.Double), System.Single, System.Double, System.Double)
  name.vb: Number(Population(Of Double), Single, Double, Double)
- uid: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)
  id: MutationSwap(System.Object[][],System.Single)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: MutationSwap(Object[][], Single)
  nameWithType: Mutation.MutationSwap(Object[][], Single)
  fullName: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][], System.Single)
  type: Method
  source:
    id: MutationSwap
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 85
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public object[][] MutationSwap(object[][] pop, float percentChrom)
    parameters:
    - id: pop
      type: System.Object[][]
      description: ''
    - id: percentChrom
      type: System.Single
      description: ''
    return:
      type: System.Object[][]
      description: ''
    content.vb: Public Function MutationSwap(pop As Object()(), percentChrom As Single) As Object()()
  overload: Laga.GeneticAlgorithm.Mutation.MutationSwap*
  nameWithType.vb: Mutation.MutationSwap(Object()(), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object()(), System.Single)
  name.vb: MutationSwap(Object()(), Single)
- uid: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
  id: NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: NumbMutation(Double[][], Double, Double, Single)
  nameWithType: Mutation.NumbMutation(Double[][], Double, Double, Single)
  fullName: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][], System.Double, System.Double, System.Single)
  type: Method
  source:
    id: NumbMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 142
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public double[][] NumbMutation(double[][] pop, double min, double max, float percentChrom)
    parameters:
    - id: pop
      type: System.Double[][]
      description: ''
    - id: min
      type: System.Double
      description: ''
    - id: max
      type: System.Double
      description: ''
    - id: percentChrom
      type: System.Single
      description: ''
    return:
      type: System.Double[][]
      description: ''
    content.vb: Public Function NumbMutation(pop As Double()(), min As Double, max As Double, percentChrom As Single) As Double()()
  overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
  nameWithType.vb: Mutation.NumbMutation(Double()(), Double, Double, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double()(), System.Double, System.Double, System.Single)
  name.vb: NumbMutation(Double()(), Double, Double, Single)
- uid: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
  id: NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: NumbMutation(Single[][], Single, Single, Single)
  nameWithType: Mutation.NumbMutation(Single[][], Single, Single, Single)
  fullName: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][], System.Single, System.Single, System.Single)
  type: Method
  source:
    id: NumbMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 192
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public float[][] NumbMutation(float[][] pop, float min, float max, float percentChrom)
    parameters:
    - id: pop
      type: System.Single[][]
      description: ''
    - id: min
      type: System.Single
      description: ''
    - id: max
      type: System.Single
      description: ''
    - id: percentChrom
      type: System.Single
      description: ''
    return:
      type: System.Single[][]
      description: ''
    content.vb: Public Function NumbMutation(pop As Single()(), min As Single, max As Single, percentChrom As Single) As Single()()
  overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
  nameWithType.vb: Mutation.NumbMutation(Single()(), Single, Single, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single()(), System.Single, System.Single, System.Single)
  name.vb: NumbMutation(Single()(), Single, Single, Single)
- uid: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
  id: NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: NumbMutation(Int32[][], Int32, Int32, Single)
  nameWithType: Mutation.NumbMutation(Int32[][], Int32, Int32, Single)
  fullName: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][], System.Int32, System.Int32, System.Single)
  type: Method
  source:
    id: NumbMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 239
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public int[][] NumbMutation(int[][] pop, int min, int max, float percentChrom)
    parameters:
    - id: pop
      type: System.Int32[][]
      description: ''
    - id: min
      type: System.Int32
      description: ''
    - id: max
      type: System.Int32
      description: ''
    - id: percentChrom
      type: System.Single
      description: ''
    return:
      type: System.Int32[][]
      description: ''
    content.vb: Public Function NumbMutation(pop As Integer()(), min As Integer, max As Integer, percentChrom As Single) As Integer()()
  overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
  nameWithType.vb: Mutation.NumbMutation(Int32()(), Int32, Int32, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32()(), System.Int32, System.Int32, System.Single)
  name.vb: NumbMutation(Int32()(), Int32, Int32, Single)
- uid: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)
  commentId: M:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)
  id: BinaryCharMutation(System.Char[][],System.Single)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: BinaryCharMutation(Char[][], Single)
  nameWithType: Mutation.BinaryCharMutation(Char[][], Single)
  fullName: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][], System.Single)
  type: Method
  source:
    id: BinaryCharMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 285
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\n\n"
  example: []
  syntax:
    content: public char[][] BinaryCharMutation(char[][] pop, float ChroPercent)
    parameters:
    - id: pop
      type: System.Char[][]
      description: ''
    - id: ChroPercent
      type: System.Single
      description: ''
    return:
      type: System.Char[][]
      description: ''
    content.vb: Public Function BinaryCharMutation(pop As Char()(), ChroPercent As Single) As Char()()
  overload: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*
  nameWithType.vb: Mutation.BinaryCharMutation(Char()(), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char()(), System.Single)
  name.vb: BinaryCharMutation(Char()(), Single)
- uid: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
  commentId: M:Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
  id: CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
  parent: Laga.GeneticAlgorithm.Mutation
  langs:
  - csharp
  - vb
  name: CharMutation(Char[][], Single, Int32, Int32)
  nameWithType: Mutation.CharMutation(Char[][], Single, Int32, Int32)
  fullName: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][], System.Single, System.Int32, System.Int32)
  type: Method
  source:
    id: CharMutation
    path: C:\Users\delab\Documents\GitHub\Laga\LagaLibrary\Laga\Mutation.cs
    startLine: 321
  assemblies:
  - Laga
  namespace: Laga.GeneticAlgorithm
  summary: "\nA Mutation Algorithm\n"
  example: []
  syntax:
    content: public char[][] CharMutation(char[][] pop, float ChroPercent, int start, int end)
    parameters:
    - id: pop
      type: System.Char[][]
      description: The population to perform the mutation
    - id: ChroPercent
      type: System.Single
      description: the percent of mutation in the chromosome
    - id: start
      type: System.Int32
      description: 'the start number for the table, inclusive: Eg: 97'
    - id: end
      type: System.Int32
      description: 'the end number for the table, inclusive: Eg: 122'
    return:
      type: System.Char[][]
      description: char[][]
    content.vb: Public Function CharMutation(pop As Char()(), ChroPercent As Single, start As Integer, end As Integer) As Char()()
  overload: Laga.GeneticAlgorithm.Mutation.CharMutation*
  nameWithType.vb: Mutation.CharMutation(Char()(), Single, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char()(), System.Single, System.Int32, System.Int32)
  name.vb: CharMutation(Char()(), Single, Int32, Int32)
references:
- uid: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  name: Laga.GeneticAlgorithm
  nameWithType: Laga.GeneticAlgorithm
  fullName: Laga.GeneticAlgorithm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Laga.GeneticAlgorithm.Mutation.#ctor*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.#ctor
  name: Mutation
  nameWithType: Mutation.Mutation
  fullName: Laga.GeneticAlgorithm.Mutation.Mutation
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Laga.GeneticAlgorithm.Mutation.CharMutation*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.CharMutation
  name: CharMutation
  nameWithType: Mutation.CharMutation
  fullName: Laga.GeneticAlgorithm.Mutation.CharMutation
- uid: Laga.GeneticAlgorithm.Population{System.Char}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Char}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Char>
  nameWithType: Population<Char>
  fullName: Laga.GeneticAlgorithm.Population<System.Char>
  nameWithType.vb: Population(Of Char)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Char)
  name.vb: Population(Of Char)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Laga.GeneticAlgorithm.Population`1
  commentId: T:Laga.GeneticAlgorithm.Population`1
  name: Population<T>
  nameWithType: Population<T>
  fullName: Laga.GeneticAlgorithm.Population<T>
  nameWithType.vb: Population(Of T)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of T)
  name.vb: Population(Of T)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Laga.GeneticAlgorithm.Mutation.Number*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.Number
  name: Number
  nameWithType: Mutation.Number
  fullName: Laga.GeneticAlgorithm.Mutation.Number
- uid: Laga.GeneticAlgorithm.Population{System.Double}
  commentId: T:Laga.GeneticAlgorithm.Population{System.Double}
  parent: Laga.GeneticAlgorithm
  definition: Laga.GeneticAlgorithm.Population`1
  name: Population<Double>
  nameWithType: Population<Double>
  fullName: Laga.GeneticAlgorithm.Population<System.Double>
  nameWithType.vb: Population(Of Double)
  fullName.vb: Laga.GeneticAlgorithm.Population(Of System.Double)
  name.vb: Population(Of Double)
  spec.csharp:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Laga.GeneticAlgorithm.Population`1
    name: Population
    nameWithType: Population
    fullName: Laga.GeneticAlgorithm.Population
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Laga.GeneticAlgorithm.Mutation.MutationSwap*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.MutationSwap
  name: MutationSwap
  nameWithType: Mutation.MutationSwap
  fullName: Laga.GeneticAlgorithm.Mutation.MutationSwap
- uid: System.Object[][]
  isExternal: true
  name: Object[][]
  nameWithType: Object[][]
  fullName: System.Object[][]
  nameWithType.vb: Object()()
  fullName.vb: System.Object()()
  name.vb: Object()()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Laga.GeneticAlgorithm.Mutation.NumbMutation*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.NumbMutation
  name: NumbMutation
  nameWithType: Mutation.NumbMutation
  fullName: Laga.GeneticAlgorithm.Mutation.NumbMutation
- uid: System.Double[][]
  isExternal: true
  name: Double[][]
  nameWithType: Double[][]
  fullName: System.Double[][]
  nameWithType.vb: Double()()
  fullName.vb: System.Double()()
  name.vb: Double()()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single[][]
  isExternal: true
  name: Single[][]
  nameWithType: Single[][]
  fullName: System.Single[][]
  nameWithType.vb: Single()()
  fullName.vb: System.Single()()
  name.vb: Single()()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[][]
  isExternal: true
  name: Int32[][]
  nameWithType: Int32[][]
  fullName: System.Int32[][]
  nameWithType.vb: Int32()()
  fullName.vb: System.Int32()()
  name.vb: Int32()()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*
  commentId: Overload:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation
  name: BinaryCharMutation
  nameWithType: Mutation.BinaryCharMutation
  fullName: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation
- uid: System.Char[][]
  isExternal: true
  name: Char[][]
  nameWithType: Char[][]
  fullName: System.Char[][]
  nameWithType.vb: Char()()
  fullName.vb: System.Char()()
  name.vb: Char()()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
