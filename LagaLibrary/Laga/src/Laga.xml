<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Laga</name>
    </assembly>
    <members>
        <member name="T:Laga.GeneticAlgorithm.Chromosome`1">
            <summary>
            Create and manipulate Chromosomes
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.Count">
            <summary>
            The size of the chromosome++                                                                        
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.chromosome">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Int32)">
            <summary>
            cons 1
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            
            </summary>
            <param name="ListDna"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.Fitness">
            <summary>
            Get and set the chromosome fitness
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.GetDNA(System.Int32)">
            <summary>
            Get Dna Chromosome at specific index
            </summary>
            <param name="index">index</param>
            <returns>T</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.InsertDNA(System.Int32,`0)">
            <summary>
            Insert DNA in a chromosome at specific Location
            </summary>
            <param name="index">The location in the chromosome</param>
            <param name="DNA">The DNA to insert</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.Add(`0)">
            <summary>
            Add DNA to the Chromosome
            </summary>
            <param name="DNA">The DNA type</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.ToString">
            <summary>
            Chromosome to String
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.ToList">
            <summary>
            Convert the chromosome in a list
            </summary>
            <returns>List</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.ToArray">
            <summary>
            Convert the chromosome in Array;
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates">
            <summary>
            Fisher_Yates algorithm for the chromosome
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.Clone">
            <summary>
            Make a deep copy from a chromosome.
            </summary>
            <returns>Chromosome</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Crossover`1">
            <summary>
            Different crossover type operations
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Crossover`1.IndexParent">
            <summary>
            get and set indexes for parents in crossover.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePoint(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)">
            <summary>
            Performs a Single point crossover over a mating pool or population.
            </summary>
            <typeparamref name="T">The choromsome type</typeparamref>
            <param name="matPool">The mating pool is formed by candidate solutions to have the highest fitness </param>
            <param name="popSize">the population size</param>
            <param name="cut">the index to cut the chromosome</param>
            <returns>population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="matingPool"></param>
            <param name="populationSize"></param>
            <returns>Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)">
            <summary>
            Sinngle Point Chrossover at specific location
            </summary>
            <param name="chromosomeA">Parent A</param>
            <param name="chromosomeB">Parent B</param>
            <param name="cut">Cutting location</param>
            <returns>Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>Char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(6);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(6, 0f, 1f);
            
            sort:
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            Crossover cs = new Crossover();
            char[][] croossovers = cs.SinglePointCrossover(srtPop, 0.8f, 2);
            
            result:
            POPULATION:
            vnqaw: 0.6631602
            smzbu: 0.9322885
            cewwe: 0.8222669
            jsxgr: 0.7555377
            ujklr: 0.181477
            uqmvo: 0.6832687
            
            SORTED POPULATION:
            ujklr: 0.181477
            vnqaw: 0.6631602
            uqmvo: 0.6832687
            jsxgr: 0.7555377
            cewwe: 0.8222669
            smzbu: 0.9322885
            
            CROSSOVER EXAMPLE: 80%
            smwwe // smzbu - cewwe
            cezbu // cewwe - smzbu
            jsklr // jsxgr - ujklr
            ujxgr // ujklr - jsxgr
            
            </code>
            </example>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrChromosome">
            <summary>
            Generate different Chromosome types
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrChromosome.SizeChrom">
            <summary>
            size of the chromosome
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="Size">The Lengthof the Chromosome</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double,System.Double)">
             <summary>
             the method generates a chromosome composed by random doubles
             between min and max.
             </summary>
             <param name="min">The min value in the chromosome</param>
             <param name="max">The max value in the chromosome(exclusive upper bound)</param>
             <returns>double[]</returns>
             <example> How to implement this class:
             <code>
             GenrChromosome chromosome = new GenrChromosome(5);
             double[] Chrom = chromosome.NumberChromosome(0.0, 1.0);
             
             result:
             0.207198212485387, 0.253313632334263, 0.566322204920613, 0.735812343068334, 0.479827285036364
            
             float[] Chrom = chromosome.NumberChromosome(0.0f, 1.0f);
             
             result:
             9.211745E+08, 1.134843E+09, 1.554793E+09, 1.223132E+09, 1.600176E+09
            
             int[] Chrom = chromosome.NumberChromosome(0, 10);
             
             result: 
             8, 3, 7, 2, 1
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble(System.Double,System.Double)">
            <summary>
            The method generates a chromosome composed by random doubles between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome (excluded)</param>
            <returns>double Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single,System.Single)">
            <summary>
            the method generates a chromosome composed by random floats
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>float[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat(System.Single,System.Single)">
            <summary>
            Generates a float chromosome between min and max
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32,System.Int32)">
            <summary>
            the method generates a chromosome composed by random integers
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>int[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger(System.Int32,System.Int32)">
            <summary>
            Generates a Chromosome composed by random integers
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary(System.Int32)">
            <summary>
            creates a binary chromosome composed by 1s and 0s;
            </summary>
            <returns> a random list of 1s and 0s</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            int[] Chrom = chromosome.NumberChromosomeBinary();
            
            result:
            1, 1, 0, 1, 1
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary(System.Int32)">
            <summary>
            Generates a binary Chromosome of 1s and 0s int type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32,System.Int32)">
            <summary>
            the method generate a number chromosome composed by non repeated numbers between start and start + size(not inclusive).
            the method is based on integer numbers. this method is designed by combinatorial problems.
            </summary>
            <param name="min">the minimum value in the sequence</param>
            /// <param name="max">the maximum value in the sequence</param>
            <returns>a non repeat random integer list</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            char[] Chrom = chromosome.NumberChromosomeSwap(0, 4);
            
            results:
            4, 1, 0, 2, 3
            3, 1, 2, 0, 4
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger(System.Int32,System.Int32)">
            <summary>
            Generate a Chromosome composed by non repeated integers between min and max included, designed for combinatorial problems.
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary">
            <summary>
            Generates a binary chromosome of chars.
            </summary>
            <returns>a random char list of 1s and 0s</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            char[] Chrom = chromosome.CharChromosomeBinary();
            
            result:
            0, 1, 0, 1, 0,
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary">
            <summary>
            Generates a binary Chromosome of 1s and 0s char type.
            </summary>
            <returns>char Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32,System.Int32)">
             <summary>
             Generates an random char chromosome composed by characters.
             See <a href="http://www.asciitable.com/">this link</a> for more information.
             </summary>
             <param name="start">the start number in the table, inclusive</param>
             <param name="end">the end number in the table, exclusive</param>
             <returns>returns a random list of characters</returns>
             <example>
             <code>
             GenrChromosome chromosome = new GenrChromosome(25);
             char[] Chrom = chromosome.CharChromosome(65, 90);
             
             result:
             E, B, C, N, F, C, O, P, C, H, O, U, Q, U, G, L, K, Z, E, K, X, A, L, B, Q,
            
             char[] Chrom = chromosome.CharChromosome(33, 47);
             
             result
             ,, -, !, /, -, ', %, !, %, %, !, /, ,, +, ), *, ), /, |, /, ], +, (, !, +,
             
             char[] Chrom = chromosome.CharChromosome(97, 122);
             
             result
             q, a, h, k, j, d, u, o, d, l, w, b, d, i, l, l, h, c, n, c, s, d, k, r, h,
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.DNA_Char(System.Int32,System.Int32)">
            <summary>
            Generates a random char Chromosome composed by characters.
            See <a href="http://www.asciitable.com/">this link</a> for more information.
            </summary>
            <param name="start">the start number in the table, inclusive</param>
            <param name="end">the end number in the table, exclusive</param>
            <returns>char Chromosome</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrDNA">
            <summary>
            Generate DNA for Chromosome classes
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Rand_Double(System.Int32,System.Double,System.Double)">
            <summary>
            The method generates a chromosome composed by random doubles between min and max.
            </summary>
            <param name="size">the total doubles in the chromosome</param>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome (excluded)</param>
            <returns>double Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Rand_Float(System.Int32,System.Single,System.Single)">
            <summary>
            Generates a float chromosome between min and max
            </summary>
            <param name="size">the number of floats in the chromosome</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>float Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Rand_Integer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a Chromosome composed by random integers
            </summary>
            <param name="size">the number of characters in the chromosome</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Binary_Integer(System.Int32)">
            <summary>
            Generates a binary Chromosome of 1s and 0s int type.
            </summary>
            /// <param name="size">the number of integers in the chromosome</param> 
            <returns>int Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer(System.Int32,System.Int32)">
            <summary>
            Generate a Chromosome composed by non repeated integers between min and max included, designed for combinatorial problems.
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Binary_Char(System.Int32)">
            <summary>
            Generates a binary Chromosome of 1s and 0s char type.
            </summary>
            <param name="size">the length in the chromosome</param> 
            <returns>char Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrDNA.Rand_Char(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random char Chromosome composed by characters.
            See <a href="http://www.asciitable.com/">this link</a> for more information.
            </summary>
            <param name="size">the length of characters in the chromosome</param>
            <param name="start">the start number in the table, inclusive</param>
            <param name="end">the end number in the table, exclusive</param>
            <returns>char Chromosome</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrPopulation">
            <summary>
            Generate basic populations
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrPopulation.SizePop">
            <summary>
            SizePopulation
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="SizePopulation">The size of the Population</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)">
            <summary>
            Genr8 a Population of chromosomes composed by random floats.
            </summary>
            <param name="size">the number of doubles in the chromosome</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>double Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)">
            <summary>
            Genr8 a Population of chromosomes composed by random floats.
            </summary>
            <param name="size">the number of floats in the chromosome</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>float Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of chromosomes composed by random integers.
            </summary>
            <param name="size">the number of integers in the chromosome</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)">
            <summary>
            Genr8 a Population of chromosomes composed by 1s and 0s int type.
            </summary>
            <param name="size">the number of integers in the chromosome</param>
            <returns>int Population</returns>
            <example>
            <code>
            Population pop = new GenrPopulation(5).Binary_Integer(20);
            result:
            Chromosome: 0
            - 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
            Chromosome: 1
            - 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,
            Chromosome: 2
            - 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
            Chromosome: 3
            - 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1,
            Chromosome: 4
            - 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of chromosomes composed by non repeated integers between min and max included.
            </summary>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns>int Population</returns>
            <example>
            <code>
            Population pop = new GenrPopulation(5).Shuffle_Integer(0, 10);
            results
            Chromosome: 0
            - 1, 4, 8, 6, 2, 10, 9, 5, 0, 7, 3,
            Chromosome: 1
            - 5, 4, 0, 1, 7, 6, 8, 10, 2, 3, 9,
             Chromosome: 2
            - 1, 6, 10, 7, 3, 5, 9, 2, 0, 8, 4,
            Chromosome: 3
            - 9, 1, 4, 6, 10, 2, 7, 5, 8, 0, 3,
            Chromosome: 4
            - 2, 5, 0, 7, 6, 1, 4, 3, 8, 9, 10,
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)">
            <summary>
            Genr8 a Population of chromosomes composed by binary characters of 1s and 0s.
            </summary>
            <param name="size">the number of characters in the chromosome</param>
            <returns>char Population</returns>
            <example>
            Population pop = new GenrPopulation(5).Binary_Char(10);
            result:
            Chromosome: 0
            - 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
            Chromosome: 1
            - 1, 1, 1, 1, 0, 1, 0, 0, 0, 1,
            Chromosome: 2
            - 1, 1, 0, 0, 0, 1, 0, 1, 0, 1,
            Chromosome: 3
            - 0, 1, 0, 0, 1, 1, 1, 0, 1, 0,
            Chromosome: 4
            - 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of chromosomes composed by random characters.
            See <a href="http://www.asciitable.com/">this link</a> for more information.
            </summary>
            <param name="size">the number of characters in the chromosome</param>
            <param name="start">the start number in the table, inclusive</param>
            <param name="end">the end number in the table, exclusive</param>
            <returns>char Population</returns>
            <example>
            <code> 
            Population pop = new GenrPopulation(5).Rand_Char(30, 50, 100);
            result:
            Chromosome: 0
            - Q, 5, A, P, ^, \, T, ^, F, ;, U, ?, Z, :, 5, E, B, ], S, H, A, L, I, =, _, ~, E, B, @, H
            Chromosome: 1
            - C, 7, T, ], W, W, 7, ?, 4, b, 4, C, L, ], I, Z, J, 8, :, A, S, b, L, 9, a, 7, Q, 6, U, T
            Chromosome: 2
            - H, C, O, b, ], O, M, a, H, C, @, 5, [, U, F, b, 2, P, X, 7, W, ?, :, d, Z, E, P, L, a, R
            Chromosome: 3
            - 7, 3, N, E, L, U, Y, N, 2, ^, ?, M, U, \, 3, O, 9, [, X, c, 7, 3, C, O, b, ;, ;, P, :, I
            Chromosome: 4
            - d, 2, 2, Z, =, ?, L, H, ;, V, :, H, P, ^,], ;, O, B, b, [, @, Y, Y, b, L, 5, T, c, G
            </code>
            </example>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Mutation">
            <summary>
            Apply Mutations on the Population
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="MutationRate"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="percentChrom"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="MutationRate"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[],System.Single)">
            <summary>
            
            </summary>
            <param name="chrom"></param>
            <param name="p"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.DoubleMutation(System.Double[],System.Single,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.FloatMutation(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.IntMutation(System.Int32[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="ChroPercent"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)">
            <summary>
            A Mutation Algorithm
            </summary>
            <param name="pop">The population to perform the mutation</param>
            <param name="ChroPercent">the percent of mutation in the chromosome</param>
            <param name="start">the start number for the table, inclusive: Eg: 97</param>
            <param name="end">the end number for the table, inclusive: Eg: 122</param>
            <returns>char[][]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.NaturalSelection`1">
            <summary>
            Natural selection class
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor">
            <summary>
            The class to select and operates on populations
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)">
            <summary>
            Performs a roulette wheel selection over a population
            </summary>
            <param name="population">The popolution to perform the roulette wheel selection</param>
            <param name="maxItem">the maximum number of chromosomes in the roulette</param>
            <returns>Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)">
            <summary>
            Roulette Wheel
            </summary>
            <param name="population">Popultion</param>
            <param name="maxItem">Maximum size in the roulette</param>
            <returns>Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="population">The Population</param>
            <param name="arrFitness">the Fitness list</param>
            <param name="maxItem">The maximum number of chromosomes selected in the roulette wheel</param>
            <returns>IPopulation</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>objec[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">the number of individuals to select</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count"></param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.Elitism(charPop, 5);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.RouletteWheelNonPolinomicMin(charPop, rndFitness, 10);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.RouletteWheel(charPop, rndFitness, 5);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Tournament(System.Object[][],System.Single[],System.String)">
            <summary>
             mthod for the tournament
            </summary>
            <param name="torneo">the tournament for data</param>
            <param name="results">the results from the evaluation</param>
            <param name="type">if min</param>
            <returns>object[]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Population`1">
            <summary>
            Create and Manipulate Populations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="SizePopulation"></param>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Population`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Higher">
            <summary>
            Return the Higher Ranked Chromosome based on the fitness evaluation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})">
            <summary>
            
            </summary>
            <typeparamref name="T">The type for chromosome</typeparamref>
            <param name="chromosome"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Lower">
            <summary>
            Return the Lower ranked chromosome based on the fitness evaluation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.FitnessAverage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.ToString">
            <summary>
            Print a population
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.RankingSort">
            <summary>
            To sort chromosomes in populations according to fitness evaluation.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Single[],System.Boolean)">
            <summary>
            Sort the individuals in the population by fitness value.
            </summary>
            <param name="population">population to sort</param>
            <param name="arrResults">Array of fitness in the population. Only two flavors are supported: int[] and float[]</param>
            <param name="minmax">if is true the sort is by min to max, else max to min</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Int32[],System.Boolean)">
            <summary>
            An optimised BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
            </summary>
            <param name="population">population to sort</param>
            <param name="arrResults">Array of fitness in the population. Only 2 flavors are supported: int[] and float[]</param>
            <param name="minmax">if is true the sort is by min to max, else max to min</param>
            <returns>automatically the population is sorted. the original population will be modified.</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Tools">
            <summary>
            A collection of methods to operate on Genetic operators and lists.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.DataReport``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a report based on a list of data.
            </summary>
            <param name="listValues">the Values used to create the report</param>
            <returns>List<string></string></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger``1(``0[])">
            <summary>
            Convert a binary chromosome to an integer, base of 2.
            </summary>
            <typeparam name="T">chromosome type</typeparam>
            <param name="chromosome">your chromosome</param>
            <returns>int</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ExtractDNA``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract part of the DNA from a chromosome. 
            </summary>
            <typeparam name="T">Any chromosome type</typeparam>
            <param name="chromosome">the chromosome</param>
            <param name="index">start the extraction</param>
            <param name="length">length of the extraction</param>
            <returns>T[] A DNA segment from the original chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.MinMaxValue``1(``0[])">
            <summary>
            Return the Min and Max values from an Array.
            </summary>
            <typeparam name="T">Any number type like: int, double, float...</typeparam>
            <param name="genArray">The array where to extract the values</param>
            <returns>Generic Array</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char[][])">
            <summary>
            Reverse the original Population
            </summary>
            <param name="charPop">char[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Prefix(System.String,System.Int32)">
            <summary>
            Generate prefixs.
            </summary>
            <param name="prefix">string prefix</param>
            <param name="size">the length of prefix to generate</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector[],System.Int32)">
            <summary>
            Round the location of a laga point, based on the round number
            </summary>
            <param name="points">The points to round coordinates</param>
            <param name="round">round number coordinates</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ParseDblToFloat(System.Double,System.Int32)">
            <summary>
            Parse a double to float
            </summary>
            <param name="dbl">the double to convert</param>
            <param name="digits">the numbers to round, default is 3</param>
            <returns>float</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Double[])">
            <summary>
            Parse any Chromosome type to string Array
            </summary>
            <param name="any">double[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Int32[])">
            <summary>
            Parse a list of integers into a list of strings
            </summary>
            <param name="any">int[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Single[])">
            <summary>
            Parse a list of floats into a list of strings
            </summary>
            <param name="any">float[]</param>
            <returns>string[]</returns>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Char[])">
            <summary>
            Parse a list of char to a list of strings
            </summary>
            <param name="any">char[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Single[])">
            <summary>
            Reverse the original array of floats.
            </summary>
            <param name="arrFloat">float[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Int32[])">
            <summary>
            Reverse the original array of integers
            </summary>
            <param name="arrInt">int[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Double[])">
            <summary>
            Reverse the original array of doubles
            </summary>
            <param name="arrDbl">double[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32[][])">
            <summary>
            Reverse Original integer population
            </summary>
            <param name="intPop">int[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double[][])">
            <summary>
            Reverse original double population
            </summary>
            <param name="dblPop">double[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single[][])">
            <summary>
            Reverse original float population
            </summary>
            <param name="flPop">float[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object[][])">
            <summary>
            Reverse original object population
            </summary>
            <param name="objPop">object[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for array of integers.
            </summary>
            <param name="arrInt">The array of integers to shuffle</param>
            <returns></returns>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates``1(``0[])">
            <summary>
            Experimental Fisher_Yates algorithm to shuffle the original array.
            </summary>
            <typeparam name="T">the type of data</typeparam>
            <param name="arrData">the array of data</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object[],System.Single)">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <param name="percent">the percent to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)">
            <summary>
            Returns a Char in the format 0 or 1
            </summary>
            <param name="thershold">thershold parameter. 0.5 = 50%</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32,System.Int32)">
            <summary>
            Generate a random char.
            based on this link: http://www.asciitable.com/
            </summary>
            <param name="start">the start number for the table, inclusive</param>
            <param name="end">the end number for the table, inclusive</param>
            <returns>char</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32,System.Int32,System.Single)">
            <summary>
            Return non repetead integers between a min max and percent.
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="percent">the percent of return, if 1f will return all the numbers.</param>
            <returns>array of integers if wrong array of 0</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32,System.Single)">
            <summary>
            Non repeated indexs.
            </summary>
            <param name="lengthPop">the length of the population</param>
            <param name="percent">the percent of mutation</param>
            <returns>array of indexs</returns>
        </member>
        <member name="T:Laga.IO.IODataFolder">
            <summary>
            Get Data files information from a folder directory
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.RootFolder">
            <summary>
            The Roof folder with the files
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.ListPathFileNames">
            <summary>
            The List of file names including the path
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.ListFileNames">
            <summary>
            The list of file names without extension
            </summary>
        </member>
        <member name="M:Laga.IO.IODataFolder.#ctor(System.String)">
            <summary>
            Get all the files from an specific folder
            </summary>
            <param name="PathFolder">The folders path to analize</param>
        </member>
        <member name="M:Laga.IO.IODataFolder.#ctor(System.String,System.String)">
            <summary>
            Get the specific files from the filter extension. e: all the ".DWG" files in the folder
            </summary>
            <param name="PathFolder">The folders path to analize</param>
            <param name="Filter">The filter extension</param>
        </member>
        <member name="M:Laga.IO.IODataFolder.GetFileName(System.String)">
            <summary>
            Get the file name from a path
            </summary>
            <param name="PathFile">Path to the file</param>
            <returns>string</returns>
        </member>
        <member name="M:Laga.IO.IODataFolder.ReadSelectiveData(System.String[],System.String)">
            <summary>
            Get the specific files from the filter extension.
            </summary>
            <param name="PathFiles">The path files to filter</param>
            <param name="Filter">The filter Extension: like ".jpg"</param>
            <returns></returns>
        </member>
        <member name="T:Laga.IO.IOGifWriter">
            <summary>
            Gif image creation class
            from The webpage: 
            </summary>
        </member>
        <member name="M:Laga.IO.IOGifWriter.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of GifWriter.
            </summary>
            <param name="OutStream">The <see cref="T:System.IO.Stream"/> to output the Gif to.</param>
            <param name="DefaultFrameDelay">Default Delay between consecutive frames... FrameRate = 1000 / DefaultFrameDelay.</param>
            <param name="Repeat">No of times the Gif should repeat... -1 not to repeat, 0 to repeat indefinitely.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Laga.IO.IOGifWriter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new instance of the writer
            </summary>
            <param name="FileName">The path to the file to output the gif to.</param>
            <param name="DefaultFrameDelay">Default delay between consecutive frames... FrameRate = 1000 / DefaultFrameDelay</param>
            <param name="Repeat">No of times the gif should repeat -1 not to repeat, 0 to repeat indefinetely.</param>
        </member>
        <member name="P:Laga.IO.IOGifWriter.DefaultWidth">
            <summary>
            Gets or Sets the Default Width of a Frame. Used when unspecified.
            </summary>
        </member>
        <member name="P:Laga.IO.IOGifWriter.DefaultHeight">
            <summary>
            Get or set default height of a frame. Used when unspecified
            </summary>
        </member>
        <member name="P:Laga.IO.IOGifWriter.DefaultFrameDelay">
            <summary>
            Get or set the default delay in milliseconds
            </summary>
        </member>
        <member name="P:Laga.IO.IOGifWriter.Repeat">
            <summary>
            The number of times the animation repeat
            -1 indicate no repeat. 0 indificate indefinitely.
            </summary>
        </member>
        <member name="M:Laga.IO.IOGifWriter.WriteFrame(System.Drawing.Image,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="Delay"></param>
        </member>
        <member name="M:Laga.IO.IOGifWriter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Laga.IO.IOTextData">
            <summary>
            Read and process text from a txt file
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.SourceEncoding">
            <summary>
            Get the Encoding Source from the Text File
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.DataText">
            <summary>
            Get the Data Text as a string
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.DataTextLine">
            <summary>
            Get the Data Text as a list of strings
            </summary>
        </member>
        <member name="T:Laga.IO.IOTextData.EncodingType">
            <summary>
            Encoding types Supported
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.UTF7">
            <summary>
            UTF7 Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.UTF8">
            <summary>
            UTF8 Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.ASCII">
            <summary>
            ASCII Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.Unicode">
            <summary>
            Unicode Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.Default">
            <summary>
            Default Encoding
            </summary>
        </member>
        <member name="M:Laga.IO.IOTextData.#ctor(System.String)">
            <summary>
            Construct the class to operate txt files.
            </summary>
            <param name="TextFileName">The text file name</param>
        </member>
        <member name="M:Laga.IO.IOTextData.ConvertFileEncoding(System.String,Laga.IO.IOTextData.EncodingType)">
            <summary>
            Convert a file from one Encoding type to another encoding type
            </summary>
            <param name="FileName">the full file name to convert</param>
            <param name="encodingType">the Encoding type</param>
        </member>
        <member name="M:Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Creates a text file based on a list of strings
            </summary>
            <param name="strList">the content for the file</param>
            <param name="directory">the path to the directory to save the file</param>
            <param name="fileName">name of the txt file</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.CountWordsTopN(System.String,System.Int32)">
            <summary>
            Return the n most frequently occuring words in the string
            </summary>      
            <param name="strMessage">the string</param>
            <param name="topN">Top N Numbers to return</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.GetWords(System.String)">
            <summary>
            Get The words from a string
            </summary>
            <param name="strMessage">The string to operate</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveNumbers(System.String)">
            <summary>
            Remove the digits from a string
            </summary>
            <param name="strMessage">The string to remove the digits</param>
            <returns>string</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveDiacritics(System.String)">
            <summary>
            Remove Diacritcs from string
            </summary>
            <param name="strMessage">The string to clean</param>
            <returns>string</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveByLength(System.String[],System.Int32)">
            <summary>
            Remove strings according to a specific Length
            </summary>
            <param name="strMessages">the Array of strings to make the operations</param>
            <param name="Length">The minimum string length</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveByLength(System.String,System.Int32,System.String)">
            <summary>
            Remove the words according to a specific length from a string
            </summary>
            <param name="strMessage">The string to make the operation</param>
            <param name="Length">The minimum word length in the string</param>
            <param name="separator">A string to specify how combine the new string chain. eg: " "</param>
            <returns>string</returns>
        </member>
        <member name="T:Laga.Geometry.Line">
            <summary>
            Line class and operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.StartPoint">
            <summary>
            Line base point
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.EndPoint">
            <summary>
            Line end point
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.Direction">
            <summary>
            Line vector
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.Length">
            <summary>
            line length
            </summary>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)">
            <summary>
            Line by start point, direction and length
            </summary>
            <param name="StartPoint">start point</param>
            <param name="Direction">Vector</param>
            <param name="t">Parameter</param>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Line by start point and end point
            </summary>
            <param name="StartPoint">start point</param>
            <param name="EndPoint">end point</param>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor">
            <summary>
            Empty Line object
            </summary>
        </member>
        <member name="M:Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line,System.Double)">
            <summary>
            Test if 2 lines are parallel
            </summary>
            <param name="line">line to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line,System.Double)">
            <summary>
            Test if 2 lines are coincident
            </summary>
            <param name="line">Line to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.PointAt(System.Double)">
            <summary>
            Point by parameter in the line
            </summary>
            <param name="t">Parameter</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@,System.Double)">
            <summary>
            Line intersection by tolerance
            </summary>
            <param name="line">Line to test</param>
            <param name="intersection">ref Point intersection</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line,Laga.Geometry.Vector@,Laga.Geometry.Vector@)">
            <summary>
            Find the closest points between lines
            </summary>
            <param name="line">Line to test</param>
            <param name="pointA">ref closest point A</param>
            <param name="pointB">ref closest point B</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.ToString">
            <summary>
            Print line length data
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Laga.Geometry.Plane">
            <summary>
            Plane class and operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Cz">
            <summary>
            Get the Cz term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.By">
            <summary>
            Get the By Term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Ax">
            <summary>
            Get the Ax term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Origin">
            <summary>
            Plane origin
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Norm">
            <summary>
            Vector normal
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.VectorU">
            <summary>
            Vector U (X direction)
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.VectorV">
            <summary>
            Vector V (Y direction)
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.ConstantTerm">
            <summary>
            Plane constant term
            </summary>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Vector equation plane, form: X = P+tU+sV
            </summary>
            <param name="OriginPoint">Point in the plane, considered the origin point</param>
            <param name="VectorU">First vector in the plane (U)</param>
            <param name="VectorV">Second vector in the plane (V)</param>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General Equation plane, form: Ax + By + Cz + D = 0
            </summary>
            <param name="Ax">Coeficient Ax</param>
            <param name="By">Coeficient By</param>
            <param name="Cz">Coeficient Cz</param>
            <param name="D">Constant D</param>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Plane normal equation, form: PX·N = 0
            </summary>
            <param name="VectorPX">Vector from plane origin to a point X in the plane</param>
            <param name="VectorNormal">Normal vector to plane</param>
        </member>
        <member name="M:Laga.Geometry.Plane.ToString">
            <summary>
            Print plane data
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)">
            <summary>
            Distance plane point. If negative, the point is behind the plane.
            </summary>
            <param name="point">point to test</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.PointAt(System.Double,System.Double)">
            <summary>
            Locate a point in the plane
            </summary>
            <param name="U">U parameter</param>
            <param name="V">V parameter</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)">
            <summary>
            Check if the plane is parallel
            </summary>
            <param name="plane">Plane to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)">
            <summary>
            Check if 2 planes are coicident
            </summary>
            <param name="plane">Plane to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@)">
            <summary>
            Plane line intersection
            </summary>
            <param name="line">Line</param>
            <param name="intersection">ref Vector Intersection</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)">
            <summary>
            Find the intersection between 2 planes
            </summary>
            <param name="plane">Plane to test</param>
            <param name="intersection">ref line intersection</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="T:Laga.Geometry.Vector">
            <summary>
            Vector struct for operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Vector.X">
            <summary>
            X coordinate
            </summary> 
        </member>
        <member name="P:Laga.Geometry.Vector.Y">
            <summary>
            Y Coordinate
            </summary>
        </member>
        <member name="P:Laga.Geometry.Vector.Z">
            <summary>
            Z Coordinate
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Create a 2D vector in XY plane 
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a 3D Vector
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="Z">Z coordinate</param>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)">
            <summary>
            Creates the vector zero
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)">
            <summary>
            Creates a orthogonal vector
            </summary>
            <param name="vector">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Cross Product
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Return the cross product length
            | B x BC | = |AB| * |BC| * Sin(theta)
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <param name="vectorC">Vector C</param>
            <returns>Z coordinate of the cross product</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)">
            <summary>
            Project to vector base B
            </summary>
            <param name="vectorB">Vector base</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)">
            <summary>
            Creates the orthogonal component to vector base B
            </summary>
            <param name="vectorB">Vector base</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsVectorCero(System.Double)">
            <summary>
            Test if is vector zero
            </summary>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)">
            <summary>
            Test if vector is orthogonal
            </summary>
            <param name="vector">Vector to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)">
            <summary>
            Test if 2 vectors are parallel
            </summary>
            <param name="vector">The vector to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Dot product
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Dot Product AB · BC
            </summary>
            <param name="vectorA"></param>
            <param name="vectorB"></param>
            <param name="vectorC"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Angle
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            ABC angle between PI and -PI
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <param name="vectorC">Vector C</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)">
            <summary>
            Distance
            </summary>
            <param name="vector">vector to test</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.Normalize">
            <summary>
            Normalize the vector to 1
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Addition
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Substraction
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)">
            <summary>
            Scale multuplication
            </summary>
            <param name="vector">Vector to scale</param>
            <param name="factor">factor</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ToString">
            <summary>
            Print vector data
            </summary>
            <returns>string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)" -->
        <member name="M:Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)">
            <summary>
            test if 2 vectors are equal
            </summary>
            <param name="vector">Vector to test</param>
            <returns>bool</returns>
        </member>
        <member name="T:Laga.Numbers.Function">
            <summary>
            famouse Maths functions
            </summary>
        </member>
        <member name="M:Laga.Numbers.Function.ThreeXplusOne(System.Int32)">
            <summary>
            3X + 1 function
            From the book: The modern C# Challenge
            </summary>
            <param name="Sequence">the number to begin the sequence</param>
        </member>
        <member name="M:Laga.Numbers.Function.NumberDistinct``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lstData"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.Numbers.Function.Sigmoid(System.Single)">
            <summary>
            Sigmoid activation function
            </summary>
            <param name="t">param to evaluate</param>
            <returns>the param map</returns>
        </member>
        <member name="M:Laga.Numbers.Function.Sigmoid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sigmoid simulation function
            </summary>
            <param name="t">param to evaluate</param>
            <param name="A1">The initial value</param>
            <param name="A2">The final value</param>
            <param name="B1">The initial scope value</param>
            <param name="B2">The final scope value</param>
            <param name="decay">factor decay</param>
            <returns>the param map</returns>
        </member>
        <member name="M:Laga.Numbers.Function.Sigmoid(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sigmoid sumulation function
            </summary>
            <param name="t">param to evaluate</param>
            <param name="A1">The initial value</param>
            <param name="A2">The final value</param>
            <param name="B1">The initial scope value</param>
            <param name="B2">The final scope value</param>
            <param name="decay">factor decay</param>
            <returns>the param map</returns>
        </member>
        <member name="M:Laga.Numbers.Function.Deg2Rad(System.Double)">
            <summary>
            Degrees to Radians
            </summary>
            <param name="degrees"></param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Numbers.Function.Rad2Deg(System.Double)">
            <summary>
            Radians to Degree
            </summary>
            <param name="radians"></param>
            <returns>double</returns>
        </member>
        <member name="T:Laga.Numbers.Rand">
            <summary>
            Random number class
            </summary>
        </member>
        <member name="M:Laga.Numbers.Rand.Numbers(System.Int32,System.Single,System.Single)">
            <summary>
            Generate random numbers
            </summary>
            <param name="size">The amount of random values in the list</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>float[]</returns>
        </member>
        <member name="M:Laga.Numbers.Rand.Numbers(System.Int32,System.Double,System.Double)">
            <summary>
            Generate random numbers
            </summary>
            <param name="size">The amount of random values in the list</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>double[]</returns>
        </member>
        <member name="M:Laga.Numbers.Rand.IntNumber(System.Int32,System.Int32)">
            <summary>
            Random Integer between a range
            </summary>
            <param name="min">The minimum value in the range</param>
            <param name="max">The maximum value in the range</param>
            <returns>integer</returns>
        </member>
        <member name="M:Laga.Numbers.Rand.DblNumber">
            <summary>
            Random value between 0 and 1
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Numbers.Rand.FltNumber(System.Single,System.Single)">
            <summary>
            Float Number between a range
            </summary>
            <param name="min">The minimum value in the range</param>
            <param name="max">The maximum value in the range</param>
            <returns>float</returns>
        </member>
    </members>
</doc>
