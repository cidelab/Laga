id: Laga
language: CSharp
name:
  Default: Laga
qualifiedName:
  Default: Laga
type: Assembly
modifiers: {}
items:
- id: Laga.GeneticAlgorithm
  commentId: N:Laga.GeneticAlgorithm
  language: CSharp
  name:
    CSharp: Laga.GeneticAlgorithm
    VB: Laga.GeneticAlgorithm
  nameWithType:
    CSharp: Laga.GeneticAlgorithm
    VB: Laga.GeneticAlgorithm
  qualifiedName:
    CSharp: Laga.GeneticAlgorithm
    VB: Laga.GeneticAlgorithm
  type: Namespace
  assemblies:
  - Laga
  modifiers: {}
  items:
  - id: Laga.GeneticAlgorithm.Chromosome`1
    commentId: T:Laga.GeneticAlgorithm.Chromosome`1
    language: CSharp
    name:
      CSharp: Chromosome<T>
      VB: Chromosome(Of T)
    nameWithType:
      CSharp: Chromosome<T>
      VB: Chromosome(Of T)
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.Chromosome<T>
      VB: Laga.GeneticAlgorithm.Chromosome(Of T)
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: 'public class Chromosome<T> : ICloneable'
        VB: >-
          Public Class Chromosome(Of T)

              Implements ICloneable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - System.ICloneable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: Chromosome(Int32)
        VB: Chromosome(Int32)
      nameWithType:
        CSharp: Chromosome<T>.Chromosome(Int32)
        VB: Chromosome(Of T).Chromosome(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Chromosome(System.Int32)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Chromosome(System.Int32)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome(int size)
          VB: Public Sub New(size As Integer)
        parameters:
        - id: size
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Chromosome`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Collections.Generic.List{`0})
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Collections.Generic.List{`0})
      language: CSharp
      name:
        CSharp: Chromosome(List<T>)
        VB: Chromosome(List(Of T))
      nameWithType:
        CSharp: Chromosome<T>.Chromosome(List<T>)
        VB: Chromosome(Of T).Chromosome(List(Of T))
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Chromosome(System.Collections.Generic.List<T>)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Chromosome(System.Collections.Generic.List(Of T))
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome(List<T> ListDna)
          VB: Public Sub New(ListDna As List(Of T))
        parameters:
        - id: ListDna
          type: System.Collections.Generic.List{{T}}
      overload: Laga.GeneticAlgorithm.Chromosome`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.#ctor
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.#ctor
      language: CSharp
      name:
        CSharp: Chromosome()
        VB: Chromosome()
      nameWithType:
        CSharp: Chromosome<T>.Chromosome()
        VB: Chromosome(Of T).Chromosome()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Chromosome()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Chromosome()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome()
          VB: Public Sub New
      overload: Laga.GeneticAlgorithm.Chromosome`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.GetDNA(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.GetDNA(System.Int32)
      language: CSharp
      name:
        CSharp: GetDNA(Int32)
        VB: GetDNA(Int32)
      nameWithType:
        CSharp: Chromosome<T>.GetDNA(Int32)
        VB: Chromosome(Of T).GetDNA(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.GetDNA(System.Int32)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).GetDNA(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public T GetDNA(int index)
          VB: Public Function GetDNA(index As Integer) As T
        parameters:
        - id: index
          type: System.Int32
        return:
          type: '{T}'
      overload: Laga.GeneticAlgorithm.Chromosome`1.GetDNA*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.InsertDNA(System.Int32,`0)
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.InsertDNA(System.Int32,`0)
      language: CSharp
      name:
        CSharp: InsertDNA(Int32, T)
        VB: InsertDNA(Int32, T)
      nameWithType:
        CSharp: Chromosome<T>.InsertDNA(Int32, T)
        VB: Chromosome(Of T).InsertDNA(Int32, T)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.InsertDNA(System.Int32, T)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).InsertDNA(System.Int32, T)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void InsertDNA(int index, T DNA)
          VB: Public Sub InsertDNA(index As Integer, DNA As T)
        parameters:
        - id: index
          type: System.Int32
        - id: DNA
          type: '{T}'
      overload: Laga.GeneticAlgorithm.Chromosome`1.InsertDNA*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.Add(`0)
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.Add(`0)
      language: CSharp
      name:
        CSharp: Add(T)
        VB: Add(T)
      nameWithType:
        CSharp: Chromosome<T>.Add(T)
        VB: Chromosome(Of T).Add(T)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Add(T)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Add(T)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void Add(T DNA)
          VB: Public Sub Add(DNA As T)
        parameters:
        - id: DNA
          type: '{T}'
      overload: Laga.GeneticAlgorithm.Chromosome`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.AddRange(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.AddRange(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: AddRange(IEnumerable<T>)
        VB: AddRange(IEnumerable(Of T))
      nameWithType:
        CSharp: Chromosome<T>.AddRange(IEnumerable<T>)
        VB: Chromosome(Of T).AddRange(IEnumerable(Of T))
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void AddRange(IEnumerable<T> DNACollection)
          VB: Public Sub AddRange(DNACollection As IEnumerable(Of T))
        parameters:
        - id: DNACollection
          type: System.Collections.Generic.IEnumerable{{T}}
      overload: Laga.GeneticAlgorithm.Chromosome`1.AddRange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.ToString
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Chromosome<T>.ToString()
        VB: Chromosome(Of T).ToString()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.ToString()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).ToString()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Laga.GeneticAlgorithm.Chromosome`1.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Laga.GeneticAlgorithm.Chromosome`1.ToList
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.ToList
      language: CSharp
      name:
        CSharp: ToList()
        VB: ToList()
      nameWithType:
        CSharp: Chromosome<T>.ToList()
        VB: Chromosome(Of T).ToList()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.ToList()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).ToList()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public List<T> ToList()
          VB: Public Function ToList As List(Of T)
        return:
          type: System.Collections.Generic.List{{T}}
      overload: Laga.GeneticAlgorithm.Chromosome`1.ToList*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.ToArray
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: Chromosome<T>.ToArray()
        VB: Chromosome(Of T).ToArray()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.ToArray()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).ToArray()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray As T()
        return:
          type: '{T}[]'
      overload: Laga.GeneticAlgorithm.Chromosome`1.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates
      language: CSharp
      name:
        CSharp: Fisher_Yates()
        VB: Fisher_Yates()
      nameWithType:
        CSharp: Chromosome<T>.Fisher_Yates()
        VB: Chromosome(Of T).Fisher_Yates()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Fisher_Yates()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Fisher_Yates()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void Fisher_Yates()
          VB: Public Sub Fisher_Yates
      overload: Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.Clone
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.Clone
      language: CSharp
      name:
        CSharp: Clone()
        VB: Clone()
      nameWithType:
        CSharp: Chromosome<T>.Clone()
        VB: Chromosome(Of T).Clone()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Clone()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Clone()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<T> Clone()
          VB: Public Function Clone As Chromosome(Of T)
        return:
          type: Laga.GeneticAlgorithm.Chromosome`1
      overload: Laga.GeneticAlgorithm.Chromosome`1.Clone*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone
      commentId: M:Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone
      language: CSharp
      name:
        CSharp: ICloneable.Clone()
        VB: System.ICloneable.Clone()
      nameWithType:
        CSharp: Chromosome<T>.ICloneable.Clone()
        VB: Chromosome(Of T).System.ICloneable.Clone()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.System.ICloneable.Clone()
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).System.ICloneable.Clone()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: object ICloneable.Clone()
          VB: Function System.ICloneable.Clone As Object Implements ICloneable.Clone
        return:
          type: System.Object
      overload: Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone*
      implements:
      - System.ICloneable.Clone
      modifiers:
        CSharp: []
        VB: []
    - id: Laga.GeneticAlgorithm.Chromosome`1.Count
      commentId: P:Laga.GeneticAlgorithm.Chromosome`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: Chromosome<T>.Count
        VB: Chromosome(Of T).Count
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Count
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Count
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Chromosome`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.GeneticAlgorithm.Chromosome`1.Chr
      commentId: P:Laga.GeneticAlgorithm.Chromosome`1.Chr
      language: CSharp
      name:
        CSharp: Chr
        VB: Chr
      nameWithType:
        CSharp: Chromosome<T>.Chr
        VB: Chromosome(Of T).Chr
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Chr
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Chr
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public List<T> Chr { get; set; }
          VB: Public Property Chr As List(Of T)
        parameters: []
        return:
          type: System.Collections.Generic.List{{T}}
      overload: Laga.GeneticAlgorithm.Chromosome`1.Chr*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Chromosome`1.Fitness
      commentId: P:Laga.GeneticAlgorithm.Chromosome`1.Fitness
      language: CSharp
      name:
        CSharp: Fitness
        VB: Fitness
      nameWithType:
        CSharp: Chromosome<T>.Fitness
        VB: Chromosome(Of T).Fitness
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Chromosome<T>.Fitness
        VB: Laga.GeneticAlgorithm.Chromosome(Of T).Fitness
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Fitness { get; set; }
          VB: Public Property Fitness As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.GeneticAlgorithm.Chromosome`1.Fitness*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.Crossover`1
    commentId: T:Laga.GeneticAlgorithm.Crossover`1
    language: CSharp
    name:
      CSharp: Crossover<T>
      VB: Crossover(Of T)
    nameWithType:
      CSharp: Crossover<T>
      VB: Crossover(Of T)
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.Crossover<T>
      VB: Laga.GeneticAlgorithm.Crossover(Of T)
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Crossover<T>
        VB: Public Class Crossover(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.Crossover`1.#ctor
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.#ctor
      language: CSharp
      name:
        CSharp: Crossover()
        VB: Crossover()
      nameWithType:
        CSharp: Crossover<T>.Crossover()
        VB: Crossover(Of T).Crossover()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.Crossover()
        VB: Laga.GeneticAlgorithm.Crossover(Of T).Crossover()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Crossover()
          VB: Public Sub New
      overload: Laga.GeneticAlgorithm.Crossover`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePoint(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePoint(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePoint(Population<T>, Int32, Int32)
        VB: SinglePoint(Population(Of T), Int32, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePoint(Population<T>, Int32, Int32)
        VB: Crossover(Of T).SinglePoint(Population(Of T), Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePoint(Laga.GeneticAlgorithm.Population<T>, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePoint(Laga.GeneticAlgorithm.Population(Of T), System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<T> SinglePoint(Population<T> matPool, int popSize, int cut)
          VB: Public Shared Function SinglePoint(matPool As Population(Of T), popSize As Integer, cut As Integer) As Population(Of T)
        parameters:
        - id: matPool
          type: Laga.GeneticAlgorithm.Population{{T}}
        - id: popSize
          type: System.Int32
        - id: cut
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{{T}}
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      language: CSharp
      name:
        CSharp: RandomPointCrossover(Population<T>, Int32)
        VB: RandomPointCrossover(Population(Of T), Int32)
      nameWithType:
        CSharp: Crossover<T>.RandomPointCrossover(Population<T>, Int32)
        VB: Crossover(Of T).RandomPointCrossover(Population(Of T), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.RandomPointCrossover(Laga.GeneticAlgorithm.Population<T>, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).RandomPointCrossover(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<T> RandomPointCrossover(Population<T> matingPool, int populationSize)
          VB: Public Shared Function RandomPointCrossover(matingPool As Population(Of T), populationSize As Integer) As Population(Of T)
        parameters:
        - id: matingPool
          type: Laga.GeneticAlgorithm.Population{{T}}
        - id: populationSize
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{{T}}
      overload: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Chromosome<T>, Chromosome<T>, Int32)
        VB: SinglePointCrossover(Chromosome(Of T), Chromosome(Of T), Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Chromosome<T>, Chromosome<T>, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Chromosome(Of T), Chromosome(Of T), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome<T>, Laga.GeneticAlgorithm.Chromosome<T>, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome(Of T), Laga.GeneticAlgorithm.Chromosome(Of T), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<T> SinglePointCrossover(Chromosome<T> chromosomeA, Chromosome<T> chromosomeB, int cut)
          VB: Public Shared Function SinglePointCrossover(chromosomeA As Chromosome(Of T), chromosomeB As Chromosome(Of T), cut As Integer) As Chromosome(Of T)
        parameters:
        - id: chromosomeA
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
        - id: chromosomeB
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
        - id: cut
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Object[][], Single, Int32)
        VB: SinglePointCrossover(Object()(), Single, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Object[][], Single, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Object()(), Single, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Object[][], System.Single, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Object()(), System.Single, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] SinglePointCrossover(object[][] population, float percent, int pointCutter)
          VB: Public Function SinglePointCrossover(population As Object()(), percent As Single, pointCutter As Integer) As Object()()
        parameters:
        - id: population
          type: System.Object[][]
        - id: percent
          type: System.Single
        - id: pointCutter
          type: System.Int32
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Double[][], Single, Int32)
        VB: SinglePointCrossover(Double()(), Single, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Double[][], Single, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Double()(), Single, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Double[][], System.Single, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Double()(), System.Single, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] SinglePointCrossover(double[][] population, float percent, int pointCutter)
          VB: Public Function SinglePointCrossover(population As Double()(), percent As Single, pointCutter As Integer) As Double()()
        parameters:
        - id: population
          type: System.Double[][]
        - id: percent
          type: System.Single
        - id: pointCutter
          type: System.Int32
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Single[][], Single, Int32)
        VB: SinglePointCrossover(Single()(), Single, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Single[][], Single, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Single()(), Single, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Single[][], System.Single, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Single()(), System.Single, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] SinglePointCrossover(float[][] population, float percent, int pointCutter)
          VB: Public Function SinglePointCrossover(population As Single()(), percent As Single, pointCutter As Integer) As Single()()
        parameters:
        - id: population
          type: System.Single[][]
        - id: percent
          type: System.Single
        - id: pointCutter
          type: System.Int32
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Int32[][], Single, Int32)
        VB: SinglePointCrossover(Int32()(), Single, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Int32[][], Single, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Int32()(), Single, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Int32[][], System.Single, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Int32()(), System.Single, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] SinglePointCrossover(int[][] population, float percent, int pointCutter)
          VB: Public Function SinglePointCrossover(population As Integer()(), percent As Single, pointCutter As Integer) As Integer()()
        parameters:
        - id: population
          type: System.Int32[][]
        - id: percent
          type: System.Single
        - id: pointCutter
          type: System.Int32
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: SinglePointCrossover(Char[][], Single, Int32)
        VB: SinglePointCrossover(Char()(), Single, Int32)
      nameWithType:
        CSharp: Crossover<T>.SinglePointCrossover(Char[][], Single, Int32)
        VB: Crossover(Of T).SinglePointCrossover(Char()(), Single, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover(System.Char[][], System.Single, System.Int32)
        VB: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover(System.Char()(), System.Single, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] SinglePointCrossover(char[][] population, float percent, int pointCutter)
          VB: Public Function SinglePointCrossover(population As Char()(), percent As Single, pointCutter As Integer) As Char()()
        parameters:
        - id: population
          type: System.Char[][]
        - id: percent
          type: System.Single
        - id: pointCutter
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Crossover`1.IndexParent
      commentId: P:Laga.GeneticAlgorithm.Crossover`1.IndexParent
      language: CSharp
      name:
        CSharp: IndexParent
        VB: IndexParent
      nameWithType:
        CSharp: Crossover<T>.IndexParent
        VB: Crossover(Of T).IndexParent
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Crossover<T>.IndexParent
        VB: Laga.GeneticAlgorithm.Crossover(Of T).IndexParent
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[] IndexParent { get; set; }
          VB: Public Property IndexParent As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.Crossover`1.IndexParent*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.GenrChromosome
    commentId: T:Laga.GeneticAlgorithm.GenrChromosome
    language: CSharp
    name:
      CSharp: GenrChromosome
      VB: GenrChromosome
    nameWithType:
      CSharp: GenrChromosome
      VB: GenrChromosome
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.GenrChromosome
      VB: Laga.GeneticAlgorithm.GenrChromosome
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: >-
          [Obsolete("Please try GenrDNA instead", false)]

          public class GenrChromosome
        VB: >-
          <Obsolete("Please try GenrDNA instead", False)>

          Public Class GenrChromosome
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.ObsoleteAttribute
      ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
      arguments:
      - type: System.String
        value: Please try GenrDNA instead
      - type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.GenrChromosome.#ctor(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: GenrChromosome(Int32)
        VB: GenrChromosome(Int32)
      nameWithType:
        CSharp: GenrChromosome.GenrChromosome(Int32)
        VB: GenrChromosome.GenrChromosome(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.GenrChromosome(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.GenrChromosome(System.Int32)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public GenrChromosome(int Size)
          VB: Public Sub New(Size As Integer)
        parameters:
        - id: Size
          type: System.Int32
      overload: Laga.GeneticAlgorithm.GenrChromosome.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double,System.Double)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: NumberChromosome(Double, Double)
        VB: NumberChromosome(Double, Double)
      nameWithType:
        CSharp: GenrChromosome.NumberChromosome(Double, Double)
        VB: GenrChromosome.NumberChromosome(Double, Double)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double, System.Double)
        VB: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[] NumberChromosome(double min, double max)
          VB: Public Function NumberChromosome(min As Double, max As Double) As Double()
        parameters:
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: System.Double[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble(System.Double,System.Double)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: DNA_RandDouble(Double, Double)
        VB: DNA_RandDouble(Double, Double)
      nameWithType:
        CSharp: GenrChromosome.DNA_RandDouble(Double, Double)
        VB: GenrChromosome.DNA_RandDouble(Double, Double)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble(System.Double, System.Double)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble(System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<double> DNA_RandDouble(double min, double max)
          VB: Public Function DNA_RandDouble(min As Double, max As Double) As Chromosome(Of Double)
        parameters:
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Double}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single,System.Single)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: NumberChromosome(Single, Single)
        VB: NumberChromosome(Single, Single)
      nameWithType:
        CSharp: GenrChromosome.NumberChromosome(Single, Single)
        VB: GenrChromosome.NumberChromosome(Single, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single, System.Single)
        VB: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[] NumberChromosome(float min, float max)
          VB: Public Function NumberChromosome(min As Single, max As Single) As Single()
        parameters:
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: System.Single[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat(System.Single,System.Single)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: DNA_RandFloat(Single, Single)
        VB: DNA_RandFloat(Single, Single)
      nameWithType:
        CSharp: GenrChromosome.DNA_RandFloat(Single, Single)
        VB: GenrChromosome.DNA_RandFloat(Single, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat(System.Single, System.Single)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat(System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<float> DNA_RandFloat(float min, float max)
          VB: Public Function DNA_RandFloat(min As Single, max As Single) As Chromosome(Of Single)
        parameters:
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Single}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NumberChromosome(Int32, Int32)
        VB: NumberChromosome(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.NumberChromosome(Int32, Int32)
        VB: GenrChromosome.NumberChromosome(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[] NumberChromosome(int min, int max)
          VB: Public Function NumberChromosome(min As Integer, max As Integer) As Integer()
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: DNA_RandInteger(Int32, Int32)
        VB: DNA_RandInteger(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.DNA_RandInteger(Int32, Int32)
        VB: GenrChromosome.DNA_RandInteger(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<int> DNA_RandInteger(int min, int max)
          VB: Public Function DNA_RandInteger(min As Integer, max As Integer) As Chromosome(Of Integer)
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary(System.Int32)
      language: CSharp
      name:
        CSharp: NumberChromosomeBinary(Int32)
        VB: NumberChromosomeBinary(Int32)
      nameWithType:
        CSharp: GenrChromosome.NumberChromosomeBinary(Int32)
        VB: GenrChromosome.NumberChromosomeBinary(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[] NumberChromosomeBinary(int size)
          VB: Public Function NumberChromosomeBinary(size As Integer) As Integer()
        parameters:
        - id: size
          type: System.Int32
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary(System.Int32)
      language: CSharp
      name:
        CSharp: DNA_IntBinary(Int32)
        VB: DNA_IntBinary(Int32)
      nameWithType:
        CSharp: GenrChromosome.DNA_IntBinary(Int32)
        VB: GenrChromosome.DNA_IntBinary(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<int> DNA_IntBinary(int size)
          VB: Public Function DNA_IntBinary(size As Integer) As Chromosome(Of Integer)
        parameters:
        - id: size
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NumberChromosomeSwap(Int32, Int32)
        VB: NumberChromosomeSwap(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.NumberChromosomeSwap(Int32, Int32)
        VB: GenrChromosome.NumberChromosomeSwap(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[] NumberChromosomeSwap(int min, int max)
          VB: Public Function NumberChromosomeSwap(min As Integer, max As Integer) As Integer()
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: DNA_ShuffleInteger(Int32, Int32)
        VB: DNA_ShuffleInteger(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.DNA_ShuffleInteger(Int32, Int32)
        VB: GenrChromosome.DNA_ShuffleInteger(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<int> DNA_ShuffleInteger(int min, int max)
          VB: Public Shared Function DNA_ShuffleInteger(min As Integer, max As Integer) As Chromosome(Of Integer)
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary
      language: CSharp
      name:
        CSharp: CharChromosomeBinary()
        VB: CharChromosomeBinary()
      nameWithType:
        CSharp: GenrChromosome.CharChromosomeBinary()
        VB: GenrChromosome.CharChromosomeBinary()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary()
        VB: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[] CharChromosomeBinary()
          VB: Public Function CharChromosomeBinary As Char()
        return:
          type: System.Char[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary
      language: CSharp
      name:
        CSharp: DNA_CharBinary()
        VB: DNA_CharBinary()
      nameWithType:
        CSharp: GenrChromosome.DNA_CharBinary()
        VB: GenrChromosome.DNA_CharBinary()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary()
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<char> DNA_CharBinary()
          VB: Public Function DNA_CharBinary As Chromosome(Of Char)
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Char}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CharChromosome(Int32, Int32)
        VB: CharChromosome(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.CharChromosome(Int32, Int32)
        VB: GenrChromosome.CharChromosome(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[] CharChromosome(int start, int end)
          VB: Public Function CharChromosome(start As Integer, end As Integer) As Char()
        parameters:
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: System.Char[]
      overload: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrChromosome.DNA_Char(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: DNA_Char(Int32, Int32)
        VB: DNA_Char(Int32, Int32)
      nameWithType:
        CSharp: GenrChromosome.DNA_Char(Int32, Int32)
        VB: GenrChromosome.DNA_Char(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<char> DNA_Char(int start, int end)
          VB: Public Function DNA_Char(start As Integer, end As Integer) As Chromosome(Of Char)
        parameters:
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Char}
      overload: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
      commentId: P:Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
      language: CSharp
      name:
        CSharp: SizeChrom
        VB: SizeChrom
      nameWithType:
        CSharp: GenrChromosome.SizeChrom
        VB: GenrChromosome.SizeChrom
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
        VB: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int SizeChrom { get; set; }
          VB: Public Property SizeChrom As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.GenrDNA
    commentId: T:Laga.GeneticAlgorithm.GenrDNA
    language: CSharp
    name:
      CSharp: GenrDNA
      VB: GenrDNA
    nameWithType:
      CSharp: GenrDNA
      VB: GenrDNA
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.GenrDNA
      VB: Laga.GeneticAlgorithm.GenrDNA
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public static class GenrDNA
        VB: Public Module GenrDNA
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Double(System.Int32,System.Double,System.Double)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Rand_Double(System.Int32,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Rand_Double(Int32, Double, Double)
        VB: Rand_Double(Int32, Double, Double)
      nameWithType:
        CSharp: GenrDNA.Rand_Double(Int32, Double, Double)
        VB: GenrDNA.Rand_Double(Int32, Double, Double)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Rand_Double(System.Int32, System.Double, System.Double)
        VB: Laga.GeneticAlgorithm.GenrDNA.Rand_Double(System.Int32, System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<double> Rand_Double(int size, double min, double max)
          VB: Public Shared Function Rand_Double(size As Integer, min As Double, max As Double) As Chromosome(Of Double)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Double}
      overload: Laga.GeneticAlgorithm.GenrDNA.Rand_Double*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Float(System.Int32,System.Single,System.Single)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Rand_Float(System.Int32,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Rand_Float(Int32, Single, Single)
        VB: Rand_Float(Int32, Single, Single)
      nameWithType:
        CSharp: GenrDNA.Rand_Float(Int32, Single, Single)
        VB: GenrDNA.Rand_Float(Int32, Single, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Rand_Float(System.Int32, System.Single, System.Single)
        VB: Laga.GeneticAlgorithm.GenrDNA.Rand_Float(System.Int32, System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<float> Rand_Float(int size, float min, float max)
          VB: Public Shared Function Rand_Float(size As Integer, min As Single, max As Single) As Chromosome(Of Single)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Single}
      overload: Laga.GeneticAlgorithm.GenrDNA.Rand_Float*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer(System.Int32,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Rand_Integer(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rand_Integer(Int32, Int32, Int32)
        VB: Rand_Integer(Int32, Int32, Int32)
      nameWithType:
        CSharp: GenrDNA.Rand_Integer(Int32, Int32, Int32)
        VB: GenrDNA.Rand_Integer(Int32, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer(System.Int32, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<int> Rand_Integer(int size, int min, int max)
          VB: Public Shared Function Rand_Integer(size As Integer, min As Integer, max As Integer) As Chromosome(Of Integer)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Binary_Integer(System.Int32)
      language: CSharp
      name:
        CSharp: Binary_Integer(Int32)
        VB: Binary_Integer(Int32)
      nameWithType:
        CSharp: GenrDNA.Binary_Integer(Int32)
        VB: GenrDNA.Binary_Integer(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<int> Binary_Integer(int size)
          VB: Public Shared Function Binary_Integer(size As Integer) As Chromosome(Of Integer)
        parameters:
        - id: size
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Shuffle_Integer(Int32, Int32)
        VB: Shuffle_Integer(Int32, Int32)
      nameWithType:
        CSharp: GenrDNA.Shuffle_Integer(Int32, Int32)
        VB: GenrDNA.Shuffle_Integer(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<int> Shuffle_Integer(int min, int max)
          VB: Public Shared Function Shuffle_Integer(min As Integer, max As Integer) As Chromosome(Of Integer)
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Char(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Binary_Char(System.Int32)
      language: CSharp
      name:
        CSharp: Binary_Char(Int32)
        VB: Binary_Char(Int32)
      nameWithType:
        CSharp: GenrDNA.Binary_Char(Int32)
        VB: GenrDNA.Binary_Char(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Binary_Char(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrDNA.Binary_Char(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<char> Binary_Char(int size)
          VB: Public Shared Function Binary_Char(size As Integer) As Chromosome(Of Char)
        parameters:
        - id: size
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Char}
      overload: Laga.GeneticAlgorithm.GenrDNA.Binary_Char*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Char(System.Int32,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrDNA.Rand_Char(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rand_Char(Int32, Int32, Int32)
        VB: Rand_Char(Int32, Int32, Int32)
      nameWithType:
        CSharp: GenrDNA.Rand_Char(Int32, Int32, Int32)
        VB: GenrDNA.Rand_Char(Int32, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrDNA.Rand_Char(System.Int32, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrDNA.Rand_Char(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Chromosome<char> Rand_Char(int size, int start, int end)
          VB: Public Shared Function Rand_Char(size As Integer, start As Integer, end As Integer) As Chromosome(Of Char)
        parameters:
        - id: size
          type: System.Int32
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{System.Char}
      overload: Laga.GeneticAlgorithm.GenrDNA.Rand_Char*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Laga.GeneticAlgorithm.GenrPopulation
    commentId: T:Laga.GeneticAlgorithm.GenrPopulation
    language: CSharp
    name:
      CSharp: GenrPopulation
      VB: GenrPopulation
    nameWithType:
      CSharp: GenrPopulation
      VB: GenrPopulation
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.GenrPopulation
      VB: Laga.GeneticAlgorithm.GenrPopulation
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class GenrPopulation
        VB: Public Class GenrPopulation
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: GenrPopulation(Int32)
        VB: GenrPopulation(Int32)
      nameWithType:
        CSharp: GenrPopulation.GenrPopulation(Int32)
        VB: GenrPopulation.GenrPopulation(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation(System.Int32)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public GenrPopulation(int SizePopulation)
          VB: Public Sub New(SizePopulation As Integer)
        parameters:
        - id: SizePopulation
          type: System.Int32
      overload: Laga.GeneticAlgorithm.GenrPopulation.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Rand_Double(Int32, Double, Double)
        VB: Rand_Double(Int32, Double, Double)
      nameWithType:
        CSharp: GenrPopulation.Rand_Double(Int32, Double, Double)
        VB: GenrPopulation.Rand_Double(Int32, Double, Double)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32, System.Double, System.Double)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double(System.Int32, System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<double> Rand_Double(int size, double min, double max)
          VB: Public Function Rand_Double(size As Integer, min As Double, max As Double) As Population(Of Double)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: Laga.GeneticAlgorithm.Population{System.Double}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Rand_float(Int32, Single, Single)
        VB: Rand_float(Int32, Single, Single)
      nameWithType:
        CSharp: GenrPopulation.Rand_float(Int32, Single, Single)
        VB: GenrPopulation.Rand_float(Int32, Single, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32, System.Single, System.Single)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Rand_float(System.Int32, System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<float> Rand_float(int size, float min, float max)
          VB: Public Function Rand_float(size As Integer, min As Single, max As Single) As Population(Of Single)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: Laga.GeneticAlgorithm.Population{System.Single}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_float*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rand_Integer(Int32, Int32, Int32)
        VB: Rand_Integer(Int32, Int32, Int32)
      nameWithType:
        CSharp: GenrPopulation.Rand_Integer(Int32, Int32, Int32)
        VB: GenrPopulation.Rand_Integer(Int32, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<int> Rand_Integer(int size, int min, int max)
          VB: Public Function Rand_Integer(size As Integer, min As Integer, max As Integer) As Population(Of Integer)
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
      language: CSharp
      name:
        CSharp: Binary_Integer(Int32)
        VB: Binary_Integer(Int32)
      nameWithType:
        CSharp: GenrPopulation.Binary_Integer(Int32)
        VB: GenrPopulation.Binary_Integer(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<int> Binary_Integer(int size)
          VB: Public Function Binary_Integer(size As Integer) As Population(Of Integer)
        parameters:
        - id: size
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Shuffle_Integer(Int32, Int32)
        VB: Shuffle_Integer(Int32, Int32)
      nameWithType:
        CSharp: GenrPopulation.Shuffle_Integer(Int32, Int32)
        VB: GenrPopulation.Shuffle_Integer(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<int> Shuffle_Integer(int min, int max)
          VB: Public Function Shuffle_Integer(min As Integer, max As Integer) As Population(Of Integer)
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Int32}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
      language: CSharp
      name:
        CSharp: Binary_Char(Int32)
        VB: Binary_Char(Int32)
      nameWithType:
        CSharp: GenrPopulation.Binary_Char(Int32)
        VB: GenrPopulation.Binary_Char(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<char> Binary_Char(int size)
          VB: Public Function Binary_Char(size As Integer) As Population(Of Char)
        parameters:
        - id: size
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Char}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rand_Char(Int32, Int32, Int32)
        VB: Rand_Char(Int32, Int32, Int32)
      nameWithType:
        CSharp: GenrPopulation.Rand_Char(Int32, Int32, Int32)
        VB: GenrPopulation.Rand_Char(Int32, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population<char> Rand_Char(int size, int start, int end)
          VB: Public Function Rand_Char(size As Integer, start As Integer, end As Integer) As Population(Of Char)
        parameters:
        - id: size
          type: System.Int32
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Char}
      overload: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.GenrPopulation.SizePop
      commentId: P:Laga.GeneticAlgorithm.GenrPopulation.SizePop
      language: CSharp
      name:
        CSharp: SizePop
        VB: SizePop
      nameWithType:
        CSharp: GenrPopulation.SizePop
        VB: GenrPopulation.SizePop
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.GenrPopulation.SizePop
        VB: Laga.GeneticAlgorithm.GenrPopulation.SizePop
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int SizePop { get; set; }
          VB: Public Property SizePop As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Laga.GeneticAlgorithm.GenrPopulation.SizePop*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.Mutation
    commentId: T:Laga.GeneticAlgorithm.Mutation
    language: CSharp
    name:
      CSharp: Mutation
      VB: Mutation
    nameWithType:
      CSharp: Mutation
      VB: Mutation
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.Mutation
      VB: Laga.GeneticAlgorithm.Mutation
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Mutation
        VB: Public Class Mutation
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)
      language: CSharp
      name:
        CSharp: Mutation(Single)
        VB: Mutation(Single)
      nameWithType:
        CSharp: Mutation.Mutation(Single)
        VB: Mutation.Mutation(Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.Mutation(System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.Mutation(System.Single)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Mutation(float MutationRate)
          VB: Public Sub New(MutationRate As Single)
        parameters:
        - id: MutationRate
          type: System.Single
      overload: Laga.GeneticAlgorithm.Mutation.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CharMutation(Population<Char>, Single, Int32, Int32)
        VB: CharMutation(Population(Of Char), Single, Int32, Int32)
      nameWithType:
        CSharp: Mutation.CharMutation(Population<Char>, Single, Int32, Int32)
        VB: Mutation.CharMutation(Population(Of Char), Single, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population<System.Char>, System.Single, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population(Of System.Char), System.Single, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<char> CharMutation(Population<char> population, float percentChrom, int start, int end)
          VB: Public Shared Function CharMutation(population As Population(Of Char), percentChrom As Single, start As Integer, end As Integer) As Population(Of Char)
        parameters:
        - id: population
          type: Laga.GeneticAlgorithm.Population{System.Char}
        - id: percentChrom
          type: System.Single
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{System.Char}
      overload: Laga.GeneticAlgorithm.Mutation.CharMutation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
      commentId: M:Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Number(Population<Double>, Single, Double, Double)
        VB: Number(Population(Of Double), Single, Double, Double)
      nameWithType:
        CSharp: Mutation.Number(Population<Double>, Single, Double, Double)
        VB: Mutation.Number(Population(Of Double), Single, Double, Double)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population<System.Double>, System.Single, System.Double, System.Double)
        VB: Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population(Of System.Double), System.Single, System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<double> Number(Population<double> population, float MutationRate, double min, double max)
          VB: Public Shared Function Number(population As Population(Of Double), MutationRate As Single, min As Double, max As Double) As Population(Of Double)
        parameters:
        - id: population
          type: Laga.GeneticAlgorithm.Population{System.Double}
        - id: MutationRate
          type: System.Single
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: Laga.GeneticAlgorithm.Population{System.Double}
      overload: Laga.GeneticAlgorithm.Mutation.Number*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)
      language: CSharp
      name:
        CSharp: MutationSwap(Object[][], Single)
        VB: MutationSwap(Object()(), Single)
      nameWithType:
        CSharp: Mutation.MutationSwap(Object[][], Single)
        VB: Mutation.MutationSwap(Object()(), Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][], System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object()(), System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] MutationSwap(object[][] pop, float percentChrom)
          VB: Public Function MutationSwap(pop As Object()(), percentChrom As Single) As Object()()
        parameters:
        - id: pop
          type: System.Object[][]
        - id: percentChrom
          type: System.Single
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.Mutation.MutationSwap*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)
      language: CSharp
      name:
        CSharp: NumbMutation(Double[][], Double, Double, Single)
        VB: NumbMutation(Double()(), Double, Double, Single)
      nameWithType:
        CSharp: Mutation.NumbMutation(Double[][], Double, Double, Single)
        VB: Mutation.NumbMutation(Double()(), Double, Double, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][], System.Double, System.Double, System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double()(), System.Double, System.Double, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] NumbMutation(double[][] pop, double min, double max, float percentChrom)
          VB: Public Function NumbMutation(pop As Double()(), min As Double, max As Double, percentChrom As Single) As Double()()
        parameters:
        - id: pop
          type: System.Double[][]
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        - id: percentChrom
          type: System.Single
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: NumbMutation(Single[][], Single, Single, Single)
        VB: NumbMutation(Single()(), Single, Single, Single)
      nameWithType:
        CSharp: Mutation.NumbMutation(Single[][], Single, Single, Single)
        VB: Mutation.NumbMutation(Single()(), Single, Single, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][], System.Single, System.Single, System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single()(), System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] NumbMutation(float[][] pop, float min, float max, float percentChrom)
          VB: Public Function NumbMutation(pop As Single()(), min As Single, max As Single, percentChrom As Single) As Single()()
        parameters:
        - id: pop
          type: System.Single[][]
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        - id: percentChrom
          type: System.Single
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: NumbMutation(Int32[][], Int32, Int32, Single)
        VB: NumbMutation(Int32()(), Int32, Int32, Single)
      nameWithType:
        CSharp: Mutation.NumbMutation(Int32[][], Int32, Int32, Single)
        VB: Mutation.NumbMutation(Int32()(), Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][], System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32()(), System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] NumbMutation(int[][] pop, int min, int max, float percentChrom)
          VB: Public Function NumbMutation(pop As Integer()(), min As Integer, max As Integer, percentChrom As Single) As Integer()()
        parameters:
        - id: pop
          type: System.Int32[][]
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        - id: percentChrom
          type: System.Single
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.Mutation.NumbMutation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)
      commentId: M:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)
      language: CSharp
      name:
        CSharp: BinaryCharMutation(Char[][], Single)
        VB: BinaryCharMutation(Char()(), Single)
      nameWithType:
        CSharp: Mutation.BinaryCharMutation(Char[][], Single)
        VB: Mutation.BinaryCharMutation(Char()(), Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][], System.Single)
        VB: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char()(), System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] BinaryCharMutation(char[][] pop, float ChroPercent)
          VB: Public Function BinaryCharMutation(pop As Char()(), ChroPercent As Single) As Char()()
        parameters:
        - id: pop
          type: System.Char[][]
        - id: ChroPercent
          type: System.Single
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CharMutation(Char[][], Single, Int32, Int32)
        VB: CharMutation(Char()(), Single, Int32, Int32)
      nameWithType:
        CSharp: Mutation.CharMutation(Char[][], Single, Int32, Int32)
        VB: Mutation.CharMutation(Char()(), Single, Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][], System.Single, System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char()(), System.Single, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] CharMutation(char[][] pop, float ChroPercent, int start, int end)
          VB: Public Function CharMutation(pop As Char()(), ChroPercent As Single, start As Integer, end As Integer) As Char()()
        parameters:
        - id: pop
          type: System.Char[][]
        - id: ChroPercent
          type: System.Single
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.Mutation.CharMutation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.NaturalSelection`1
    commentId: T:Laga.GeneticAlgorithm.NaturalSelection`1
    language: CSharp
    name:
      CSharp: NaturalSelection<T>
      VB: NaturalSelection(Of T)
    nameWithType:
      CSharp: NaturalSelection<T>
      VB: NaturalSelection(Of T)
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>
      VB: Laga.GeneticAlgorithm.NaturalSelection(Of T)
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class NaturalSelection<T>
        VB: Public Class NaturalSelection(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
      language: CSharp
      name:
        CSharp: NaturalSelection()
        VB: NaturalSelection()
      nameWithType:
        CSharp: NaturalSelection<T>.NaturalSelection()
        VB: NaturalSelection(Of T).NaturalSelection()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.NaturalSelection()
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).NaturalSelection()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public NaturalSelection()
          VB: Public Sub New
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Population<T>, Int32)
        VB: RouletteWheel(Population(Of T), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Population<T>, Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Population(Of T), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(Laga.GeneticAlgorithm.Population<T>, System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<T> RouletteWheel(Population<T> population, int maxItem)
          VB: Public Shared Function RouletteWheel(population As Population(Of T), maxItem As Integer) As Population(Of T)
        parameters:
        - id: population
          type: Laga.GeneticAlgorithm.Population{{T}}
        - id: maxItem
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{{T}}
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population{`0},System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheelNonPolinomicMin2(Population<T>, Int32)
        VB: RouletteWheelNonPolinomicMin2(Population(Of T), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelNonPolinomicMin2(Population<T>, Int32)
        VB: NaturalSelection(Of T).RouletteWheelNonPolinomicMin2(Population(Of T), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population<T>, System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin2(Laga.GeneticAlgorithm.Population(Of T), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<T> RouletteWheelNonPolinomicMin2(Population<T> population, int maxItem)
          VB: Public Shared Function RouletteWheelNonPolinomicMin2(population As Population(Of T), maxItem As Integer) As Population(Of T)
        parameters:
        - id: population
          type: Laga.GeneticAlgorithm.Population{{T}}
        - id: maxItem
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{{T}}
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheelNonPolinomicMin(Population<T>, Single[], Int32)
        VB: RouletteWheelNonPolinomicMin(Population(Of T), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Population<T>, Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Population(Of T), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population<T>, System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population(Of T), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Population<T> RouletteWheelNonPolinomicMin(Population<T> population, float[] arrFitness, int maxItem)
          VB: Public Shared Function RouletteWheelNonPolinomicMin(population As Population(Of T), arrFitness As Single(), maxItem As Integer) As Population(Of T)
        parameters:
        - id: population
          type: Laga.GeneticAlgorithm.Population{{T}}
        - id: arrFitness
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Population{{T}}
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)
      language: CSharp
      name:
        CSharp: Elitism(Object[][], Int32)
        VB: Elitism(Object()(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.Elitism(Object[][], Int32)
        VB: NaturalSelection(Of T).Elitism(Object()(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Object[][], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Object()(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] Elitism(object[][] srtPopulation, int count)
          VB: Public Function Elitism(srtPopulation As Object()(), count As Integer) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: count
          type: System.Int32
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)
      language: CSharp
      name:
        CSharp: Elitism(Double[][], Int32)
        VB: Elitism(Double()(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.Elitism(Double[][], Int32)
        VB: NaturalSelection(Of T).Elitism(Double()(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Double[][], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Double()(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] Elitism(double[][] srtPopulation, int count)
          VB: Public Function Elitism(srtPopulation As Double()(), count As Integer) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: count
          type: System.Int32
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)
      language: CSharp
      name:
        CSharp: Elitism(Single[][], Int32)
        VB: Elitism(Single()(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.Elitism(Single[][], Int32)
        VB: NaturalSelection(Of T).Elitism(Single()(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Single[][], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Single()(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] Elitism(float[][] srtPopulation, int count)
          VB: Public Function Elitism(srtPopulation As Single()(), count As Integer) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: count
          type: System.Int32
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)
      language: CSharp
      name:
        CSharp: Elitism(Int32[][], Int32)
        VB: Elitism(Int32()(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.Elitism(Int32[][], Int32)
        VB: NaturalSelection(Of T).Elitism(Int32()(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Int32[][], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Int32()(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] Elitism(int[][] srtPopulation, int count)
          VB: Public Function Elitism(srtPopulation As Integer()(), count As Integer) As Integer()()
        parameters:
        - id: srtPopulation
          type: System.Int32[][]
        - id: count
          type: System.Int32
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)
      language: CSharp
      name:
        CSharp: Elitism(Char[][], Int32)
        VB: Elitism(Char()(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.Elitism(Char[][], Int32)
        VB: NaturalSelection(Of T).Elitism(Char()(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism(System.Char[][], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism(System.Char()(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] Elitism(char[][] srtPopulation, int count)
          VB: Public Function Elitism(srtPopulation As Char()(), count As Integer) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: count
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheelNonPolinomicMin(Object[][], Int32[], Int32)
        VB: RouletteWheelNonPolinomicMin(Object()(), Int32(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Object[][], Int32[], Int32)
        VB: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Object()(), Int32(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Object[][], System.Int32[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Object()(), System.Int32(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] RouletteWheelNonPolinomicMin(object[][] srtPopulation, int[] results, int maxItem)
          VB: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Object()(), results As Integer(), maxItem As Integer) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: results
          type: System.Int32[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheelNonPolinomicMin(Double[][], Single[], Int32)
        VB: RouletteWheelNonPolinomicMin(Double()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Double[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Double()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Double[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Double()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] RouletteWheelNonPolinomicMin(double[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Double()(), results As Single(), maxItem As Integer) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheelNonPolinomicMin(Char[][], Single[], Int32)
        VB: RouletteWheelNonPolinomicMin(Char()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelNonPolinomicMin(Char[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheelNonPolinomicMin(Char()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin(System.Char[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin(System.Char()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] RouletteWheelNonPolinomicMin(char[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheelNonPolinomicMin(srtPopulation As Char()(), results As Single(), maxItem As Integer) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Object[][], Single[], Int32)
        VB: RouletteWheel(Object()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Object[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Object()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Object[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Object()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] RouletteWheel(object[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Object()(), results As Single(), maxItem As Integer) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Double[][], Int32[], Int32)
        VB: RouletteWheel(Double()(), Int32(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Double[][], Int32[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Double()(), Int32(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Double[][], System.Int32[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Double()(), System.Int32(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] RouletteWheel(double[][] srtPopulation, int[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Double()(), results As Integer(), maxItem As Integer) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: results
          type: System.Int32[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Single[][], Single[], Int32)
        VB: RouletteWheel(Single()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Single[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Single()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Single[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Single()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] RouletteWheel(float[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Single()(), results As Single(), maxItem As Integer) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Single[][], Int32[], Int32)
        VB: RouletteWheel(Single()(), Int32(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Single[][], Int32[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Single()(), Int32(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Single[][], System.Int32[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Single()(), System.Int32(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] RouletteWheel(float[][] srtPopulation, int[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Single()(), results As Integer(), maxItem As Integer) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: results
          type: System.Int32[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Int32[][], Single[], Int32)
        VB: RouletteWheel(Int32()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Int32[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Int32()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Int32[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Int32()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] RouletteWheel(int[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Integer()(), results As Single(), maxItem As Integer) As Integer()()
        parameters:
        - id: srtPopulation
          type: System.Int32[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Char[][], Single[], Int32)
        VB: RouletteWheel(Char()(), Single(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Char[][], Single[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Char()(), Single(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Char[][], System.Single[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Char()(), System.Single(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] RouletteWheel(char[][] srtPopulation, float[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Char()(), results As Single(), maxItem As Integer) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: results
          type: System.Single[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: RouletteWheel(Char[][], Int32[], Int32)
        VB: RouletteWheel(Char()(), Int32(), Int32)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheel(Char[][], Int32[], Int32)
        VB: NaturalSelection(Of T).RouletteWheel(Char()(), Int32(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel(System.Char[][], System.Int32[], System.Int32)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel(System.Char()(), System.Int32(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] RouletteWheel(char[][] srtPopulation, int[] results, int maxItem)
          VB: Public Function RouletteWheel(srtPopulation As Char()(), results As Integer(), maxItem As Integer) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: results
          type: System.Int32[]
        - id: maxItem
          type: System.Int32
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RouletteWheelSigmoidal(Object[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: RouletteWheelSigmoidal(Object()(), Int32, Int32, Int32, Int32, Int32, Single)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelSigmoidal(Object[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: NaturalSelection(Of T).RouletteWheelSigmoidal(Object()(), Int32, Int32, Int32, Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Object[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Object()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] RouletteWheelSigmoidal(object[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
          VB: Public Function RouletteWheelSigmoidal(srtPopulation As Object()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: sizeRoulette
          type: System.Int32
        - id: A1
          type: System.Int32
        - id: A2
          type: System.Int32
        - id: B1
          type: System.Int32
        - id: B2
          type: System.Int32
        - id: s
          type: System.Single
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RouletteWheelSigmoidal(Double[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: RouletteWheelSigmoidal(Double()(), Int32, Int32, Int32, Int32, Int32, Single)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelSigmoidal(Double[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: NaturalSelection(Of T).RouletteWheelSigmoidal(Double()(), Int32, Int32, Int32, Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Double[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Double()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] RouletteWheelSigmoidal(double[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
          VB: Public Function RouletteWheelSigmoidal(srtPopulation As Double()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: sizeRoulette
          type: System.Int32
        - id: A1
          type: System.Int32
        - id: A2
          type: System.Int32
        - id: B1
          type: System.Int32
        - id: B2
          type: System.Int32
        - id: s
          type: System.Single
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RouletteWheelSigmoidal(Single[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: RouletteWheelSigmoidal(Single()(), Int32, Int32, Int32, Int32, Int32, Single)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelSigmoidal(Single[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: NaturalSelection(Of T).RouletteWheelSigmoidal(Single()(), Int32, Int32, Int32, Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Single[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Single()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] RouletteWheelSigmoidal(float[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
          VB: Public Function RouletteWheelSigmoidal(srtPopulation As Single()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: sizeRoulette
          type: System.Int32
        - id: A1
          type: System.Int32
        - id: A2
          type: System.Int32
        - id: B1
          type: System.Int32
        - id: B2
          type: System.Int32
        - id: s
          type: System.Single
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RouletteWheelSigmoidal(Char[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: RouletteWheelSigmoidal(Char()(), Int32, Int32, Int32, Int32, Int32, Single)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelSigmoidal(Char[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: NaturalSelection(Of T).RouletteWheelSigmoidal(Char()(), Int32, Int32, Int32, Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Char[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Char()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] RouletteWheelSigmoidal(char[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
          VB: Public Function RouletteWheelSigmoidal(srtPopulation As Char()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: sizeRoulette
          type: System.Int32
        - id: A1
          type: System.Int32
        - id: A2
          type: System.Int32
        - id: B1
          type: System.Int32
        - id: B2
          type: System.Int32
        - id: s
          type: System.Single
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RouletteWheelSigmoidal(Int32[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: RouletteWheelSigmoidal(Int32()(), Int32, Int32, Int32, Int32, Int32, Single)
      nameWithType:
        CSharp: NaturalSelection<T>.RouletteWheelSigmoidal(Int32[][], Int32, Int32, Int32, Int32, Int32, Single)
        VB: NaturalSelection(Of T).RouletteWheelSigmoidal(Int32()(), Int32, Int32, Int32, Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal(System.Int32[][], System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal(System.Int32()(), System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] RouletteWheelSigmoidal(int[][] srtPopulation, int sizeRoulette, int A1, int A2, int B1, int B2, float s)
          VB: Public Function RouletteWheelSigmoidal(srtPopulation As Integer()(), sizeRoulette As Integer, A1 As Integer, A2 As Integer, B1 As Integer, B2 As Integer, s As Single) As Integer()()
        parameters:
        - id: srtPopulation
          type: System.Int32[][]
        - id: sizeRoulette
          type: System.Int32
        - id: A1
          type: System.Int32
        - id: A2
          type: System.Int32
        - id: B1
          type: System.Int32
        - id: B2
          type: System.Int32
        - id: s
          type: System.Single
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Object[][], Int32[], Int32, Int32, String)
        VB: TournamentSelection(Object()(), Int32(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Object[][], Int32[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Object()(), Int32(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Object[][], System.Int32[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Object()(), System.Int32(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] TournamentSelection(object[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Object()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: results
          type: System.Int32[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Object[][], Single[], Int32, Int32, String)
        VB: TournamentSelection(Object()(), Single(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Object[][], Single[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Object()(), Single(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Object[][], System.Single[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Object()(), System.Single(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public object[][] TournamentSelection(object[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Object()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Object()()
        parameters:
        - id: srtPopulation
          type: System.Object[][]
        - id: results
          type: System.Single[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Double[][], Single[], Int32, Int32, String)
        VB: TournamentSelection(Double()(), Single(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Double[][], Single[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Double()(), Single(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Double[][], System.Single[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Double()(), System.Single(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] TournamentSelection(double[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Double()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: results
          type: System.Single[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Double[][], Int32[], Int32, Int32, String)
        VB: TournamentSelection(Double()(), Int32(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Double[][], Int32[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Double()(), Int32(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Double[][], System.Int32[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Double()(), System.Int32(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double[][] TournamentSelection(double[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Double()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Double()()
        parameters:
        - id: srtPopulation
          type: System.Double[][]
        - id: results
          type: System.Int32[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Single[][], Single[], Int32, Int32, String)
        VB: TournamentSelection(Single()(), Single(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Single[][], Single[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Single()(), Single(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Single[][], System.Single[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Single()(), System.Single(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] TournamentSelection(float[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Single()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: results
          type: System.Single[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Single[][], Int32[], Int32, Int32, String)
        VB: TournamentSelection(Single()(), Int32(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Single[][], Int32[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Single()(), Int32(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Single[][], System.Int32[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Single()(), System.Int32(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public float[][] TournamentSelection(float[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Single()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Single()()
        parameters:
        - id: srtPopulation
          type: System.Single[][]
        - id: results
          type: System.Int32[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Int32[][], Single[], Int32, Int32, String)
        VB: TournamentSelection(Int32()(), Single(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Int32[][], Single[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Int32()(), Single(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Int32[][], System.Single[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Int32()(), System.Single(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] TournamentSelection(int[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Integer()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Integer()()
        parameters:
        - id: srtPopulation
          type: System.Int32[][]
        - id: results
          type: System.Single[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Int32[][], Int32[], Int32, Int32, String)
        VB: TournamentSelection(Int32()(), Int32(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Int32[][], Int32[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Int32()(), Int32(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Int32[][], System.Int32[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Int32()(), System.Int32(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int[][] TournamentSelection(int[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Integer()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Integer()()
        parameters:
        - id: srtPopulation
          type: System.Int32[][]
        - id: results
          type: System.Int32[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Char[][], Single[], Int32, Int32, String)
        VB: TournamentSelection(Char()(), Single(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Char[][], Single[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Char()(), Single(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Char[][], System.Single[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Char()(), System.Single(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] TournamentSelection(char[][] srtPopulation, float[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Char()(), results As Single(), numbTour As Integer, preasure As Integer, type As String) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: results
          type: System.Single[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
      commentId: M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: TournamentSelection(Char[][], Int32[], Int32, Int32, String)
        VB: TournamentSelection(Char()(), Int32(), Int32, Int32, String)
      nameWithType:
        CSharp: NaturalSelection<T>.TournamentSelection(Char[][], Int32[], Int32, Int32, String)
        VB: NaturalSelection(Of T).TournamentSelection(Char()(), Int32(), Int32, Int32, String)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection(System.Char[][], System.Int32[], System.Int32, System.Int32, System.String)
        VB: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection(System.Char()(), System.Int32(), System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public char[][] TournamentSelection(char[][] srtPopulation, int[] results, int numbTour, int preasure, string type)
          VB: Public Function TournamentSelection(srtPopulation As Char()(), results As Integer(), numbTour As Integer, preasure As Integer, type As String) As Char()()
        parameters:
        - id: srtPopulation
          type: System.Char[][]
        - id: results
          type: System.Int32[]
        - id: numbTour
          type: System.Int32
        - id: preasure
          type: System.Int32
        - id: type
          type: System.String
        return:
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.Population`1
    commentId: T:Laga.GeneticAlgorithm.Population`1
    language: CSharp
    name:
      CSharp: Population<T>
      VB: Population(Of T)
    nameWithType:
      CSharp: Population<T>
      VB: Population(Of T)
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.Population<T>
      VB: Laga.GeneticAlgorithm.Population(Of T)
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: 'public class Population<T> : IEnumerable'
        VB: >-
          Public Class Population(Of T)

              Implements IEnumerable
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: Population(Int32)
        VB: Population(Int32)
      nameWithType:
        CSharp: Population<T>.Population(Int32)
        VB: Population(Of T).Population(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Population(System.Int32)
        VB: Laga.GeneticAlgorithm.Population(Of T).Population(System.Int32)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Population(int SizePopulation)
          VB: Public Sub New(SizePopulation As Integer)
        parameters:
        - id: SizePopulation
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Population`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.Higher
      commentId: M:Laga.GeneticAlgorithm.Population`1.Higher
      language: CSharp
      name:
        CSharp: Higher()
        VB: Higher()
      nameWithType:
        CSharp: Population<T>.Higher()
        VB: Population(Of T).Higher()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Higher()
        VB: Laga.GeneticAlgorithm.Population(Of T).Higher()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<T> Higher()
          VB: Public Function Higher As Chromosome(Of T)
        return:
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
      overload: Laga.GeneticAlgorithm.Population`1.Higher*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})
      commentId: M:Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})
      language: CSharp
      name:
        CSharp: Add(Chromosome<T>)
        VB: Add(Chromosome(Of T))
      nameWithType:
        CSharp: Population<T>.Add(Chromosome<T>)
        VB: Population(Of T).Add(Chromosome(Of T))
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Add(Laga.GeneticAlgorithm.Chromosome<T>)
        VB: Laga.GeneticAlgorithm.Population(Of T).Add(Laga.GeneticAlgorithm.Chromosome(Of T))
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void Add(Chromosome<T> chromosome)
          VB: Public Sub Add(chromosome As Chromosome(Of T))
        parameters:
        - id: chromosome
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
      overload: Laga.GeneticAlgorithm.Population`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)
      language: CSharp
      name:
        CSharp: Delete(Int32)
        VB: Delete(Int32)
      nameWithType:
        CSharp: Population<T>.Delete(Int32)
        VB: Population(Of T).Delete(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Delete(System.Int32)
        VB: Laga.GeneticAlgorithm.Population(Of T).Delete(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void Delete(int index)
          VB: Public Sub Delete(index As Integer)
        parameters:
        - id: index
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Population`1.Delete*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.Lower
      commentId: M:Laga.GeneticAlgorithm.Population`1.Lower
      language: CSharp
      name:
        CSharp: Lower()
        VB: Lower()
      nameWithType:
        CSharp: Population<T>.Lower()
        VB: Population(Of T).Lower()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Lower()
        VB: Laga.GeneticAlgorithm.Population(Of T).Lower()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<T> Lower()
          VB: Public Function Lower As Chromosome(Of T)
        return:
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
      overload: Laga.GeneticAlgorithm.Population`1.Lower*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)
      language: CSharp
      name:
        CSharp: GetChromosome(Int32)
        VB: GetChromosome(Int32)
      nameWithType:
        CSharp: Population<T>.GetChromosome(Int32)
        VB: Population(Of T).GetChromosome(Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.GetChromosome(System.Int32)
        VB: Laga.GeneticAlgorithm.Population(Of T).GetChromosome(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Chromosome<T> GetChromosome(int index)
          VB: Public Function GetChromosome(index As Integer) As Chromosome(Of T)
        parameters:
        - id: index
          type: System.Int32
        return:
          type: Laga.GeneticAlgorithm.Chromosome{{T}}
      overload: Laga.GeneticAlgorithm.Population`1.GetChromosome*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.FitnessAverage
      commentId: M:Laga.GeneticAlgorithm.Population`1.FitnessAverage
      language: CSharp
      name:
        CSharp: FitnessAverage()
        VB: FitnessAverage()
      nameWithType:
        CSharp: Population<T>.FitnessAverage()
        VB: Population(Of T).FitnessAverage()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.FitnessAverage()
        VB: Laga.GeneticAlgorithm.Population(Of T).FitnessAverage()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double FitnessAverage()
          VB: Public Function FitnessAverage As Double
        return:
          type: System.Double
      overload: Laga.GeneticAlgorithm.Population`1.FitnessAverage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.GetEnumerator
      commentId: M:Laga.GeneticAlgorithm.Population`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: Population<T>.GetEnumerator()
        VB: Population(Of T).GetEnumerator()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.GetEnumerator()
        VB: Laga.GeneticAlgorithm.Population(Of T).GetEnumerator()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IEnumerator GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: Laga.GeneticAlgorithm.Population`1.GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.Population`1.ToString
      commentId: M:Laga.GeneticAlgorithm.Population`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Population<T>.ToString()
        VB: Population(Of T).ToString()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.ToString()
        VB: Laga.GeneticAlgorithm.Population(Of T).ToString()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Laga.GeneticAlgorithm.Population`1.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Laga.GeneticAlgorithm.Population`1.Count
      commentId: P:Laga.GeneticAlgorithm.Population`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: Population<T>.Count
        VB: Population(Of T).Count
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Population<T>.Count
        VB: Laga.GeneticAlgorithm.Population(Of T).Count
      type: Property
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Population`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Laga.GeneticAlgorithm.RankingSort
    commentId: T:Laga.GeneticAlgorithm.RankingSort
    language: CSharp
    name:
      CSharp: RankingSort
      VB: RankingSort
    nameWithType:
      CSharp: RankingSort
      VB: RankingSort
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.RankingSort
      VB: Laga.GeneticAlgorithm.RankingSort
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class RankingSort
        VB: Public Class RankingSort
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.GeneticAlgorithm.RankingSort.#ctor
      commentId: M:Laga.GeneticAlgorithm.RankingSort.#ctor
      language: CSharp
      name:
        CSharp: RankingSort()
        VB: RankingSort()
      nameWithType:
        CSharp: RankingSort.RankingSort()
        VB: RankingSort.RankingSort()
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.RankingSort()
        VB: Laga.GeneticAlgorithm.RankingSort.RankingSort()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public RankingSort()
          VB: Public Sub New
      overload: Laga.GeneticAlgorithm.RankingSort.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Single[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Single[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Object[][], Single[], Boolean)
        VB: BidirectionalBubbleSort(Object()(), Single(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Object[][], Single[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Object()(), Single(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][], System.Single[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object()(), System.Single(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(object[][] population, float[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Object()(), arrResults As Single(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Object[][]
        - id: arrResults
          type: System.Single[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Int32[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Int32[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Object[][], Int32[], Boolean)
        VB: BidirectionalBubbleSort(Object()(), Int32(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Object[][], Int32[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Object()(), Int32(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][], System.Int32[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object()(), System.Int32(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(object[][] population, int[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Object()(), arrResults As Integer(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Object[][]
        - id: arrResults
          type: System.Int32[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Single[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Single[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Double[][], Single[], Boolean)
        VB: BidirectionalBubbleSort(Double()(), Single(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Double[][], Single[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Double()(), Single(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][], System.Single[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double()(), System.Single(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(double[][] population, float[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Double()(), arrResults As Single(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Double[][]
        - id: arrResults
          type: System.Single[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Int32[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Int32[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Double[][], Int32[], Boolean)
        VB: BidirectionalBubbleSort(Double()(), Int32(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Double[][], Int32[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Double()(), Int32(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][], System.Int32[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double()(), System.Int32(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(double[][] population, int[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Double()(), arrResults As Integer(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Double[][]
        - id: arrResults
          type: System.Int32[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Single[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Single[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Single[][], Single[], Boolean)
        VB: BidirectionalBubbleSort(Single()(), Single(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Single[][], Single[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Single()(), Single(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][], System.Single[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single()(), System.Single(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(float[][] population, float[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Single()(), arrResults As Single(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Single[][]
        - id: arrResults
          type: System.Single[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Int32[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Int32[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Single[][], Int32[], Boolean)
        VB: BidirectionalBubbleSort(Single()(), Int32(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Single[][], Int32[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Single()(), Int32(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][], System.Int32[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single()(), System.Int32(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(float[][] population, int[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Single()(), arrResults As Integer(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Single[][]
        - id: arrResults
          type: System.Int32[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Single[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Single[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Int32[][], Single[], Boolean)
        VB: BidirectionalBubbleSort(Int32()(), Single(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Int32[][], Single[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Int32()(), Single(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][], System.Single[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32()(), System.Single(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(int[][] population, float[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Integer()(), arrResults As Single(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Int32[][]
        - id: arrResults
          type: System.Single[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Int32[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Int32[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Int32[][], Int32[], Boolean)
        VB: BidirectionalBubbleSort(Int32()(), Int32(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Int32[][], Int32[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Int32()(), Int32(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][], System.Int32[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32()(), System.Int32(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(int[][] population, int[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Integer()(), arrResults As Integer(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Int32[][]
        - id: arrResults
          type: System.Int32[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Single[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Single[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Char[][], Single[], Boolean)
        VB: BidirectionalBubbleSort(Char()(), Single(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Char[][], Single[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Char()(), Single(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][], System.Single[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char()(), System.Single(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(char[][] population, float[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Char()(), arrResults As Single(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Char[][]
        - id: arrResults
          type: System.Single[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Int32[],System.Boolean)
      commentId: M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Int32[],System.Boolean)
      language: CSharp
      name:
        CSharp: BidirectionalBubbleSort(Char[][], Int32[], Boolean)
        VB: BidirectionalBubbleSort(Char()(), Int32(), Boolean)
      nameWithType:
        CSharp: RankingSort.BidirectionalBubbleSort(Char[][], Int32[], Boolean)
        VB: RankingSort.BidirectionalBubbleSort(Char()(), Int32(), Boolean)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][], System.Int32[], System.Boolean)
        VB: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char()(), System.Int32(), System.Boolean)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void BidirectionalBubbleSort(char[][] population, int[] arrResults, bool minmax)
          VB: Public Sub BidirectionalBubbleSort(population As Char()(), arrResults As Integer(), minmax As Boolean)
        parameters:
        - id: population
          type: System.Char[][]
        - id: arrResults
          type: System.Int32[]
        - id: minmax
          type: System.Boolean
      overload: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Laga.GeneticAlgorithm.Tools
    commentId: T:Laga.GeneticAlgorithm.Tools
    language: CSharp
    name:
      CSharp: Tools
      VB: Tools
    nameWithType:
      CSharp: Tools
      VB: Tools
    qualifiedName:
      CSharp: Laga.GeneticAlgorithm.Tools
      VB: Laga.GeneticAlgorithm.Tools
    type: Class
    assemblies:
    - Laga
    namespace: Laga.GeneticAlgorithm
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public static class Tools
        VB: Public Module Tools
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Laga.GeneticAlgorithm.Tools.DataReport``1(System.Collections.Generic.List{``0})
      commentId: M:Laga.GeneticAlgorithm.Tools.DataReport``1(System.Collections.Generic.List{``0})
      language: CSharp
      name:
        CSharp: DataReport<T>(List<T>)
        VB: DataReport(Of T)(List(Of T))
      nameWithType:
        CSharp: Tools.DataReport<T>(List<T>)
        VB: Tools.DataReport(Of T)(List(Of T))
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.DataReport<T>(System.Collections.Generic.List<T>)
        VB: Laga.GeneticAlgorithm.Tools.DataReport(Of T)(System.Collections.Generic.List(Of T))
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static List<string> DataReport<T>(List<T> listValues)
          VB: Public Shared Function DataReport(Of T)(listValues As List(Of T)) As List(Of String)
        parameters:
        - id: listValues
          type: System.Collections.Generic.List{{T}}
        typeParameters:
        - id: T
        return:
          type: System.Collections.Generic.List{System.String}
      overload: Laga.GeneticAlgorithm.Tools.DataReport*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger``1(``0[])
      commentId: M:Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger``1(``0[])
      language: CSharp
      name:
        CSharp: BinaryChromosomeToInteger<T>(T[])
        VB: BinaryChromosomeToInteger(Of T)(T())
      nameWithType:
        CSharp: Tools.BinaryChromosomeToInteger<T>(T[])
        VB: Tools.BinaryChromosomeToInteger(Of T)(T())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger<T>(T[])
        VB: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger(Of T)(T())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static int BinaryChromosomeToInteger<T>(this T[] chromosome)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function BinaryChromosomeToInteger(Of T)(chromosome As T()) As Integer
        parameters:
        - id: chromosome
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: System.Int32
      overload: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Laga.GeneticAlgorithm.Tools.ExtractDNA``1(``0[],System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Tools.ExtractDNA``1(``0[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ExtractDNA<T>(T[], Int32, Int32)
        VB: ExtractDNA(Of T)(T(), Int32, Int32)
      nameWithType:
        CSharp: Tools.ExtractDNA<T>(T[], Int32, Int32)
        VB: Tools.ExtractDNA(Of T)(T(), Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ExtractDNA<T>(T[], System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.Tools.ExtractDNA(Of T)(T(), System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static T[] ExtractDNA<T>(this T[] chromosome, int index, int length)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ExtractDNA(Of T)(chromosome As T(), index As Integer, length As Integer) As T()
        parameters:
        - id: chromosome
          type: '{T}[]'
        - id: index
          type: System.Int32
        - id: length
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}[]'
      overload: Laga.GeneticAlgorithm.Tools.ExtractDNA*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.MinMaxValue``1(``0[])
      commentId: M:Laga.GeneticAlgorithm.Tools.MinMaxValue``1(``0[])
      language: CSharp
      name:
        CSharp: MinMaxValue<T>(T[])
        VB: MinMaxValue(Of T)(T())
      nameWithType:
        CSharp: Tools.MinMaxValue<T>(T[])
        VB: Tools.MinMaxValue(Of T)(T())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.MinMaxValue<T>(T[])
        VB: Laga.GeneticAlgorithm.Tools.MinMaxValue(Of T)(T())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static T[] MinMaxValue<T>(T[] genArray)
          VB: Public Shared Function MinMaxValue(Of T)(genArray As T()) As T()
        parameters:
        - id: genArray
          type: '{T}[]'
        typeParameters:
        - id: T
        return:
          type: '{T}[]'
      overload: Laga.GeneticAlgorithm.Tools.MinMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char[][])
      commentId: M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char[][])
      language: CSharp
      name:
        CSharp: ReversePopulation(Char[][])
        VB: ReversePopulation(Char()())
      nameWithType:
        CSharp: Tools.ReversePopulation(Char[][])
        VB: Tools.ReversePopulation(Char()())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char[][])
        VB: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char()())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void ReversePopulation(char[][] charPop)
          VB: Public Shared Sub ReversePopulation(charPop As Char()())
        parameters:
        - id: charPop
          type: System.Char[][]
      overload: Laga.GeneticAlgorithm.Tools.ReversePopulation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Prefix(System.String,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Tools.Prefix(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Prefix(String, Int32)
        VB: Prefix(String, Int32)
      nameWithType:
        CSharp: Tools.Prefix(String, Int32)
        VB: Tools.Prefix(String, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Prefix(System.String, System.Int32)
        VB: Laga.GeneticAlgorithm.Tools.Prefix(System.String, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Prefix(string prefix, int size)
          VB: Public Shared Function Prefix(prefix As String, size As Integer) As String()
        parameters:
        - id: prefix
          type: System.String
        - id: size
          type: System.Int32
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Prefix*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector[],System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector[],System.Int32)
      language: CSharp
      name:
        CSharp: Parse(Vector[], Int32)
        VB: Parse(Vector(), Int32)
      nameWithType:
        CSharp: Tools.Parse(Vector[], Int32)
        VB: Tools.Parse(Vector(), Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector[], System.Int32)
        VB: Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Parse(Vector[] points, int round)
          VB: Public Shared Function Parse(points As Vector(), round As Integer) As String()
        parameters:
        - id: points
          type: Laga.Geometry.Vector[]
        - id: round
          type: System.Int32
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Parse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ParseDblToFloat(System.Double,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Tools.ParseDblToFloat(System.Double,System.Int32)
      language: CSharp
      name:
        CSharp: ParseDblToFloat(Double, Int32)
        VB: ParseDblToFloat(Double, Int32)
      nameWithType:
        CSharp: Tools.ParseDblToFloat(Double, Int32)
        VB: Tools.ParseDblToFloat(Double, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ParseDblToFloat(System.Double, System.Int32)
        VB: Laga.GeneticAlgorithm.Tools.ParseDblToFloat(System.Double, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static float ParseDblToFloat(double dbl, int digits = 3)
          VB: Public Shared Function ParseDblToFloat(dbl As Double, digits As Integer = 3) As Single
        parameters:
        - id: dbl
          type: System.Double
        - id: digits
          type: System.Int32
        return:
          type: System.Single
      overload: Laga.GeneticAlgorithm.Tools.ParseDblToFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Parse(System.Double[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Parse(System.Double[])
      language: CSharp
      name:
        CSharp: Parse(Double[])
        VB: Parse(Double())
      nameWithType:
        CSharp: Tools.Parse(Double[])
        VB: Tools.Parse(Double())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Parse(System.Double[])
        VB: Laga.GeneticAlgorithm.Tools.Parse(System.Double())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Parse(double[] any)
          VB: Public Shared Function Parse(any As Double()) As String()
        parameters:
        - id: any
          type: System.Double[]
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Parse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Parse(System.Int32[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Parse(System.Int32[])
      language: CSharp
      name:
        CSharp: Parse(Int32[])
        VB: Parse(Int32())
      nameWithType:
        CSharp: Tools.Parse(Int32[])
        VB: Tools.Parse(Int32())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Parse(System.Int32[])
        VB: Laga.GeneticAlgorithm.Tools.Parse(System.Int32())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Parse(int[] any)
          VB: Public Shared Function Parse(any As Integer()) As String()
        parameters:
        - id: any
          type: System.Int32[]
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Parse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Parse(System.Single[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Parse(System.Single[])
      language: CSharp
      name:
        CSharp: Parse(Single[])
        VB: Parse(Single())
      nameWithType:
        CSharp: Tools.Parse(Single[])
        VB: Tools.Parse(Single())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Parse(System.Single[])
        VB: Laga.GeneticAlgorithm.Tools.Parse(System.Single())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Parse(float[] any)
          VB: Public Shared Function Parse(any As Single()) As String()
        parameters:
        - id: any
          type: System.Single[]
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Parse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Parse(System.Char[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Parse(System.Char[])
      language: CSharp
      name:
        CSharp: Parse(Char[])
        VB: Parse(Char())
      nameWithType:
        CSharp: Tools.Parse(Char[])
        VB: Tools.Parse(Char())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Parse(System.Char[])
        VB: Laga.GeneticAlgorithm.Tools.Parse(System.Char())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] Parse(char[] any)
          VB: Public Shared Function Parse(any As Char()) As String()
        parameters:
        - id: any
          type: System.Char[]
        return:
          type: System.String[]
      overload: Laga.GeneticAlgorithm.Tools.Parse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Reverse(System.Single[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Reverse(System.Single[])
      language: CSharp
      name:
        CSharp: Reverse(Single[])
        VB: Reverse(Single())
      nameWithType:
        CSharp: Tools.Reverse(Single[])
        VB: Tools.Reverse(Single())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Reverse(System.Single[])
        VB: Laga.GeneticAlgorithm.Tools.Reverse(System.Single())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void Reverse(float[] arrFloat)
          VB: Public Shared Sub Reverse(arrFloat As Single())
        parameters:
        - id: arrFloat
          type: System.Single[]
      overload: Laga.GeneticAlgorithm.Tools.Reverse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Reverse(System.Int32[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Reverse(System.Int32[])
      language: CSharp
      name:
        CSharp: Reverse(Int32[])
        VB: Reverse(Int32())
      nameWithType:
        CSharp: Tools.Reverse(Int32[])
        VB: Tools.Reverse(Int32())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Reverse(System.Int32[])
        VB: Laga.GeneticAlgorithm.Tools.Reverse(System.Int32())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void Reverse(int[] arrInt)
          VB: Public Shared Sub Reverse(arrInt As Integer())
        parameters:
        - id: arrInt
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.Tools.Reverse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Reverse(System.Double[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Reverse(System.Double[])
      language: CSharp
      name:
        CSharp: Reverse(Double[])
        VB: Reverse(Double())
      nameWithType:
        CSharp: Tools.Reverse(Double[])
        VB: Tools.Reverse(Double())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Reverse(System.Double[])
        VB: Laga.GeneticAlgorithm.Tools.Reverse(System.Double())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void Reverse(double[] arrDbl)
          VB: Public Shared Sub Reverse(arrDbl As Double())
        parameters:
        - id: arrDbl
          type: System.Double[]
      overload: Laga.GeneticAlgorithm.Tools.Reverse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32[][])
      commentId: M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32[][])
      language: CSharp
      name:
        CSharp: ReversePopulation(Int32[][])
        VB: ReversePopulation(Int32()())
      nameWithType:
        CSharp: Tools.ReversePopulation(Int32[][])
        VB: Tools.ReversePopulation(Int32()())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32[][])
        VB: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32()())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void ReversePopulation(int[][] intPop)
          VB: Public Shared Sub ReversePopulation(intPop As Integer()())
        parameters:
        - id: intPop
          type: System.Int32[][]
      overload: Laga.GeneticAlgorithm.Tools.ReversePopulation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double[][])
      commentId: M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double[][])
      language: CSharp
      name:
        CSharp: ReversePopulation(Double[][])
        VB: ReversePopulation(Double()())
      nameWithType:
        CSharp: Tools.ReversePopulation(Double[][])
        VB: Tools.ReversePopulation(Double()())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double[][])
        VB: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double()())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void ReversePopulation(double[][] dblPop)
          VB: Public Shared Sub ReversePopulation(dblPop As Double()())
        parameters:
        - id: dblPop
          type: System.Double[][]
      overload: Laga.GeneticAlgorithm.Tools.ReversePopulation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single[][])
      commentId: M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single[][])
      language: CSharp
      name:
        CSharp: ReversePopulation(Single[][])
        VB: ReversePopulation(Single()())
      nameWithType:
        CSharp: Tools.ReversePopulation(Single[][])
        VB: Tools.ReversePopulation(Single()())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single[][])
        VB: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single()())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void ReversePopulation(float[][] flPop)
          VB: Public Shared Sub ReversePopulation(flPop As Single()())
        parameters:
        - id: flPop
          type: System.Single[][]
      overload: Laga.GeneticAlgorithm.Tools.ReversePopulation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object[][])
      commentId: M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object[][])
      language: CSharp
      name:
        CSharp: ReversePopulation(Object[][])
        VB: ReversePopulation(Object()())
      nameWithType:
        CSharp: Tools.ReversePopulation(Object[][])
        VB: Tools.ReversePopulation(Object()())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object[][])
        VB: Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object()())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void ReversePopulation(object[][] objPop)
          VB: Public Shared Sub ReversePopulation(objPop As Object()())
        parameters:
        - id: objPop
          type: System.Object[][]
      overload: Laga.GeneticAlgorithm.Tools.ReversePopulation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32[])
      language: CSharp
      name:
        CSharp: Fisher_Yates(Int32[])
        VB: Fisher_Yates(Int32())
      nameWithType:
        CSharp: Tools.Fisher_Yates(Int32[])
        VB: Tools.Fisher_Yates(Int32())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32[])
        VB: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static int[] Fisher_Yates(int[] arrInt)
          VB: Public Shared Function Fisher_Yates(arrInt As Integer()) As Integer()
        parameters:
        - id: arrInt
          type: System.Int32[]
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.Tools.Fisher_Yates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Laga.GeneticAlgorithm.Tools.Fisher_Yates``1(``0[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Fisher_Yates``1(``0[])
      language: CSharp
      name:
        CSharp: Fisher_Yates<T>(T[])
        VB: Fisher_Yates(Of T)(T())
      nameWithType:
        CSharp: Tools.Fisher_Yates<T>(T[])
        VB: Tools.Fisher_Yates(Of T)(T())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Fisher_Yates<T>(T[])
        VB: Laga.GeneticAlgorithm.Tools.Fisher_Yates(Of T)(T())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static void Fisher_Yates<T>(this T[] arrData)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub Fisher_Yates(Of T)(arrData As T())
        parameters:
        - id: arrData
          type: '{T}[]'
        typeParameters:
        - id: T
      overload: Laga.GeneticAlgorithm.Tools.Fisher_Yates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object[])
      commentId: M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object[])
      language: CSharp
      name:
        CSharp: Fisher_Yates(Object[])
        VB: Fisher_Yates(Object())
      nameWithType:
        CSharp: Tools.Fisher_Yates(Object[])
        VB: Tools.Fisher_Yates(Object())
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object[])
        VB: Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object())
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static object[] Fisher_Yates(object[] arrObj)
          VB: Public Shared Function Fisher_Yates(arrObj As Object()) As Object()
        parameters:
        - id: arrObj
          type: System.Object[]
        return:
          type: System.Object[]
      overload: Laga.GeneticAlgorithm.Tools.Fisher_Yates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object[],System.Single)
      commentId: M:Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object[],System.Single)
      language: CSharp
      name:
        CSharp: Fisher_YatesPercent(Object[], Single)
        VB: Fisher_YatesPercent(Object(), Single)
      nameWithType:
        CSharp: Tools.Fisher_YatesPercent(Object[], Single)
        VB: Tools.Fisher_YatesPercent(Object(), Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object[], System.Single)
        VB: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object(), System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static object[] Fisher_YatesPercent(object[] arrObj, float percent)
          VB: Public Shared Function Fisher_YatesPercent(arrObj As Object(), percent As Single) As Object()
        parameters:
        - id: arrObj
          type: System.Object[]
        - id: percent
          type: System.Single
        return:
          type: System.Object[]
      overload: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)
      commentId: M:Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)
      language: CSharp
      name:
        CSharp: RandomCharBinary(Single)
        VB: RandomCharBinary(Single)
      nameWithType:
        CSharp: Tools.RandomCharBinary(Single)
        VB: Tools.RandomCharBinary(Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)
        VB: Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static char RandomCharBinary(float thershold = 0.5F)
          VB: Public Shared Function RandomCharBinary(thershold As Single = 0.5F) As Char
        parameters:
        - id: thershold
          type: System.Single
        return:
          type: System.Char
      overload: Laga.GeneticAlgorithm.Tools.RandomCharBinary*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32,System.Int32)
      commentId: M:Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: RandomChar(Int32, Int32)
        VB: RandomChar(Int32, Int32)
      nameWithType:
        CSharp: Tools.RandomChar(Int32, Int32)
        VB: Tools.RandomChar(Int32, Int32)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32, System.Int32)
        VB: Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static char RandomChar(int start, int end)
          VB: Public Shared Function RandomChar(start As Integer, end As Integer) As Char
        parameters:
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: System.Char
      overload: Laga.GeneticAlgorithm.Tools.RandomChar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32,System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: RandomInt(Int32, Int32, Single)
        VB: RandomInt(Int32, Int32, Single)
      nameWithType:
        CSharp: Tools.RandomInt(Int32, Int32, Single)
        VB: Tools.RandomInt(Int32, Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32, System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32, System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static int[] RandomInt(int min, int max, float percent = 1F)
          VB: Public Shared Function RandomInt(min As Integer, max As Integer, percent As Single = 1F) As Integer()
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        - id: percent
          type: System.Single
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.Tools.RandomInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32,System.Single)
      commentId: M:Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Mom_Dad(Int32, Single)
        VB: Mom_Dad(Int32, Single)
      nameWithType:
        CSharp: Tools.Mom_Dad(Int32, Single)
        VB: Tools.Mom_Dad(Int32, Single)
      qualifiedName:
        CSharp: Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32, System.Single)
        VB: Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.GeneticAlgorithm
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static int[] Mom_Dad(int lengthPop, float percent = 0.5F)
          VB: Public Shared Function Mom_Dad(lengthPop As Integer, percent As Single = 0.5F) As Integer()
        parameters:
        - id: lengthPop
          type: System.Int32
        - id: percent
          type: System.Single
        return:
          type: System.Int32[]
      overload: Laga.GeneticAlgorithm.Tools.Mom_Dad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Laga.Geometry
  commentId: N:Laga.Geometry
  language: CSharp
  name:
    CSharp: Laga.Geometry
    VB: Laga.Geometry
  nameWithType:
    CSharp: Laga.Geometry
    VB: Laga.Geometry
  qualifiedName:
    CSharp: Laga.Geometry
    VB: Laga.Geometry
  type: Namespace
  assemblies:
  - Laga
  modifiers: {}
  items:
  - id: Laga.Geometry.Line
    commentId: T:Laga.Geometry.Line
    language: CSharp
    name:
      CSharp: Line
      VB: Line
    nameWithType:
      CSharp: Line
      VB: Line
    qualifiedName:
      CSharp: Laga.Geometry.Line
      VB: Laga.Geometry.Line
    type: Class
    assemblies:
    - Laga
    namespace: Laga.Geometry
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Line
        VB: Public Class Line
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
      commentId: M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
      language: CSharp
      name:
        CSharp: Line(Vector, Vector, Double)
        VB: Line(Vector, Vector, Double)
      nameWithType:
        CSharp: Line.Line(Vector, Vector, Double)
        VB: Line.Line(Vector, Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Line.Line(Laga.Geometry.Vector, Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Line.Line(Laga.Geometry.Vector, Laga.Geometry.Vector, System.Double)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Line(Vector StartPoint, Vector Direction, double t)
          VB: Public Sub New(StartPoint As Vector, Direction As Vector, t As Double)
        parameters:
        - id: StartPoint
          type: Laga.Geometry.Vector
        - id: Direction
          type: Laga.Geometry.Vector
        - id: t
          type: System.Double
      overload: Laga.Geometry.Line.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Line(Vector, Vector)
        VB: Line(Vector, Vector)
      nameWithType:
        CSharp: Line.Line(Vector, Vector)
        VB: Line.Line(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Line.Line(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Line.Line(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Line(Vector StartPoint, Vector EndPoint)
          VB: Public Sub New(StartPoint As Vector, EndPoint As Vector)
        parameters:
        - id: StartPoint
          type: Laga.Geometry.Vector
        - id: EndPoint
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Line.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.#ctor
      commentId: M:Laga.Geometry.Line.#ctor
      language: CSharp
      name:
        CSharp: Line()
        VB: Line()
      nameWithType:
        CSharp: Line.Line()
        VB: Line.Line()
      qualifiedName:
        CSharp: Laga.Geometry.Line.Line()
        VB: Laga.Geometry.Line.Line()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Line()
          VB: Public Sub New
      overload: Laga.Geometry.Line.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line,System.Double)
      commentId: M:Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line,System.Double)
      language: CSharp
      name:
        CSharp: IsParallelTo(Line, Double)
        VB: IsParallelTo(Line, Double)
      nameWithType:
        CSharp: Line.IsParallelTo(Line, Double)
        VB: Line.IsParallelTo(Line, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line, System.Double)
        VB: Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsParallelTo(Line line, double tolerance = 0.001)
          VB: Public Function IsParallelTo(line As Line, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: line
          type: Laga.Geometry.Line
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Line.IsParallelTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line,System.Double)
      commentId: M:Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line,System.Double)
      language: CSharp
      name:
        CSharp: IsCoincidentTo(Line, Double)
        VB: IsCoincidentTo(Line, Double)
      nameWithType:
        CSharp: Line.IsCoincidentTo(Line, Double)
        VB: Line.IsCoincidentTo(Line, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line, System.Double)
        VB: Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsCoincidentTo(Line line, double tolerance = 0.001)
          VB: Public Function IsCoincidentTo(line As Line, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: line
          type: Laga.Geometry.Line
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Line.IsCoincidentTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.PointAt(System.Double)
      commentId: M:Laga.Geometry.Line.PointAt(System.Double)
      language: CSharp
      name:
        CSharp: PointAt(Double)
        VB: PointAt(Double)
      nameWithType:
        CSharp: Line.PointAt(Double)
        VB: Line.PointAt(Double)
      qualifiedName:
        CSharp: Laga.Geometry.Line.PointAt(System.Double)
        VB: Laga.Geometry.Line.PointAt(System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector PointAt(double t)
          VB: Public Function PointAt(t As Double) As Vector
        parameters:
        - id: t
          type: System.Double
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Line.PointAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@,System.Double)
      commentId: M:Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@,System.Double)
      language: CSharp
      name:
        CSharp: IntersectTo(Line, ref Vector, Double)
        VB: IntersectTo(Line, ByRef Vector, Double)
      nameWithType:
        CSharp: Line.IntersectTo(Line, ref Vector, Double)
        VB: Line.IntersectTo(Line, ByRef Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line, ref Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line, ByRef Laga.Geometry.Vector, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IntersectTo(Line line, ref Vector intersection, double tolerance = 0.001)
          VB: Public Function IntersectTo(line As Line, ByRef intersection As Vector, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: line
          type: Laga.Geometry.Line
        - id: intersection
          type: Laga.Geometry.Vector
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Line.IntersectTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line,Laga.Geometry.Vector@,Laga.Geometry.Vector@)
      commentId: M:Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line,Laga.Geometry.Vector@,Laga.Geometry.Vector@)
      language: CSharp
      name:
        CSharp: ClosestTo(Line, ref Vector, ref Vector)
        VB: ClosestTo(Line, ByRef Vector, ByRef Vector)
      nameWithType:
        CSharp: Line.ClosestTo(Line, ref Vector, ref Vector)
        VB: Line.ClosestTo(Line, ByRef Vector, ByRef Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line, ref Laga.Geometry.Vector, ref Laga.Geometry.Vector)
        VB: Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line, ByRef Laga.Geometry.Vector, ByRef Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool ClosestTo(Line line, ref Vector pointA, ref Vector pointB)
          VB: Public Function ClosestTo(line As Line, ByRef pointA As Vector, ByRef pointB As Vector) As Boolean
        parameters:
        - id: line
          type: Laga.Geometry.Line
        - id: pointA
          type: Laga.Geometry.Vector
        - id: pointB
          type: Laga.Geometry.Vector
        return:
          type: System.Boolean
      overload: Laga.Geometry.Line.ClosestTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Line.ToString
      commentId: M:Laga.Geometry.Line.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Line.ToString()
        VB: Line.ToString()
      qualifiedName:
        CSharp: Laga.Geometry.Line.ToString()
        VB: Laga.Geometry.Line.ToString()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Laga.Geometry.Line.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Laga.Geometry.Line.StartPoint
      commentId: P:Laga.Geometry.Line.StartPoint
      language: CSharp
      name:
        CSharp: StartPoint
        VB: StartPoint
      nameWithType:
        CSharp: Line.StartPoint
        VB: Line.StartPoint
      qualifiedName:
        CSharp: Laga.Geometry.Line.StartPoint
        VB: Laga.Geometry.Line.StartPoint
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector StartPoint { get; set; }
          VB: Public Property StartPoint As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Line.StartPoint*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.Geometry.Line.EndPoint
      commentId: P:Laga.Geometry.Line.EndPoint
      language: CSharp
      name:
        CSharp: EndPoint
        VB: EndPoint
      nameWithType:
        CSharp: Line.EndPoint
        VB: Line.EndPoint
      qualifiedName:
        CSharp: Laga.Geometry.Line.EndPoint
        VB: Laga.Geometry.Line.EndPoint
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector EndPoint { get; set; }
          VB: Public Property EndPoint As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Line.EndPoint*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.Geometry.Line.Direction
      commentId: P:Laga.Geometry.Line.Direction
      language: CSharp
      name:
        CSharp: Direction
        VB: Direction
      nameWithType:
        CSharp: Line.Direction
        VB: Line.Direction
      qualifiedName:
        CSharp: Laga.Geometry.Line.Direction
        VB: Laga.Geometry.Line.Direction
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector Direction { get; }
          VB: Public ReadOnly Property Direction As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Line.Direction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Line.Length
      commentId: P:Laga.Geometry.Line.Length
      language: CSharp
      name:
        CSharp: Length
        VB: Length
      nameWithType:
        CSharp: Line.Length
        VB: Line.Length
      qualifiedName:
        CSharp: Laga.Geometry.Line.Length
        VB: Laga.Geometry.Line.Length
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Length { get; }
          VB: Public ReadOnly Property Length As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Line.Length*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Laga.Geometry.Plane
    commentId: T:Laga.Geometry.Plane
    language: CSharp
    name:
      CSharp: Plane
      VB: Plane
    nameWithType:
      CSharp: Plane
      VB: Plane
    qualifiedName:
      CSharp: Laga.Geometry.Plane
      VB: Laga.Geometry.Plane
    type: Class
    assemblies:
    - Laga
    namespace: Laga.Geometry
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Plane
        VB: Public Class Plane
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Plane(Vector, Vector, Vector)
        VB: Plane(Vector, Vector, Vector)
      nameWithType:
        CSharp: Plane.Plane(Vector, Vector, Vector)
        VB: Plane.Plane(Vector, Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Plane(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Plane.Plane(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Plane(Vector OriginPoint, Vector VectorU, Vector VectorV)
          VB: Public Sub New(OriginPoint As Vector, VectorU As Vector, VectorV As Vector)
        parameters:
        - id: OriginPoint
          type: Laga.Geometry.Vector
        - id: VectorU
          type: Laga.Geometry.Vector
        - id: VectorV
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Plane(Double, Double, Double, Double)
        VB: Plane(Double, Double, Double, Double)
      nameWithType:
        CSharp: Plane.Plane(Double, Double, Double, Double)
        VB: Plane.Plane(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Plane(System.Double, System.Double, System.Double, System.Double)
        VB: Laga.Geometry.Plane.Plane(System.Double, System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Plane(double Ax, double By, double Cz, double D)
          VB: Public Sub New(Ax As Double, By As Double, Cz As Double, D As Double)
        parameters:
        - id: Ax
          type: System.Double
        - id: By
          type: System.Double
        - id: Cz
          type: System.Double
        - id: D
          type: System.Double
      overload: Laga.Geometry.Plane.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Plane(Vector, Vector)
        VB: Plane(Vector, Vector)
      nameWithType:
        CSharp: Plane.Plane(Vector, Vector)
        VB: Plane.Plane(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Plane(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Plane.Plane(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Plane(Vector VectorPX, Vector VectorNormal)
          VB: Public Sub New(VectorPX As Vector, VectorNormal As Vector)
        parameters:
        - id: VectorPX
          type: Laga.Geometry.Vector
        - id: VectorNormal
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.ToString
      commentId: M:Laga.Geometry.Plane.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Plane.ToString()
        VB: Plane.ToString()
      qualifiedName:
        CSharp: Laga.Geometry.Plane.ToString()
        VB: Laga.Geometry.Plane.ToString()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Laga.Geometry.Plane.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: DistanceTo(Vector)
        VB: DistanceTo(Vector)
      nameWithType:
        CSharp: Plane.DistanceTo(Vector)
        VB: Plane.DistanceTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double DistanceTo(Vector point)
          VB: Public Function DistanceTo(point As Vector) As Double
        parameters:
        - id: point
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Plane.DistanceTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.PointAt(System.Double,System.Double)
      commentId: M:Laga.Geometry.Plane.PointAt(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: PointAt(Double, Double)
        VB: PointAt(Double, Double)
      nameWithType:
        CSharp: Plane.PointAt(Double, Double)
        VB: Plane.PointAt(Double, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.PointAt(System.Double, System.Double)
        VB: Laga.Geometry.Plane.PointAt(System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector PointAt(double U, double V)
          VB: Public Function PointAt(U As Double, V As Double) As Vector
        parameters:
        - id: U
          type: System.Double
        - id: V
          type: System.Double
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.PointAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)
      commentId: M:Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)
      language: CSharp
      name:
        CSharp: IsParallelTo(Plane, Double)
        VB: IsParallelTo(Plane, Double)
      nameWithType:
        CSharp: Plane.IsParallelTo(Plane, Double)
        VB: Plane.IsParallelTo(Plane, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane, System.Double)
        VB: Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsParallelTo(Plane plane, double tolerance = 0.001)
          VB: Public Function IsParallelTo(plane As Plane, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: plane
          type: Laga.Geometry.Plane
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Plane.IsParallelTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)
      commentId: M:Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)
      language: CSharp
      name:
        CSharp: IsCoincidentTo(Plane, Double)
        VB: IsCoincidentTo(Plane, Double)
      nameWithType:
        CSharp: Plane.IsCoincidentTo(Plane, Double)
        VB: Plane.IsCoincidentTo(Plane, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane, System.Double)
        VB: Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsCoincidentTo(Plane plane, double tolerance = 0.001)
          VB: Public Function IsCoincidentTo(plane As Plane, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: plane
          type: Laga.Geometry.Plane
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Plane.IsCoincidentTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@)
      commentId: M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@)
      language: CSharp
      name:
        CSharp: IntersectTo(Line, ref Vector)
        VB: IntersectTo(Line, ByRef Vector)
      nameWithType:
        CSharp: Plane.IntersectTo(Line, ref Vector)
        VB: Plane.IntersectTo(Line, ByRef Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line, ref Laga.Geometry.Vector)
        VB: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line, ByRef Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IntersectTo(Line line, ref Vector intersection)
          VB: Public Function IntersectTo(line As Line, ByRef intersection As Vector) As Boolean
        parameters:
        - id: line
          type: Laga.Geometry.Line
        - id: intersection
          type: Laga.Geometry.Vector
        return:
          type: System.Boolean
      overload: Laga.Geometry.Plane.IntersectTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
      commentId: M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)
      language: CSharp
      name:
        CSharp: IntersectTo(Plane, ref Line, Double)
        VB: IntersectTo(Plane, ByRef Line, Double)
      nameWithType:
        CSharp: Plane.IntersectTo(Plane, ref Line, Double)
        VB: Plane.IntersectTo(Plane, ByRef Line, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane, ref Laga.Geometry.Line, System.Double)
        VB: Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane, ByRef Laga.Geometry.Line, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IntersectTo(Plane plane, ref Line intersection, double tolerance = 0.001)
          VB: Public Function IntersectTo(plane As Plane, ByRef intersection As Line, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: plane
          type: Laga.Geometry.Plane
        - id: intersection
          type: Laga.Geometry.Line
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Plane.IntersectTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Plane.Cz
      commentId: P:Laga.Geometry.Plane.Cz
      language: CSharp
      name:
        CSharp: Cz
        VB: Cz
      nameWithType:
        CSharp: Plane.Cz
        VB: Plane.Cz
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Cz
        VB: Laga.Geometry.Plane.Cz
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Cz { get; }
          VB: Public ReadOnly Property Cz As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Plane.Cz*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.By
      commentId: P:Laga.Geometry.Plane.By
      language: CSharp
      name:
        CSharp: By
        VB: By
      nameWithType:
        CSharp: Plane.By
        VB: Plane.By
      qualifiedName:
        CSharp: Laga.Geometry.Plane.By
        VB: Laga.Geometry.Plane.By
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double By { get; }
          VB: Public ReadOnly Property By As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Plane.By*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.Ax
      commentId: P:Laga.Geometry.Plane.Ax
      language: CSharp
      name:
        CSharp: Ax
        VB: Ax
      nameWithType:
        CSharp: Plane.Ax
        VB: Plane.Ax
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Ax
        VB: Laga.Geometry.Plane.Ax
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Ax { get; }
          VB: Public ReadOnly Property Ax As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Plane.Ax*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.Origin
      commentId: P:Laga.Geometry.Plane.Origin
      language: CSharp
      name:
        CSharp: Origin
        VB: Origin
      nameWithType:
        CSharp: Plane.Origin
        VB: Plane.Origin
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Origin
        VB: Laga.Geometry.Plane.Origin
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector Origin { get; }
          VB: Public ReadOnly Property Origin As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.Origin*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.Norm
      commentId: P:Laga.Geometry.Plane.Norm
      language: CSharp
      name:
        CSharp: Norm
        VB: Norm
      nameWithType:
        CSharp: Plane.Norm
        VB: Plane.Norm
      qualifiedName:
        CSharp: Laga.Geometry.Plane.Norm
        VB: Laga.Geometry.Plane.Norm
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector Norm { get; }
          VB: Public ReadOnly Property Norm As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.Norm*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.VectorU
      commentId: P:Laga.Geometry.Plane.VectorU
      language: CSharp
      name:
        CSharp: VectorU
        VB: VectorU
      nameWithType:
        CSharp: Plane.VectorU
        VB: Plane.VectorU
      qualifiedName:
        CSharp: Laga.Geometry.Plane.VectorU
        VB: Laga.Geometry.Plane.VectorU
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector VectorU { get; }
          VB: Public ReadOnly Property VectorU As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.VectorU*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.VectorV
      commentId: P:Laga.Geometry.Plane.VectorV
      language: CSharp
      name:
        CSharp: VectorV
        VB: VectorV
      nameWithType:
        CSharp: Plane.VectorV
        VB: Plane.VectorV
      qualifiedName:
        CSharp: Laga.Geometry.Plane.VectorV
        VB: Laga.Geometry.Plane.VectorV
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector VectorV { get; }
          VB: Public ReadOnly Property VectorV As Vector
        parameters: []
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Plane.VectorV*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.Geometry.Plane.ConstantTerm
      commentId: P:Laga.Geometry.Plane.ConstantTerm
      language: CSharp
      name:
        CSharp: ConstantTerm
        VB: ConstantTerm
      nameWithType:
        CSharp: Plane.ConstantTerm
        VB: Plane.ConstantTerm
      qualifiedName:
        CSharp: Laga.Geometry.Plane.ConstantTerm
        VB: Laga.Geometry.Plane.ConstantTerm
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double ConstantTerm { get; }
          VB: Public ReadOnly Property ConstantTerm As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Plane.ConstantTerm*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Laga.Geometry.Vector
    commentId: T:Laga.Geometry.Vector
    language: CSharp
    name:
      CSharp: Vector
      VB: Vector
    nameWithType:
      CSharp: Vector
      VB: Vector
    qualifiedName:
      CSharp: Laga.Geometry.Vector
      VB: Laga.Geometry.Vector
    type: Struct
    assemblies:
    - Laga
    namespace: Laga.Geometry
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public struct Vector
        VB: Public Structure Vector
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Laga.Geometry.Vector.#ctor(System.Double,System.Double)
      commentId: M:Laga.Geometry.Vector.#ctor(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Vector(Double, Double)
        VB: Vector(Double, Double)
      nameWithType:
        CSharp: Vector.Vector(Double, Double)
        VB: Vector.Vector(Double, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Vector(System.Double, System.Double)
        VB: Laga.Geometry.Vector.Vector(System.Double, System.Double)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector(double X, double Y)
          VB: Public Sub New(X As Double, Y As Double)
        parameters:
        - id: X
          type: System.Double
        - id: Y
          type: System.Double
      overload: Laga.Geometry.Vector.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)
      commentId: M:Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Vector(Double, Double, Double)
        VB: Vector(Double, Double, Double)
      nameWithType:
        CSharp: Vector.Vector(Double, Double, Double)
        VB: Vector.Vector(Double, Double, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Vector(System.Double, System.Double, System.Double)
        VB: Laga.Geometry.Vector.Vector(System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector(double X, double Y, double Z)
          VB: Public Sub New(X As Double, Y As Double, Z As Double)
        parameters:
        - id: X
          type: System.Double
        - id: Y
          type: System.Double
        - id: Z
          type: System.Double
      overload: Laga.Geometry.Vector.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.#ctor(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Vector(Vector)
        VB: Vector(Vector)
      nameWithType:
        CSharp: Vector.Vector(Vector)
        VB: Vector.Vector(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Vector(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.Vector(Laga.Geometry.Vector)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector(Vector vector)
          VB: Public Sub New(vector As Vector)
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: OrthogonalTo(Vector)
        VB: OrthogonalTo(Vector)
      nameWithType:
        CSharp: Vector.OrthogonalTo(Vector)
        VB: Vector.OrthogonalTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Vector OrthogonalTo(Vector vector)
          VB: Public Shared Function OrthogonalTo(vector As Vector) As Vector
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.OrthogonalTo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: CrossProduct(Vector, Vector)
        VB: CrossProduct(Vector, Vector)
      nameWithType:
        CSharp: Vector.CrossProduct(Vector, Vector)
        VB: Vector.CrossProduct(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Vector CrossProduct(Vector vectorA, Vector vectorB)
          VB: Public Shared Function CrossProduct(vectorA As Vector, vectorB As Vector) As Vector
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.CrossProduct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: CrossProductLength(Vector, Vector, Vector)
        VB: CrossProductLength(Vector, Vector, Vector)
      nameWithType:
        CSharp: Vector.CrossProductLength(Vector, Vector, Vector)
        VB: Vector.CrossProductLength(Vector, Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.CrossProductLength(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double CrossProductLength(Vector vectorA, Vector vectorB, Vector vectorC)
          VB: Public Shared Function CrossProductLength(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        - id: vectorC
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.CrossProductLength*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: ComponentProjectTo(Vector)
        VB: ComponentProjectTo(Vector)
      nameWithType:
        CSharp: Vector.ComponentProjectTo(Vector)
        VB: Vector.ComponentProjectTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector ComponentProjectTo(Vector vectorB)
          VB: Public Function ComponentProjectTo(vectorB As Vector) As Vector
        parameters:
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.ComponentProjectTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: ComponentOrthogonalTo(Vector)
        VB: ComponentOrthogonalTo(Vector)
      nameWithType:
        CSharp: Vector.ComponentOrthogonalTo(Vector)
        VB: Vector.ComponentOrthogonalTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Vector ComponentOrthogonalTo(Vector vectorB)
          VB: Public Function ComponentOrthogonalTo(vectorB As Vector) As Vector
        parameters:
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.ComponentOrthogonalTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.IsVectorCero(System.Double)
      commentId: M:Laga.Geometry.Vector.IsVectorCero(System.Double)
      language: CSharp
      name:
        CSharp: IsVectorCero(Double)
        VB: IsVectorCero(Double)
      nameWithType:
        CSharp: Vector.IsVectorCero(Double)
        VB: Vector.IsVectorCero(Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.IsVectorCero(System.Double)
        VB: Laga.Geometry.Vector.IsVectorCero(System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsVectorCero(double tolerance = 0.001)
          VB: Public Function IsVectorCero(tolerance As Double = 0.001) As Boolean
        parameters:
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Vector.IsVectorCero*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
      commentId: M:Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)
      language: CSharp
      name:
        CSharp: IsOrthogonalTo(Vector, Double)
        VB: IsOrthogonalTo(Vector, Double)
      nameWithType:
        CSharp: Vector.IsOrthogonalTo(Vector, Double)
        VB: Vector.IsOrthogonalTo(Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsOrthogonalTo(Vector vector, double tolerance = 0.001)
          VB: Public Function IsOrthogonalTo(vector As Vector, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Vector.IsOrthogonalTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)
      commentId: M:Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)
      language: CSharp
      name:
        CSharp: IsParallelTo(Vector, Double)
        VB: IsParallelTo(Vector, Double)
      nameWithType:
        CSharp: Vector.IsParallelTo(Vector, Double)
        VB: Vector.IsParallelTo(Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool IsParallelTo(Vector vector, double tolerance = 0.001)
          VB: Public Function IsParallelTo(vector As Vector, tolerance As Double = 0.001) As Boolean
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        - id: tolerance
          type: System.Double
        return:
          type: System.Boolean
      overload: Laga.Geometry.Vector.IsParallelTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: DotProduct(Vector, Vector)
        VB: DotProduct(Vector, Vector)
      nameWithType:
        CSharp: Vector.DotProduct(Vector, Vector)
        VB: Vector.DotProduct(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double DotProduct(Vector vectorA, Vector vectorB)
          VB: Public Shared Function DotProduct(vectorA As Vector, vectorB As Vector) As Double
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.DotProduct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: DotProduct(Vector, Vector, Vector)
        VB: DotProduct(Vector, Vector, Vector)
      nameWithType:
        CSharp: Vector.DotProduct(Vector, Vector, Vector)
        VB: Vector.DotProduct(Vector, Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double DotProduct(Vector vectorA, Vector vectorB, Vector vectorC)
          VB: Public Shared Function DotProduct(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        - id: vectorC
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.DotProduct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Angle(Vector, Vector)
        VB: Angle(Vector, Vector)
      nameWithType:
        CSharp: Vector.Angle(Vector, Vector)
        VB: Vector.Angle(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double Angle(Vector vectorA, Vector vectorB)
          VB: Public Shared Function Angle(vectorA As Vector, vectorB As Vector) As Double
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.Angle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Angle(Vector, Vector, Vector)
        VB: Angle(Vector, Vector, Vector)
      nameWithType:
        CSharp: Vector.Angle(Vector, Vector, Vector)
        VB: Vector.Angle(Vector, Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.Angle(Laga.Geometry.Vector, Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double Angle(Vector vectorA, Vector vectorB, Vector vectorC)
          VB: Public Shared Function Angle(vectorA As Vector, vectorB As Vector, vectorC As Vector) As Double
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        - id: vectorC
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.Angle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: DistanceTo(Vector)
        VB: DistanceTo(Vector)
      nameWithType:
        CSharp: Vector.DistanceTo(Vector)
        VB: Vector.DistanceTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double DistanceTo(Vector vector)
          VB: Public Function DistanceTo(vector As Vector) As Double
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.DistanceTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.Normalize
      commentId: M:Laga.Geometry.Vector.Normalize
      language: CSharp
      name:
        CSharp: Normalize()
        VB: Normalize()
      nameWithType:
        CSharp: Vector.Normalize()
        VB: Vector.Normalize()
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Normalize()
        VB: Laga.Geometry.Vector.Normalize()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void Normalize()
          VB: Public Sub Normalize
      overload: Laga.Geometry.Vector.Normalize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Addition(Vector, Vector)
        VB: Addition(Vector, Vector)
      nameWithType:
        CSharp: Vector.Addition(Vector, Vector)
        VB: Vector.Addition(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Addition(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.Addition(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Operator
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Vector operator +(Vector vectorA, Vector vectorB)
          VB: Public Shared Operator +(vectorA As Vector, vectorB As Vector) As Vector
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: Subtraction(Vector, Vector)
        VB: Subtraction(Vector, Vector)
      nameWithType:
        CSharp: Vector.Subtraction(Vector, Vector)
        VB: Vector.Subtraction(Vector, Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Subtraction(Laga.Geometry.Vector, Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.Subtraction(Laga.Geometry.Vector, Laga.Geometry.Vector)
      type: Operator
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Vector operator -(Vector vectorA, Vector vectorB)
          VB: Public Shared Operator -(vectorA As Vector, vectorB As Vector) As Vector
        parameters:
        - id: vectorA
          type: Laga.Geometry.Vector
        - id: vectorB
          type: Laga.Geometry.Vector
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)
      commentId: M:Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)
      language: CSharp
      name:
        CSharp: Multiply(Vector, Double)
        VB: Multiply(Vector, Double)
      nameWithType:
        CSharp: Vector.Multiply(Vector, Double)
        VB: Vector.Multiply(Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Multiply(Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Vector.Multiply(Laga.Geometry.Vector, System.Double)
      type: Operator
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Vector operator *(Vector vector, double factor)
          VB: Public Shared Operator *(vector As Vector, factor As Double) As Vector
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        - id: factor
          type: System.Double
        return:
          type: Laga.Geometry.Vector
      overload: Laga.Geometry.Vector.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.ToString
      commentId: M:Laga.Geometry.Vector.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Vector.ToString()
        VB: Vector.ToString()
      qualifiedName:
        CSharp: Laga.Geometry.Vector.ToString()
        VB: Laga.Geometry.Vector.ToString()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Laga.Geometry.Vector.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
      commentId: M:Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)
      language: CSharp
      name:
        CSharp: Interpolation(Vector, Vector, Double)
        VB: Interpolation(Vector, Vector, Double)
      nameWithType:
        CSharp: Vector.Interpolation(Vector, Vector, Double)
        VB: Vector.Interpolation(Vector, Vector, Double)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector, Laga.Geometry.Vector, System.Double)
        VB: Laga.Geometry.Vector.Interpolation(Laga.Geometry.Vector, Laga.Geometry.Vector, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static List<Vector> Interpolation(Vector pointA, Vector pointB, double span)
          VB: Public Shared Function Interpolation(pointA As Vector, pointB As Vector, span As Double) As List(Of Vector)
        parameters:
        - id: pointA
          type: Laga.Geometry.Vector
        - id: pointB
          type: Laga.Geometry.Vector
        - id: span
          type: System.Double
        return:
          type: System.Collections.Generic.List{Laga.Geometry.Vector}
      overload: Laga.Geometry.Vector.Interpolation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
      commentId: M:Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
      language: CSharp
      name:
        CSharp: EqualTo(Vector)
        VB: EqualTo(Vector)
      nameWithType:
        CSharp: Vector.EqualTo(Vector)
        VB: Vector.EqualTo(Vector)
      qualifiedName:
        CSharp: Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
        VB: Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public bool EqualTo(Vector vector)
          VB: Public Function EqualTo(vector As Vector) As Boolean
        parameters:
        - id: vector
          type: Laga.Geometry.Vector
        return:
          type: System.Boolean
      overload: Laga.Geometry.Vector.EqualTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.Geometry.Vector.X
      commentId: P:Laga.Geometry.Vector.X
      language: CSharp
      name:
        CSharp: X
        VB: X
      nameWithType:
        CSharp: Vector.X
        VB: Vector.X
      qualifiedName:
        CSharp: Laga.Geometry.Vector.X
        VB: Laga.Geometry.Vector.X
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double X { get; set; }
          VB: Public Property X As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.X*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.Geometry.Vector.Y
      commentId: P:Laga.Geometry.Vector.Y
      language: CSharp
      name:
        CSharp: Y
        VB: Y
      nameWithType:
        CSharp: Vector.Y
        VB: Vector.Y
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Y
        VB: Laga.Geometry.Vector.Y
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Y { get; set; }
          VB: Public Property Y As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.Y*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.Geometry.Vector.Z
      commentId: P:Laga.Geometry.Vector.Z
      language: CSharp
      name:
        CSharp: Z
        VB: Z
      nameWithType:
        CSharp: Vector.Z
        VB: Vector.Z
      qualifiedName:
        CSharp: Laga.Geometry.Vector.Z
        VB: Laga.Geometry.Vector.Z
      type: Property
      assemblies:
      - Laga
      namespace: Laga.Geometry
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public double Z { get; set; }
          VB: Public Property Z As Double
        parameters: []
        return:
          type: System.Double
      overload: Laga.Geometry.Vector.Z*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Laga.IO
  commentId: N:Laga.IO
  language: CSharp
  name:
    CSharp: Laga.IO
    VB: Laga.IO
  nameWithType:
    CSharp: Laga.IO
    VB: Laga.IO
  qualifiedName:
    CSharp: Laga.IO
    VB: Laga.IO
  type: Namespace
  assemblies:
  - Laga
  modifiers: {}
  items:
  - id: Laga.IO.IOCSV
    commentId: T:Laga.IO.IOCSV
    language: CSharp
    name:
      CSharp: IOCSV
      VB: IOCSV
    nameWithType:
      CSharp: IOCSV
      VB: IOCSV
    qualifiedName:
      CSharp: Laga.IO.IOCSV
      VB: Laga.IO.IOCSV
    type: Class
    assemblies:
    - Laga
    namespace: Laga.IO
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class IOCSV
        VB: Public Class IOCSV
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.IO.IOCSV.#ctor(System.String,System.String[],System.Collections.Generic.List{System.Collections.Generic.List{System.String}})
      commentId: M:Laga.IO.IOCSV.#ctor(System.String,System.String[],System.Collections.Generic.List{System.Collections.Generic.List{System.String}})
      language: CSharp
      name:
        CSharp: IOCSV(String, String[], List<List<String>>)
        VB: IOCSV(String, String(), List(Of List(Of String)))
      nameWithType:
        CSharp: IOCSV.IOCSV(String, String[], List<List<String>>)
        VB: IOCSV.IOCSV(String, String(), List(Of List(Of String)))
      qualifiedName:
        CSharp: Laga.IO.IOCSV.IOCSV(System.String, System.String[], System.Collections.Generic.List<System.Collections.Generic.List<System.String>>)
        VB: Laga.IO.IOCSV.IOCSV(System.String, System.String(), System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.String)))
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IOCSV(string FileName, string[] Features, List<List<string>> Data)
          VB: Public Sub New(FileName As String, Features As String(), Data As List(Of List(Of String)))
        parameters:
        - id: FileName
          type: System.String
        - id: Features
          type: System.String[]
        - id: Data
          type: System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
      overload: Laga.IO.IOCSV.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOCSV.#ctor(System.String,System.String[],Laga.GeneticAlgorithm.Population{System.String})
      commentId: M:Laga.IO.IOCSV.#ctor(System.String,System.String[],Laga.GeneticAlgorithm.Population{System.String})
      language: CSharp
      name:
        CSharp: IOCSV(String, String[], Population<String>)
        VB: IOCSV(String, String(), Population(Of String))
      nameWithType:
        CSharp: IOCSV.IOCSV(String, String[], Population<String>)
        VB: IOCSV.IOCSV(String, String(), Population(Of String))
      qualifiedName:
        CSharp: Laga.IO.IOCSV.IOCSV(System.String, System.String[], Laga.GeneticAlgorithm.Population<System.String>)
        VB: Laga.IO.IOCSV.IOCSV(System.String, System.String(), Laga.GeneticAlgorithm.Population(Of System.String))
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IOCSV(string FileName, string[] Features, Population<string> Data)
          VB: Public Sub New(FileName As String, Features As String(), Data As Population(Of String))
        parameters:
        - id: FileName
          type: System.String
        - id: Features
          type: System.String[]
        - id: Data
          type: Laga.GeneticAlgorithm.Population{System.String}
      overload: Laga.IO.IOCSV.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOCSV.#ctor(System.String,System.String[])
      commentId: M:Laga.IO.IOCSV.#ctor(System.String,System.String[])
      language: CSharp
      name:
        CSharp: IOCSV(String, String[])
        VB: IOCSV(String, String())
      nameWithType:
        CSharp: IOCSV.IOCSV(String, String[])
        VB: IOCSV.IOCSV(String, String())
      qualifiedName:
        CSharp: Laga.IO.IOCSV.IOCSV(System.String, System.String[])
        VB: Laga.IO.IOCSV.IOCSV(System.String, System.String())
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IOCSV(string FileName, string[] Features)
          VB: Public Sub New(FileName As String, Features As String())
        parameters:
        - id: FileName
          type: System.String
        - id: Features
          type: System.String[]
      overload: Laga.IO.IOCSV.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOCSV.AddRowData(Laga.GeneticAlgorithm.Chromosome{System.String})
      commentId: M:Laga.IO.IOCSV.AddRowData(Laga.GeneticAlgorithm.Chromosome{System.String})
      language: CSharp
      name:
        CSharp: AddRowData(Chromosome<String>)
        VB: AddRowData(Chromosome(Of String))
      nameWithType:
        CSharp: IOCSV.AddRowData(Chromosome<String>)
        VB: IOCSV.AddRowData(Chromosome(Of String))
      qualifiedName:
        CSharp: Laga.IO.IOCSV.AddRowData(Laga.GeneticAlgorithm.Chromosome<System.String>)
        VB: Laga.IO.IOCSV.AddRowData(Laga.GeneticAlgorithm.Chromosome(Of System.String))
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void AddRowData(Chromosome<string> chromosome)
          VB: Public Sub AddRowData(chromosome As Chromosome(Of String))
        parameters:
        - id: chromosome
          type: Laga.GeneticAlgorithm.Chromosome{System.String}
      overload: Laga.IO.IOCSV.AddRowData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOCSV.SaveAndClose
      commentId: M:Laga.IO.IOCSV.SaveAndClose
      language: CSharp
      name:
        CSharp: SaveAndClose()
        VB: SaveAndClose()
      nameWithType:
        CSharp: IOCSV.SaveAndClose()
        VB: IOCSV.SaveAndClose()
      qualifiedName:
        CSharp: Laga.IO.IOCSV.SaveAndClose()
        VB: Laga.IO.IOCSV.SaveAndClose()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public void SaveAndClose()
          VB: Public Sub SaveAndClose
      overload: Laga.IO.IOCSV.SaveAndClose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Laga.IO.IODataFolder
    commentId: T:Laga.IO.IODataFolder
    language: CSharp
    name:
      CSharp: IODataFolder
      VB: IODataFolder
    nameWithType:
      CSharp: IODataFolder
      VB: IODataFolder
    qualifiedName:
      CSharp: Laga.IO.IODataFolder
      VB: Laga.IO.IODataFolder
    type: Class
    assemblies:
    - Laga
    namespace: Laga.IO
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class IODataFolder
        VB: Public Class IODataFolder
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.IO.IODataFolder.#ctor(System.String)
      commentId: M:Laga.IO.IODataFolder.#ctor(System.String)
      language: CSharp
      name:
        CSharp: IODataFolder(String)
        VB: IODataFolder(String)
      nameWithType:
        CSharp: IODataFolder.IODataFolder(String)
        VB: IODataFolder.IODataFolder(String)
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.IODataFolder(System.String)
        VB: Laga.IO.IODataFolder.IODataFolder(System.String)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IODataFolder(string PathFolder)
          VB: Public Sub New(PathFolder As String)
        parameters:
        - id: PathFolder
          type: System.String
      overload: Laga.IO.IODataFolder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IODataFolder.#ctor(System.String,System.String)
      commentId: M:Laga.IO.IODataFolder.#ctor(System.String,System.String)
      language: CSharp
      name:
        CSharp: IODataFolder(String, String)
        VB: IODataFolder(String, String)
      nameWithType:
        CSharp: IODataFolder.IODataFolder(String, String)
        VB: IODataFolder.IODataFolder(String, String)
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.IODataFolder(System.String, System.String)
        VB: Laga.IO.IODataFolder.IODataFolder(System.String, System.String)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IODataFolder(string PathFolder, string Filter)
          VB: Public Sub New(PathFolder As String, Filter As String)
        parameters:
        - id: PathFolder
          type: System.String
        - id: Filter
          type: System.String
      overload: Laga.IO.IODataFolder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IODataFolder.GetFileName(System.String)
      commentId: M:Laga.IO.IODataFolder.GetFileName(System.String)
      language: CSharp
      name:
        CSharp: GetFileName(String)
        VB: GetFileName(String)
      nameWithType:
        CSharp: IODataFolder.GetFileName(String)
        VB: IODataFolder.GetFileName(String)
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.GetFileName(System.String)
        VB: Laga.IO.IODataFolder.GetFileName(System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string GetFileName(string PathFile)
          VB: Public Shared Function GetFileName(PathFile As String) As String
        parameters:
        - id: PathFile
          type: System.String
        return:
          type: System.String
      overload: Laga.IO.IODataFolder.GetFileName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IODataFolder.ReadSelectiveData(System.String[],System.String)
      commentId: M:Laga.IO.IODataFolder.ReadSelectiveData(System.String[],System.String)
      language: CSharp
      name:
        CSharp: ReadSelectiveData(String[], String)
        VB: ReadSelectiveData(String(), String)
      nameWithType:
        CSharp: IODataFolder.ReadSelectiveData(String[], String)
        VB: IODataFolder.ReadSelectiveData(String(), String)
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.ReadSelectiveData(System.String[], System.String)
        VB: Laga.IO.IODataFolder.ReadSelectiveData(System.String(), System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string[] ReadSelectiveData(string[] PathFiles, string Filter)
          VB: Public Function ReadSelectiveData(PathFiles As String(), Filter As String) As String()
        parameters:
        - id: PathFiles
          type: System.String[]
        - id: Filter
          type: System.String
        return:
          type: System.String[]
      overload: Laga.IO.IODataFolder.ReadSelectiveData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IODataFolder.RootFolder
      commentId: P:Laga.IO.IODataFolder.RootFolder
      language: CSharp
      name:
        CSharp: RootFolder
        VB: RootFolder
      nameWithType:
        CSharp: IODataFolder.RootFolder
        VB: IODataFolder.RootFolder
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.RootFolder
        VB: Laga.IO.IODataFolder.RootFolder
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string RootFolder { get; set; }
          VB: Public Property RootFolder As String
        parameters: []
        return:
          type: System.String
      overload: Laga.IO.IODataFolder.RootFolder*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Laga.IO.IODataFolder.ListPathFileNames
      commentId: P:Laga.IO.IODataFolder.ListPathFileNames
      language: CSharp
      name:
        CSharp: ListPathFileNames
        VB: ListPathFileNames
      nameWithType:
        CSharp: IODataFolder.ListPathFileNames
        VB: IODataFolder.ListPathFileNames
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.ListPathFileNames
        VB: Laga.IO.IODataFolder.ListPathFileNames
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string[] ListPathFileNames { get; }
          VB: Public ReadOnly Property ListPathFileNames As String()
        parameters: []
        return:
          type: System.String[]
      overload: Laga.IO.IODataFolder.ListPathFileNames*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.IO.IODataFolder.ListFileNames
      commentId: P:Laga.IO.IODataFolder.ListFileNames
      language: CSharp
      name:
        CSharp: ListFileNames
        VB: ListFileNames
      nameWithType:
        CSharp: IODataFolder.ListFileNames
        VB: IODataFolder.ListFileNames
      qualifiedName:
        CSharp: Laga.IO.IODataFolder.ListFileNames
        VB: Laga.IO.IODataFolder.ListFileNames
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string[] ListFileNames { get; }
          VB: Public ReadOnly Property ListFileNames As String()
        parameters: []
        return:
          type: System.String[]
      overload: Laga.IO.IODataFolder.ListFileNames*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Laga.IO.IOTextData
    commentId: T:Laga.IO.IOTextData
    language: CSharp
    name:
      CSharp: IOTextData
      VB: IOTextData
    nameWithType:
      CSharp: IOTextData
      VB: IOTextData
    qualifiedName:
      CSharp: Laga.IO.IOTextData
      VB: Laga.IO.IOTextData
    type: Class
    assemblies:
    - Laga
    namespace: Laga.IO
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class IOTextData
        VB: Public Class IOTextData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.IO.IOTextData.#ctor(System.String)
      commentId: M:Laga.IO.IOTextData.#ctor(System.String)
      language: CSharp
      name:
        CSharp: IOTextData(String)
        VB: IOTextData(String)
      nameWithType:
        CSharp: IOTextData.IOTextData(String)
        VB: IOTextData.IOTextData(String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.IOTextData(System.String)
        VB: Laga.IO.IOTextData.IOTextData(System.String)
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public IOTextData(string TextFileName)
          VB: Public Sub New(TextFileName As String)
        parameters:
        - id: TextFileName
          type: System.String
      overload: Laga.IO.IOTextData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOTextData.ConvertFileEncoding(System.String,Laga.IO.IOTextData.EncodingType)
      commentId: M:Laga.IO.IOTextData.ConvertFileEncoding(System.String,Laga.IO.IOTextData.EncodingType)
      language: CSharp
      name:
        CSharp: ConvertFileEncoding(String, IOTextData.EncodingType)
        VB: ConvertFileEncoding(String, IOTextData.EncodingType)
      nameWithType:
        CSharp: IOTextData.ConvertFileEncoding(String, IOTextData.EncodingType)
        VB: IOTextData.ConvertFileEncoding(String, IOTextData.EncodingType)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.ConvertFileEncoding(System.String, Laga.IO.IOTextData.EncodingType)
        VB: Laga.IO.IOTextData.ConvertFileEncoding(System.String, Laga.IO.IOTextData.EncodingType)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string ConvertFileEncoding(string FileName, IOTextData.EncodingType encodingType)
          VB: Public Function ConvertFileEncoding(FileName As String, encodingType As IOTextData.EncodingType) As String
        parameters:
        - id: FileName
          type: System.String
        - id: encodingType
          type: Laga.IO.IOTextData.EncodingType
        return:
          type: System.String
      overload: Laga.IO.IOTextData.ConvertFileEncoding*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List{System.String},System.String,System.String)
      commentId: M:Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List{System.String},System.String,System.String)
      language: CSharp
      name:
        CSharp: CreateFile(List<String>, String, String)
        VB: CreateFile(List(Of String), String, String)
      nameWithType:
        CSharp: IOTextData.CreateFile(List<String>, String, String)
        VB: IOTextData.CreateFile(List(Of String), String, String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List<System.String>, System.String, System.String)
        VB: Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List(Of System.String), System.String, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static bool CreateFile(List<string> strList, string directory, string fileName)
          VB: Public Shared Function CreateFile(strList As List(Of String), directory As String, fileName As String) As Boolean
        parameters:
        - id: strList
          type: System.Collections.Generic.List{System.String}
        - id: directory
          type: System.String
        - id: fileName
          type: System.String
        return:
          type: System.Boolean
      overload: Laga.IO.IOTextData.CreateFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.CountWordsTopN(System.String,System.Int32)
      commentId: M:Laga.IO.IOTextData.CountWordsTopN(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: CountWordsTopN(String, Int32)
        VB: CountWordsTopN(String, Int32)
      nameWithType:
        CSharp: IOTextData.CountWordsTopN(String, Int32)
        VB: IOTextData.CountWordsTopN(String, Int32)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.CountWordsTopN(System.String, System.Int32)
        VB: Laga.IO.IOTextData.CountWordsTopN(System.String, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static Dictionary<string, int> CountWordsTopN(string strMessage, int topN)
          VB: Public Shared Function CountWordsTopN(strMessage As String, topN As Integer) As Dictionary(Of String, Integer)
        parameters:
        - id: strMessage
          type: System.String
        - id: topN
          type: System.Int32
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      overload: Laga.IO.IOTextData.CountWordsTopN*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.GetWords(System.String)
      commentId: M:Laga.IO.IOTextData.GetWords(System.String)
      language: CSharp
      name:
        CSharp: GetWords(String)
        VB: GetWords(String)
      nameWithType:
        CSharp: IOTextData.GetWords(String)
        VB: IOTextData.GetWords(String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.GetWords(System.String)
        VB: Laga.IO.IOTextData.GetWords(System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] GetWords(string strMessage)
          VB: Public Shared Function GetWords(strMessage As String) As String()
        parameters:
        - id: strMessage
          type: System.String
        return:
          type: System.String[]
      overload: Laga.IO.IOTextData.GetWords*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.RemoveNumbers(System.String)
      commentId: M:Laga.IO.IOTextData.RemoveNumbers(System.String)
      language: CSharp
      name:
        CSharp: RemoveNumbers(String)
        VB: RemoveNumbers(String)
      nameWithType:
        CSharp: IOTextData.RemoveNumbers(String)
        VB: IOTextData.RemoveNumbers(String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.RemoveNumbers(System.String)
        VB: Laga.IO.IOTextData.RemoveNumbers(System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string RemoveNumbers(string strMessage)
          VB: Public Shared Function RemoveNumbers(strMessage As String) As String
        parameters:
        - id: strMessage
          type: System.String
        return:
          type: System.String
      overload: Laga.IO.IOTextData.RemoveNumbers*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.RemoveDiacritics(System.String)
      commentId: M:Laga.IO.IOTextData.RemoveDiacritics(System.String)
      language: CSharp
      name:
        CSharp: RemoveDiacritics(String)
        VB: RemoveDiacritics(String)
      nameWithType:
        CSharp: IOTextData.RemoveDiacritics(String)
        VB: IOTextData.RemoveDiacritics(String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.RemoveDiacritics(System.String)
        VB: Laga.IO.IOTextData.RemoveDiacritics(System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string RemoveDiacritics(string strMessage)
          VB: Public Shared Function RemoveDiacritics(strMessage As String) As String
        parameters:
        - id: strMessage
          type: System.String
        return:
          type: System.String
      overload: Laga.IO.IOTextData.RemoveDiacritics*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.RemoveByLength(System.String[],System.Int32)
      commentId: M:Laga.IO.IOTextData.RemoveByLength(System.String[],System.Int32)
      language: CSharp
      name:
        CSharp: RemoveByLength(String[], Int32)
        VB: RemoveByLength(String(), Int32)
      nameWithType:
        CSharp: IOTextData.RemoveByLength(String[], Int32)
        VB: IOTextData.RemoveByLength(String(), Int32)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.RemoveByLength(System.String[], System.Int32)
        VB: Laga.IO.IOTextData.RemoveByLength(System.String(), System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string[] RemoveByLength(string[] strMessages, int Length)
          VB: Public Shared Function RemoveByLength(strMessages As String(), Length As Integer) As String()
        parameters:
        - id: strMessages
          type: System.String[]
        - id: Length
          type: System.Int32
        return:
          type: System.String[]
      overload: Laga.IO.IOTextData.RemoveByLength*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.RemoveByLength(System.String,System.Int32,System.String)
      commentId: M:Laga.IO.IOTextData.RemoveByLength(System.String,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: RemoveByLength(String, Int32, String)
        VB: RemoveByLength(String, Int32, String)
      nameWithType:
        CSharp: IOTextData.RemoveByLength(String, Int32, String)
        VB: IOTextData.RemoveByLength(String, Int32, String)
      qualifiedName:
        CSharp: Laga.IO.IOTextData.RemoveByLength(System.String, System.Int32, System.String)
        VB: Laga.IO.IOTextData.RemoveByLength(System.String, System.Int32, System.String)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static string RemoveByLength(string strMessage, int Length, string separator)
          VB: Public Shared Function RemoveByLength(strMessage As String, Length As Integer, separator As String) As String
        parameters:
        - id: strMessage
          type: System.String
        - id: Length
          type: System.Int32
        - id: separator
          type: System.String
        return:
          type: System.String
      overload: Laga.IO.IOTextData.RemoveByLength*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.IO.IOTextData.SourceEncoding
      commentId: P:Laga.IO.IOTextData.SourceEncoding
      language: CSharp
      name:
        CSharp: SourceEncoding
        VB: SourceEncoding
      nameWithType:
        CSharp: IOTextData.SourceEncoding
        VB: IOTextData.SourceEncoding
      qualifiedName:
        CSharp: Laga.IO.IOTextData.SourceEncoding
        VB: Laga.IO.IOTextData.SourceEncoding
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Encoding SourceEncoding { get; }
          VB: Public ReadOnly Property SourceEncoding As Encoding
        parameters: []
        return:
          type: System.Text.Encoding
      overload: Laga.IO.IOTextData.SourceEncoding*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.IO.IOTextData.DataText
      commentId: P:Laga.IO.IOTextData.DataText
      language: CSharp
      name:
        CSharp: DataText
        VB: DataText
      nameWithType:
        CSharp: IOTextData.DataText
        VB: IOTextData.DataText
      qualifiedName:
        CSharp: Laga.IO.IOTextData.DataText
        VB: Laga.IO.IOTextData.DataText
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public string DataText { get; }
          VB: Public ReadOnly Property DataText As String
        parameters: []
        return:
          type: System.String
      overload: Laga.IO.IOTextData.DataText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Laga.IO.IOTextData.DataTextLine
      commentId: P:Laga.IO.IOTextData.DataTextLine
      language: CSharp
      name:
        CSharp: DataTextLine
        VB: DataTextLine
      nameWithType:
        CSharp: IOTextData.DataTextLine
        VB: IOTextData.DataTextLine
      qualifiedName:
        CSharp: Laga.IO.IOTextData.DataTextLine
        VB: Laga.IO.IOTextData.DataTextLine
      type: Property
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public List<string> DataTextLine { get; }
          VB: Public ReadOnly Property DataTextLine As List(Of String)
        parameters: []
        return:
          type: System.Collections.Generic.List{System.String}
      overload: Laga.IO.IOTextData.DataTextLine*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Laga.IO.IOTextData.EncodingType
    commentId: T:Laga.IO.IOTextData.EncodingType
    language: CSharp
    name:
      CSharp: IOTextData.EncodingType
      VB: IOTextData.EncodingType
    nameWithType:
      CSharp: IOTextData.EncodingType
      VB: IOTextData.EncodingType
    qualifiedName:
      CSharp: Laga.IO.IOTextData.EncodingType
      VB: Laga.IO.IOTextData.EncodingType
    type: Enum
    assemblies:
    - Laga
    namespace: Laga.IO
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public enum EncodingType
        VB: Public Enum EncodingType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Laga.IO.IOTextData.EncodingType.UTF7
      commentId: F:Laga.IO.IOTextData.EncodingType.UTF7
      language: CSharp
      name:
        CSharp: UTF7
        VB: UTF7
      nameWithType:
        CSharp: IOTextData.EncodingType.UTF7
        VB: IOTextData.EncodingType.UTF7
      qualifiedName:
        CSharp: Laga.IO.IOTextData.EncodingType.UTF7
        VB: Laga.IO.IOTextData.EncodingType.UTF7
      type: Field
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: UTF7 = 0
          VB: UTF7 = 0
        return:
          type: Laga.IO.IOTextData.EncodingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Laga.IO.IOTextData.EncodingType.UTF8
      commentId: F:Laga.IO.IOTextData.EncodingType.UTF8
      language: CSharp
      name:
        CSharp: UTF8
        VB: UTF8
      nameWithType:
        CSharp: IOTextData.EncodingType.UTF8
        VB: IOTextData.EncodingType.UTF8
      qualifiedName:
        CSharp: Laga.IO.IOTextData.EncodingType.UTF8
        VB: Laga.IO.IOTextData.EncodingType.UTF8
      type: Field
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: UTF8 = 1
          VB: UTF8 = 1
        return:
          type: Laga.IO.IOTextData.EncodingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Laga.IO.IOTextData.EncodingType.ASCII
      commentId: F:Laga.IO.IOTextData.EncodingType.ASCII
      language: CSharp
      name:
        CSharp: ASCII
        VB: ASCII
      nameWithType:
        CSharp: IOTextData.EncodingType.ASCII
        VB: IOTextData.EncodingType.ASCII
      qualifiedName:
        CSharp: Laga.IO.IOTextData.EncodingType.ASCII
        VB: Laga.IO.IOTextData.EncodingType.ASCII
      type: Field
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: ASCII = 2
          VB: ASCII = 2
        return:
          type: Laga.IO.IOTextData.EncodingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Laga.IO.IOTextData.EncodingType.Unicode
      commentId: F:Laga.IO.IOTextData.EncodingType.Unicode
      language: CSharp
      name:
        CSharp: Unicode
        VB: Unicode
      nameWithType:
        CSharp: IOTextData.EncodingType.Unicode
        VB: IOTextData.EncodingType.Unicode
      qualifiedName:
        CSharp: Laga.IO.IOTextData.EncodingType.Unicode
        VB: Laga.IO.IOTextData.EncodingType.Unicode
      type: Field
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: Unicode = 3
          VB: Unicode = 3
        return:
          type: Laga.IO.IOTextData.EncodingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Laga.IO.IOTextData.EncodingType.Default
      commentId: F:Laga.IO.IOTextData.EncodingType.Default
      language: CSharp
      name:
        CSharp: Default
        VB: Default
      nameWithType:
        CSharp: IOTextData.EncodingType.Default
        VB: IOTextData.EncodingType.Default
      qualifiedName:
        CSharp: Laga.IO.IOTextData.EncodingType.Default
        VB: Laga.IO.IOTextData.EncodingType.Default
      type: Field
      assemblies:
      - Laga
      namespace: Laga.IO
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: Default = 4
          VB: Default = 4
        return:
          type: Laga.IO.IOTextData.EncodingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: Laga.Numbers
  commentId: N:Laga.Numbers
  language: CSharp
  name:
    CSharp: Laga.Numbers
    VB: Laga.Numbers
  nameWithType:
    CSharp: Laga.Numbers
    VB: Laga.Numbers
  qualifiedName:
    CSharp: Laga.Numbers
    VB: Laga.Numbers
  type: Namespace
  assemblies:
  - Laga
  modifiers: {}
  items:
  - id: Laga.Numbers.Function
    commentId: T:Laga.Numbers.Function
    language: CSharp
    name:
      CSharp: Function
      VB: Function
    nameWithType:
      CSharp: Function
      VB: Function
    qualifiedName:
      CSharp: Laga.Numbers.Function
      VB: Laga.Numbers.Function
    type: Class
    assemblies:
    - Laga
    namespace: Laga.Numbers
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Function
        VB: Public Class Function
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.Numbers.Function.ThreeXplusOne(System.Int32)
      commentId: M:Laga.Numbers.Function.ThreeXplusOne(System.Int32)
      language: CSharp
      name:
        CSharp: ThreeXplusOne(Int32)
        VB: ThreeXplusOne(Int32)
      nameWithType:
        CSharp: Function.ThreeXplusOne(Int32)
        VB: Function.ThreeXplusOne(Int32)
      qualifiedName:
        CSharp: Laga.Numbers.Function.ThreeXplusOne(System.Int32)
        VB: Laga.Numbers.Function.ThreeXplusOne(System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static List<int> ThreeXplusOne(int Sequence)
          VB: Public Shared Function ThreeXplusOne(Sequence As Integer) As List(Of Integer)
        parameters:
        - id: Sequence
          type: System.Int32
        return:
          type: System.Collections.Generic.List{System.Int32}
      overload: Laga.Numbers.Function.ThreeXplusOne*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.NumberDistinct``1(System.Collections.Generic.List{``0})
      commentId: M:Laga.Numbers.Function.NumberDistinct``1(System.Collections.Generic.List{``0})
      language: CSharp
      name:
        CSharp: NumberDistinct<T>(List<T>)
        VB: NumberDistinct(Of T)(List(Of T))
      nameWithType:
        CSharp: Function.NumberDistinct<T>(List<T>)
        VB: Function.NumberDistinct(Of T)(List(Of T))
      qualifiedName:
        CSharp: Laga.Numbers.Function.NumberDistinct<T>(System.Collections.Generic.List<T>)
        VB: Laga.Numbers.Function.NumberDistinct(Of T)(System.Collections.Generic.List(Of T))
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static List<T> NumberDistinct<T>(List<T> lstData)
          VB: Public Shared Function NumberDistinct(Of T)(lstData As List(Of T)) As List(Of T)
        parameters:
        - id: lstData
          type: System.Collections.Generic.List{{T}}
        typeParameters:
        - id: T
        return:
          type: System.Collections.Generic.List{{T}}
      overload: Laga.Numbers.Function.NumberDistinct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.Sigmoid(System.Single)
      commentId: M:Laga.Numbers.Function.Sigmoid(System.Single)
      language: CSharp
      name:
        CSharp: Sigmoid(Single)
        VB: Sigmoid(Single)
      nameWithType:
        CSharp: Function.Sigmoid(Single)
        VB: Function.Sigmoid(Single)
      qualifiedName:
        CSharp: Laga.Numbers.Function.Sigmoid(System.Single)
        VB: Laga.Numbers.Function.Sigmoid(System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static float Sigmoid(float t)
          VB: Public Shared Function Sigmoid(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Laga.Numbers.Function.Sigmoid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.Sigmoid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
      commentId: M:Laga.Numbers.Function.Sigmoid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Sigmoid(Double, Double, Double, Double, Double, Double)
        VB: Sigmoid(Double, Double, Double, Double, Double, Double)
      nameWithType:
        CSharp: Function.Sigmoid(Double, Double, Double, Double, Double, Double)
        VB: Function.Sigmoid(Double, Double, Double, Double, Double, Double)
      qualifiedName:
        CSharp: Laga.Numbers.Function.Sigmoid(System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)
        VB: Laga.Numbers.Function.Sigmoid(System.Double, System.Double, System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double Sigmoid(double t, double A1, double A2, double B1, double B2, double decay)
          VB: Public Shared Function Sigmoid(t As Double, A1 As Double, A2 As Double, B1 As Double, B2 As Double, decay As Double) As Double
        parameters:
        - id: t
          type: System.Double
        - id: A1
          type: System.Double
        - id: A2
          type: System.Double
        - id: B1
          type: System.Double
        - id: B2
          type: System.Double
        - id: decay
          type: System.Double
        return:
          type: System.Double
      overload: Laga.Numbers.Function.Sigmoid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.Sigmoid(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      commentId: M:Laga.Numbers.Function.Sigmoid(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Sigmoid(Single, Single, Single, Single, Single, Single)
        VB: Sigmoid(Single, Single, Single, Single, Single, Single)
      nameWithType:
        CSharp: Function.Sigmoid(Single, Single, Single, Single, Single, Single)
        VB: Function.Sigmoid(Single, Single, Single, Single, Single, Single)
      qualifiedName:
        CSharp: Laga.Numbers.Function.Sigmoid(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
        VB: Laga.Numbers.Function.Sigmoid(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static float Sigmoid(float t, float A1, float A2, float B1, float B2, float decay)
          VB: Public Shared Function Sigmoid(t As Single, A1 As Single, A2 As Single, B1 As Single, B2 As Single, decay As Single) As Single
        parameters:
        - id: t
          type: System.Single
        - id: A1
          type: System.Single
        - id: A2
          type: System.Single
        - id: B1
          type: System.Single
        - id: B2
          type: System.Single
        - id: decay
          type: System.Single
        return:
          type: System.Single
      overload: Laga.Numbers.Function.Sigmoid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.Deg2Rad(System.Double)
      commentId: M:Laga.Numbers.Function.Deg2Rad(System.Double)
      language: CSharp
      name:
        CSharp: Deg2Rad(Double)
        VB: Deg2Rad(Double)
      nameWithType:
        CSharp: Function.Deg2Rad(Double)
        VB: Function.Deg2Rad(Double)
      qualifiedName:
        CSharp: Laga.Numbers.Function.Deg2Rad(System.Double)
        VB: Laga.Numbers.Function.Deg2Rad(System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double Deg2Rad(double degrees)
          VB: Public Shared Function Deg2Rad(degrees As Double) As Double
        parameters:
        - id: degrees
          type: System.Double
        return:
          type: System.Double
      overload: Laga.Numbers.Function.Deg2Rad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.Rad2Deg(System.Double)
      commentId: M:Laga.Numbers.Function.Rad2Deg(System.Double)
      language: CSharp
      name:
        CSharp: Rad2Deg(Double)
        VB: Rad2Deg(Double)
      nameWithType:
        CSharp: Function.Rad2Deg(Double)
        VB: Function.Rad2Deg(Double)
      qualifiedName:
        CSharp: Laga.Numbers.Function.Rad2Deg(System.Double)
        VB: Laga.Numbers.Function.Rad2Deg(System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double Rad2Deg(double radians)
          VB: Public Shared Function Rad2Deg(radians As Double) As Double
        parameters:
        - id: radians
          type: System.Double
        return:
          type: System.Double
      overload: Laga.Numbers.Function.Rad2Deg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Function.#ctor
      commentId: M:Laga.Numbers.Function.#ctor
      language: CSharp
      name:
        CSharp: Function()
        VB: Function()
      nameWithType:
        CSharp: Function.Function()
        VB: Function.Function()
      qualifiedName:
        CSharp: Laga.Numbers.Function.Function()
        VB: Laga.Numbers.Function.Function()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Function()
          VB: Public Sub New
      overload: Laga.Numbers.Function.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Laga.Numbers.Rand
    commentId: T:Laga.Numbers.Rand
    language: CSharp
    name:
      CSharp: Rand
      VB: Rand
    nameWithType:
      CSharp: Rand
      VB: Rand
    qualifiedName:
      CSharp: Laga.Numbers.Rand
      VB: Laga.Numbers.Rand
    type: Class
    assemblies:
    - Laga
    namespace: Laga.Numbers
    source:
      path: Laga
      isExternal: true
    syntax:
      content:
        CSharp: public class Rand
        VB: Public Class Rand
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Laga.Numbers.Rand.Numbers(System.Int32,System.Single,System.Single)
      commentId: M:Laga.Numbers.Rand.Numbers(System.Int32,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Numbers(Int32, Single, Single)
        VB: Numbers(Int32, Single, Single)
      nameWithType:
        CSharp: Rand.Numbers(Int32, Single, Single)
        VB: Rand.Numbers(Int32, Single, Single)
      qualifiedName:
        CSharp: Laga.Numbers.Rand.Numbers(System.Int32, System.Single, System.Single)
        VB: Laga.Numbers.Rand.Numbers(System.Int32, System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static float[] Numbers(int size, float min, float max)
          VB: Public Shared Function Numbers(size As Integer, min As Single, max As Single) As Single()
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: System.Single[]
      overload: Laga.Numbers.Rand.Numbers*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.Numbers(System.Int32,System.Double,System.Double)
      commentId: M:Laga.Numbers.Rand.Numbers(System.Int32,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Numbers(Int32, Double, Double)
        VB: Numbers(Int32, Double, Double)
      nameWithType:
        CSharp: Rand.Numbers(Int32, Double, Double)
        VB: Rand.Numbers(Int32, Double, Double)
      qualifiedName:
        CSharp: Laga.Numbers.Rand.Numbers(System.Int32, System.Double, System.Double)
        VB: Laga.Numbers.Rand.Numbers(System.Int32, System.Double, System.Double)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double[] Numbers(int size, double min, double max)
          VB: Public Shared Function Numbers(size As Integer, min As Double, max As Double) As Double()
        parameters:
        - id: size
          type: System.Int32
        - id: min
          type: System.Double
        - id: max
          type: System.Double
        return:
          type: System.Double[]
      overload: Laga.Numbers.Rand.Numbers*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.IntNumber(System.Int32,System.Int32)
      commentId: M:Laga.Numbers.Rand.IntNumber(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: IntNumber(Int32, Int32)
        VB: IntNumber(Int32, Int32)
      nameWithType:
        CSharp: Rand.IntNumber(Int32, Int32)
        VB: Rand.IntNumber(Int32, Int32)
      qualifiedName:
        CSharp: Laga.Numbers.Rand.IntNumber(System.Int32, System.Int32)
        VB: Laga.Numbers.Rand.IntNumber(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static int IntNumber(int min, int max)
          VB: Public Shared Function IntNumber(min As Integer, max As Integer) As Integer
        parameters:
        - id: min
          type: System.Int32
        - id: max
          type: System.Int32
        return:
          type: System.Int32
      overload: Laga.Numbers.Rand.IntNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.DblNumber
      commentId: M:Laga.Numbers.Rand.DblNumber
      language: CSharp
      name:
        CSharp: DblNumber()
        VB: DblNumber()
      nameWithType:
        CSharp: Rand.DblNumber()
        VB: Rand.DblNumber()
      qualifiedName:
        CSharp: Laga.Numbers.Rand.DblNumber()
        VB: Laga.Numbers.Rand.DblNumber()
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static double DblNumber()
          VB: Public Shared Function DblNumber As Double
        return:
          type: System.Double
      overload: Laga.Numbers.Rand.DblNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.FltNumber(System.Single,System.Single)
      commentId: M:Laga.Numbers.Rand.FltNumber(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: FltNumber(Single, Single)
        VB: FltNumber(Single, Single)
      nameWithType:
        CSharp: Rand.FltNumber(Single, Single)
        VB: Rand.FltNumber(Single, Single)
      qualifiedName:
        CSharp: Laga.Numbers.Rand.FltNumber(System.Single, System.Single)
        VB: Laga.Numbers.Rand.FltNumber(System.Single, System.Single)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static float FltNumber(float min, float max)
          VB: Public Shared Function FltNumber(min As Single, max As Single) As Single
        parameters:
        - id: min
          type: System.Single
        - id: max
          type: System.Single
        return:
          type: System.Single
      overload: Laga.Numbers.Rand.FltNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.Character(System.Int32,System.Int32)
      commentId: M:Laga.Numbers.Rand.Character(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Character(Int32, Int32)
        VB: Character(Int32, Int32)
      nameWithType:
        CSharp: Rand.Character(Int32, Int32)
        VB: Rand.Character(Int32, Int32)
      qualifiedName:
        CSharp: Laga.Numbers.Rand.Character(System.Int32, System.Int32)
        VB: Laga.Numbers.Rand.Character(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public static char Character(int start, int end)
          VB: Public Shared Function Character(start As Integer, end As Integer) As Char
        parameters:
        - id: start
          type: System.Int32
        - id: end
          type: System.Int32
        return:
          type: System.Char
      overload: Laga.Numbers.Rand.Character*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Laga.Numbers.Rand.#ctor
      commentId: M:Laga.Numbers.Rand.#ctor
      language: CSharp
      name:
        CSharp: Rand()
        VB: Rand()
      nameWithType:
        CSharp: Rand.Rand()
        VB: Rand.Rand()
      qualifiedName:
        CSharp: Laga.Numbers.Rand.Rand()
        VB: Laga.Numbers.Rand.Rand()
      type: Constructor
      assemblies:
      - Laga
      namespace: Laga.Numbers
      source:
        path: Laga
        isExternal: true
      syntax:
        content:
          CSharp: public Rand()
          VB: Public Sub New
      overload: Laga.Numbers.Rand.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.ICloneable:
    name:
      CSharp:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
      VB:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ICloneable
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Laga.GeneticAlgorithm.Chromosome`1.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.#ctor*
        name: Chromosome
        nameWithType: Chromosome<T>.Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Chromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.#ctor*
        name: Chromosome
        nameWithType: Chromosome(Of T).Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Chromosome
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{`0}
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Laga.GeneticAlgorithm.Chromosome`1.GetDNA*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.GetDNA*
        name: GetDNA
        nameWithType: Chromosome<T>.GetDNA
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.GetDNA
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.GetDNA*
        name: GetDNA
        nameWithType: Chromosome(Of T).GetDNA
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).GetDNA
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.GetDNA
  Laga.GeneticAlgorithm.Chromosome`1.InsertDNA*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.InsertDNA*
        name: InsertDNA
        nameWithType: Chromosome<T>.InsertDNA
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.InsertDNA
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.InsertDNA*
        name: InsertDNA
        nameWithType: Chromosome(Of T).InsertDNA
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).InsertDNA
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.InsertDNA
  Laga.GeneticAlgorithm.Chromosome`1.Add*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Add*
        name: Add
        nameWithType: Chromosome<T>.Add
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Add
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Add*
        name: Add
        nameWithType: Chromosome(Of T).Add
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Add
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Add
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{`0}
  Laga.GeneticAlgorithm.Chromosome`1.AddRange*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.AddRange*
        name: AddRange
        nameWithType: Chromosome<T>.AddRange
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.AddRange
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.AddRange*
        name: AddRange
        nameWithType: Chromosome(Of T).AddRange
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).AddRange
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.AddRange
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Laga.GeneticAlgorithm.Chromosome`1.ToString*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToString*
        name: ToString
        nameWithType: Chromosome<T>.ToString
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.ToString
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToString*
        name: ToString
        nameWithType: Chromosome(Of T).ToString
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).ToString
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.ToString
  Laga.GeneticAlgorithm.Chromosome`1.ToList*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToList*
        name: ToList
        nameWithType: Chromosome<T>.ToList
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.ToList
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToList*
        name: ToList
        nameWithType: Chromosome(Of T).ToList
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).ToList
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.ToList
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Chromosome`1.ToArray*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToArray*
        name: ToArray
        nameWithType: Chromosome<T>.ToArray
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.ToArray
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.ToArray*
        name: ToArray
        nameWithType: Chromosome(Of T).ToArray
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).ToArray
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.ToArray
  Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates*
        name: Fisher_Yates
        nameWithType: Chromosome<T>.Fisher_Yates
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Fisher_Yates
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates*
        name: Fisher_Yates
        nameWithType: Chromosome(Of T).Fisher_Yates
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Fisher_Yates
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Fisher_Yates
  Laga.GeneticAlgorithm:
    name:
      CSharp:
      - name: Laga.GeneticAlgorithm
        nameWithType: Laga.GeneticAlgorithm
        qualifiedName: Laga.GeneticAlgorithm
        isExternal: true
      VB:
      - name: Laga.GeneticAlgorithm
        nameWithType: Laga.GeneticAlgorithm
        qualifiedName: Laga.GeneticAlgorithm
    isDefinition: true
    commentId: N:Laga.GeneticAlgorithm
  Laga.GeneticAlgorithm.Chromosome`1:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome`1
  Laga.GeneticAlgorithm.Chromosome`1.Clone*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Clone*
        name: Clone
        nameWithType: Chromosome<T>.Clone
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Clone
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Clone*
        name: Clone
        nameWithType: Chromosome(Of T).Clone
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Clone
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Clone
  Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone*
        name: ICloneable.Clone
        nameWithType: Chromosome<T>.ICloneable.Clone
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.System.ICloneable.Clone
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone*
        name: System.ICloneable.Clone
        nameWithType: Chromosome(Of T).System.ICloneable.Clone
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).System.ICloneable.Clone
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.System#ICloneable#Clone
  System.ICloneable.Clone:
    name:
      CSharp:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ICloneable
    commentId: M:System.ICloneable.Clone
  Laga.GeneticAlgorithm.Chromosome`1.Count*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Count*
        name: Count
        nameWithType: Chromosome<T>.Count
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Count
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Count*
        name: Count
        nameWithType: Chromosome(Of T).Count
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Count
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Count
  Laga.GeneticAlgorithm.Chromosome`1.Chr*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Chr*
        name: Chr
        nameWithType: Chromosome<T>.Chr
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Chr
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Chr*
        name: Chr
        nameWithType: Chromosome(Of T).Chr
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Chr
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Chr
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  Laga.GeneticAlgorithm.Chromosome`1.Fitness*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Fitness*
        name: Fitness
        nameWithType: Chromosome<T>.Fitness
        qualifiedName: Laga.GeneticAlgorithm.Chromosome<T>.Fitness
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1.Fitness*
        name: Fitness
        nameWithType: Chromosome(Of T).Fitness
        qualifiedName: Laga.GeneticAlgorithm.Chromosome(Of T).Fitness
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Chromosome`1.Fitness
  Laga.GeneticAlgorithm.Crossover`1.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1.#ctor*
        name: Crossover
        nameWithType: Crossover<T>.Crossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover<T>.Crossover
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1.#ctor*
        name: Crossover
        nameWithType: Crossover(Of T).Crossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover(Of T).Crossover
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.#ctor
  Laga.GeneticAlgorithm.Population`1:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.Population`1
  Laga.GeneticAlgorithm.Population{{T}}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{`0}
  Laga.GeneticAlgorithm.Crossover`1.SinglePoint*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1.SinglePoint*
        name: SinglePoint
        nameWithType: Crossover<T>.SinglePoint
        qualifiedName: Laga.GeneticAlgorithm.Crossover<T>.SinglePoint
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1.SinglePoint*
        name: SinglePoint
        nameWithType: Crossover(Of T).SinglePoint
        qualifiedName: Laga.GeneticAlgorithm.Crossover(Of T).SinglePoint
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.SinglePoint
  Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*
        name: RandomPointCrossover
        nameWithType: Crossover<T>.RandomPointCrossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover<T>.RandomPointCrossover
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover*
        name: RandomPointCrossover
        nameWithType: Crossover(Of T).RandomPointCrossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover(Of T).RandomPointCrossover
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover
  Laga.GeneticAlgorithm.Chromosome{{T}}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{`0}
  Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
        name: SinglePointCrossover
        nameWithType: Crossover<T>.SinglePointCrossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover<T>.SinglePointCrossover
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover*
        name: SinglePointCrossover
        nameWithType: Crossover(Of T).SinglePointCrossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover(Of T).SinglePointCrossover
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover
  System.Object[][]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Double[][]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Single[][]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Int32[][]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Char[][]:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Crossover`1.IndexParent*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1.IndexParent*
        name: IndexParent
        nameWithType: Crossover<T>.IndexParent
        qualifiedName: Laga.GeneticAlgorithm.Crossover<T>.IndexParent
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1.IndexParent*
        name: IndexParent
        nameWithType: Crossover(Of T).IndexParent
        qualifiedName: Laga.GeneticAlgorithm.Crossover(Of T).IndexParent
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Crossover`1.IndexParent
  Laga.GeneticAlgorithm.Crossover`1:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Crossover`1
        name: Crossover
        nameWithType: Crossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Crossover`1
        name: Crossover
        nameWithType: Crossover
        qualifiedName: Laga.GeneticAlgorithm.Crossover
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.Crossover`1
  Laga.GeneticAlgorithm.GenrChromosome.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.#ctor*
        name: GenrChromosome
        nameWithType: GenrChromosome.GenrChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.GenrChromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.#ctor*
        name: GenrChromosome
        nameWithType: GenrChromosome.GenrChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.GenrChromosome
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.#ctor
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*
        name: NumberChromosome
        nameWithType: GenrChromosome.NumberChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome*
        name: NumberChromosome
        nameWithType: GenrChromosome.NumberChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome
  Laga.GeneticAlgorithm.Chromosome{System.Double}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{System.Double}
  Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble*
        name: DNA_RandDouble
        nameWithType: GenrChromosome.DNA_RandDouble
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble*
        name: DNA_RandDouble
        nameWithType: GenrChromosome.DNA_RandDouble
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandDouble
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Chromosome{System.Single}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{System.Single}
  Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat*
        name: DNA_RandFloat
        nameWithType: GenrChromosome.DNA_RandFloat
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat*
        name: DNA_RandFloat
        nameWithType: GenrChromosome.DNA_RandFloat
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandFloat
  Laga.GeneticAlgorithm.Chromosome{System.Int32}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{System.Int32}
  Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger*
        name: DNA_RandInteger
        nameWithType: GenrChromosome.DNA_RandInteger
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger*
        name: DNA_RandInteger
        nameWithType: GenrChromosome.DNA_RandInteger
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_RandInteger
  Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary*
        name: NumberChromosomeBinary
        nameWithType: GenrChromosome.NumberChromosomeBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary*
        name: NumberChromosomeBinary
        nameWithType: GenrChromosome.NumberChromosomeBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary
  Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary*
        name: DNA_IntBinary
        nameWithType: GenrChromosome.DNA_IntBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary*
        name: DNA_IntBinary
        nameWithType: GenrChromosome.DNA_IntBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_IntBinary
  Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap*
        name: NumberChromosomeSwap
        nameWithType: GenrChromosome.NumberChromosomeSwap
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap*
        name: NumberChromosomeSwap
        nameWithType: GenrChromosome.NumberChromosomeSwap
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap
  Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger*
        name: DNA_ShuffleInteger
        nameWithType: GenrChromosome.DNA_ShuffleInteger
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger*
        name: DNA_ShuffleInteger
        nameWithType: GenrChromosome.DNA_ShuffleInteger
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_ShuffleInteger
  System.Char[]:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary*
        name: CharChromosomeBinary
        nameWithType: GenrChromosome.CharChromosomeBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary*
        name: CharChromosomeBinary
        nameWithType: GenrChromosome.CharChromosomeBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary
  Laga.GeneticAlgorithm.Chromosome{System.Char}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{System.Char}
  Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary*
        name: DNA_CharBinary
        nameWithType: GenrChromosome.DNA_CharBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary*
        name: DNA_CharBinary
        nameWithType: GenrChromosome.DNA_CharBinary
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_CharBinary
  Laga.GeneticAlgorithm.GenrChromosome.CharChromosome*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome*
        name: CharChromosome
        nameWithType: GenrChromosome.CharChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome*
        name: CharChromosome
        nameWithType: GenrChromosome.CharChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.CharChromosome
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.CharChromosome
  Laga.GeneticAlgorithm.GenrChromosome.DNA_Char*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char*
        name: DNA_Char
        nameWithType: GenrChromosome.DNA_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char*
        name: DNA_Char
        nameWithType: GenrChromosome.DNA_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.DNA_Char
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.DNA_Char
  Laga.GeneticAlgorithm.GenrChromosome.SizeChrom*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom*
        name: SizeChrom
        nameWithType: GenrChromosome.SizeChrom
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom*
        name: SizeChrom
        nameWithType: GenrChromosome.SizeChrom
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrChromosome.SizeChrom
  Laga.GeneticAlgorithm.GenrChromosome:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrChromosome
        name: GenrChromosome
        nameWithType: GenrChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrChromosome
        name: GenrChromosome
        nameWithType: GenrChromosome
        qualifiedName: Laga.GeneticAlgorithm.GenrChromosome
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.GenrChromosome
  System.ObsoleteAttribute:
    name:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ObsoleteAttribute
  System.ObsoleteAttribute.#ctor(System.String,System.Boolean):
    name:
      CSharp:
      - id: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ObsoleteAttribute
    commentId: M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Laga.GeneticAlgorithm.GenrDNA.Rand_Double*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Double*
        name: Rand_Double
        nameWithType: GenrDNA.Rand_Double
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Double
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Double*
        name: Rand_Double
        nameWithType: GenrDNA.Rand_Double
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Double
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Rand_Double
  Laga.GeneticAlgorithm.GenrDNA.Rand_Float*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Float*
        name: Rand_Float
        nameWithType: GenrDNA.Rand_Float
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Float
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Float*
        name: Rand_Float
        nameWithType: GenrDNA.Rand_Float
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Float
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Rand_Float
  Laga.GeneticAlgorithm.GenrDNA.Rand_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer*
        name: Rand_Integer
        nameWithType: GenrDNA.Rand_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer*
        name: Rand_Integer
        nameWithType: GenrDNA.Rand_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Rand_Integer
  Laga.GeneticAlgorithm.GenrDNA.Binary_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer*
        name: Binary_Integer
        nameWithType: GenrDNA.Binary_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer*
        name: Binary_Integer
        nameWithType: GenrDNA.Binary_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Binary_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Binary_Integer
  Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer*
        name: Shuffle_Integer
        nameWithType: GenrDNA.Shuffle_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer*
        name: Shuffle_Integer
        nameWithType: GenrDNA.Shuffle_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Shuffle_Integer
  Laga.GeneticAlgorithm.GenrDNA.Binary_Char*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Char*
        name: Binary_Char
        nameWithType: GenrDNA.Binary_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Binary_Char
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Binary_Char*
        name: Binary_Char
        nameWithType: GenrDNA.Binary_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Binary_Char
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Binary_Char
  Laga.GeneticAlgorithm.GenrDNA.Rand_Char*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Char*
        name: Rand_Char
        nameWithType: GenrDNA.Rand_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Char
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA.Rand_Char*
        name: Rand_Char
        nameWithType: GenrDNA.Rand_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA.Rand_Char
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrDNA.Rand_Char
  Laga.GeneticAlgorithm.GenrDNA:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrDNA
        name: GenrDNA
        nameWithType: GenrDNA
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrDNA
        name: GenrDNA
        nameWithType: GenrDNA
        qualifiedName: Laga.GeneticAlgorithm.GenrDNA
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.GenrDNA
  Laga.GeneticAlgorithm.GenrPopulation.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.#ctor*
        name: GenrPopulation
        nameWithType: GenrPopulation.GenrPopulation
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.#ctor*
        name: GenrPopulation
        nameWithType: GenrPopulation.GenrPopulation
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.GenrPopulation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.#ctor
  Laga.GeneticAlgorithm.Population{System.Double}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{System.Double}
  Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*
        name: Rand_Double
        nameWithType: GenrPopulation.Rand_Double
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double*
        name: Rand_Double
        nameWithType: GenrPopulation.Rand_Double
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Double
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Double
  Laga.GeneticAlgorithm.Population{System.Single}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{System.Single}
  Laga.GeneticAlgorithm.GenrPopulation.Rand_float*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_float*
        name: Rand_float
        nameWithType: GenrPopulation.Rand_float
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_float
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_float*
        name: Rand_float
        nameWithType: GenrPopulation.Rand_float
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_float
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_float
  Laga.GeneticAlgorithm.Population{System.Int32}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{System.Int32}
  Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*
        name: Rand_Integer
        nameWithType: GenrPopulation.Rand_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer*
        name: Rand_Integer
        nameWithType: GenrPopulation.Rand_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Integer
  Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*
        name: Binary_Integer
        nameWithType: GenrPopulation.Binary_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer*
        name: Binary_Integer
        nameWithType: GenrPopulation.Binary_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Binary_Integer
  Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*
        name: Shuffle_Integer
        nameWithType: GenrPopulation.Shuffle_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer*
        name: Shuffle_Integer
        nameWithType: GenrPopulation.Shuffle_Integer
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Shuffle_Integer
  Laga.GeneticAlgorithm.Population{System.Char}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{System.Char}
  Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*
        name: Binary_Char
        nameWithType: GenrPopulation.Binary_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char*
        name: Binary_Char
        nameWithType: GenrPopulation.Binary_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Binary_Char
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Binary_Char
  Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*
        name: Rand_Char
        nameWithType: GenrPopulation.Rand_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char*
        name: Rand_Char
        nameWithType: GenrPopulation.Rand_Char
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.Rand_Char
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.Rand_Char
  Laga.GeneticAlgorithm.GenrPopulation.SizePop*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation.SizePop*
        name: SizePop
        nameWithType: GenrPopulation.SizePop
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.SizePop
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation.SizePop*
        name: SizePop
        nameWithType: GenrPopulation.SizePop
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation.SizePop
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.GenrPopulation.SizePop
  Laga.GeneticAlgorithm.GenrPopulation:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.GenrPopulation
        name: GenrPopulation
        nameWithType: GenrPopulation
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.GenrPopulation
        name: GenrPopulation
        nameWithType: GenrPopulation
        qualifiedName: Laga.GeneticAlgorithm.GenrPopulation
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.GenrPopulation
  Laga.GeneticAlgorithm.Mutation.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.#ctor*
        name: Mutation
        nameWithType: Mutation.Mutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.Mutation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.#ctor*
        name: Mutation
        nameWithType: Mutation.Mutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.Mutation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.#ctor
  Laga.GeneticAlgorithm.Mutation.CharMutation*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.CharMutation*
        name: CharMutation
        nameWithType: Mutation.CharMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.CharMutation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.CharMutation*
        name: CharMutation
        nameWithType: Mutation.CharMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.CharMutation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.CharMutation
  Laga.GeneticAlgorithm.Mutation.Number*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.Number*
        name: Number
        nameWithType: Mutation.Number
        qualifiedName: Laga.GeneticAlgorithm.Mutation.Number
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.Number*
        name: Number
        nameWithType: Mutation.Number
        qualifiedName: Laga.GeneticAlgorithm.Mutation.Number
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.Number
  Laga.GeneticAlgorithm.Mutation.MutationSwap*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.MutationSwap*
        name: MutationSwap
        nameWithType: Mutation.MutationSwap
        qualifiedName: Laga.GeneticAlgorithm.Mutation.MutationSwap
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.MutationSwap*
        name: MutationSwap
        nameWithType: Mutation.MutationSwap
        qualifiedName: Laga.GeneticAlgorithm.Mutation.MutationSwap
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.MutationSwap
  Laga.GeneticAlgorithm.Mutation.NumbMutation*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.NumbMutation*
        name: NumbMutation
        nameWithType: Mutation.NumbMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.NumbMutation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.NumbMutation*
        name: NumbMutation
        nameWithType: Mutation.NumbMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.NumbMutation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.NumbMutation
  Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*
        name: BinaryCharMutation
        nameWithType: Mutation.BinaryCharMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation*
        name: BinaryCharMutation
        nameWithType: Mutation.BinaryCharMutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation.BinaryCharMutation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation
  Laga.GeneticAlgorithm.Mutation:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Mutation
        name: Mutation
        nameWithType: Mutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Mutation
        name: Mutation
        nameWithType: Mutation
        qualifiedName: Laga.GeneticAlgorithm.Mutation
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.Mutation
  Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*
        name: NaturalSelection
        nameWithType: NaturalSelection<T>.NaturalSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.NaturalSelection
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.#ctor*
        name: NaturalSelection
        nameWithType: NaturalSelection(Of T).NaturalSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).NaturalSelection
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor
  Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
        name: RouletteWheel
        nameWithType: NaturalSelection<T>.RouletteWheel
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheel
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel*
        name: RouletteWheel
        nameWithType: NaturalSelection(Of T).RouletteWheel
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheel
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel
  Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*
        name: RouletteWheelNonPolinomicMin2
        nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin2
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin2
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2*
        name: RouletteWheelNonPolinomicMin2
        nameWithType: NaturalSelection(Of T).RouletteWheelNonPolinomicMin2
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin2
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin2
  Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
        name: RouletteWheelNonPolinomicMin
        nameWithType: NaturalSelection<T>.RouletteWheelNonPolinomicMin
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelNonPolinomicMin
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin*
        name: RouletteWheelNonPolinomicMin
        nameWithType: NaturalSelection(Of T).RouletteWheelNonPolinomicMin
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelNonPolinomicMin
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin
  Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
        name: Elitism
        nameWithType: NaturalSelection<T>.Elitism
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.Elitism
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.Elitism*
        name: Elitism
        nameWithType: NaturalSelection(Of T).Elitism
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).Elitism
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism
  Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
        name: RouletteWheelSigmoidal
        nameWithType: NaturalSelection<T>.RouletteWheelSigmoidal
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.RouletteWheelSigmoidal
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal*
        name: RouletteWheelSigmoidal
        nameWithType: NaturalSelection(Of T).RouletteWheelSigmoidal
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).RouletteWheelSigmoidal
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal
  Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
        name: TournamentSelection
        nameWithType: NaturalSelection<T>.TournamentSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection<T>.TournamentSelection
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection*
        name: TournamentSelection
        nameWithType: NaturalSelection(Of T).TournamentSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection(Of T).TournamentSelection
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection
  Laga.GeneticAlgorithm.NaturalSelection`1:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1
        name: NaturalSelection
        nameWithType: NaturalSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.NaturalSelection`1
        name: NaturalSelection
        nameWithType: NaturalSelection
        qualifiedName: Laga.GeneticAlgorithm.NaturalSelection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.NaturalSelection`1
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  Laga.GeneticAlgorithm.Population`1.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.#ctor*
        name: Population
        nameWithType: Population<T>.Population
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Population
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.#ctor*
        name: Population
        nameWithType: Population(Of T).Population
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Population
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.#ctor
  Laga.GeneticAlgorithm.Population`1.Higher*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.Higher*
        name: Higher
        nameWithType: Population<T>.Higher
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Higher
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.Higher*
        name: Higher
        nameWithType: Population(Of T).Higher
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Higher
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.Higher
  Laga.GeneticAlgorithm.Population`1.Add*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.Add*
        name: Add
        nameWithType: Population<T>.Add
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Add
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.Add*
        name: Add
        nameWithType: Population(Of T).Add
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Add
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.Add
  Laga.GeneticAlgorithm.Population`1.Delete*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.Delete*
        name: Delete
        nameWithType: Population<T>.Delete
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Delete
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.Delete*
        name: Delete
        nameWithType: Population(Of T).Delete
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Delete
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.Delete
  Laga.GeneticAlgorithm.Population`1.Lower*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.Lower*
        name: Lower
        nameWithType: Population<T>.Lower
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Lower
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.Lower*
        name: Lower
        nameWithType: Population(Of T).Lower
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Lower
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.Lower
  Laga.GeneticAlgorithm.Population`1.GetChromosome*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.GetChromosome*
        name: GetChromosome
        nameWithType: Population<T>.GetChromosome
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.GetChromosome
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.GetChromosome*
        name: GetChromosome
        nameWithType: Population(Of T).GetChromosome
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).GetChromosome
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.GetChromosome
  Laga.GeneticAlgorithm.Population`1.FitnessAverage*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.FitnessAverage*
        name: FitnessAverage
        nameWithType: Population<T>.FitnessAverage
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.FitnessAverage
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.FitnessAverage*
        name: FitnessAverage
        nameWithType: Population(Of T).FitnessAverage
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).FitnessAverage
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.FitnessAverage
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  Laga.GeneticAlgorithm.Population`1.GetEnumerator*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: Population<T>.GetEnumerator
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.GetEnumerator
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: Population(Of T).GetEnumerator
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).GetEnumerator
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.GetEnumerator
  System.Collections.IEnumerable.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Collections.IEnumerable
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  Laga.GeneticAlgorithm.Population`1.ToString*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.ToString*
        name: ToString
        nameWithType: Population<T>.ToString
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.ToString
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.ToString*
        name: ToString
        nameWithType: Population(Of T).ToString
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).ToString
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.ToString
  Laga.GeneticAlgorithm.Population`1.Count*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1.Count*
        name: Count
        nameWithType: Population<T>.Count
        qualifiedName: Laga.GeneticAlgorithm.Population<T>.Count
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Population`1.Count*
        name: Count
        nameWithType: Population(Of T).Count
        qualifiedName: Laga.GeneticAlgorithm.Population(Of T).Count
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Population`1.Count
  Laga.GeneticAlgorithm.RankingSort.#ctor*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.RankingSort.#ctor*
        name: RankingSort
        nameWithType: RankingSort.RankingSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort.RankingSort
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.RankingSort.#ctor*
        name: RankingSort
        nameWithType: RankingSort.RankingSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort.RankingSort
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.RankingSort.#ctor
  Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
        name: BidirectionalBubbleSort
        nameWithType: RankingSort.BidirectionalBubbleSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort*
        name: BidirectionalBubbleSort
        nameWithType: RankingSort.BidirectionalBubbleSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort
  Laga.GeneticAlgorithm.RankingSort:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.RankingSort
        name: RankingSort
        nameWithType: RankingSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.RankingSort
        name: RankingSort
        nameWithType: RankingSort
        qualifiedName: Laga.GeneticAlgorithm.RankingSort
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.RankingSort
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  Laga.GeneticAlgorithm.Tools.DataReport*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.DataReport*
        name: DataReport
        nameWithType: Tools.DataReport
        qualifiedName: Laga.GeneticAlgorithm.Tools.DataReport
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.DataReport*
        name: DataReport
        nameWithType: Tools.DataReport
        qualifiedName: Laga.GeneticAlgorithm.Tools.DataReport
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.DataReport
  Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger*
        name: BinaryChromosomeToInteger
        nameWithType: Tools.BinaryChromosomeToInteger
        qualifiedName: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger*
        name: BinaryChromosomeToInteger
        nameWithType: Tools.BinaryChromosomeToInteger
        qualifiedName: Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger
  Laga.GeneticAlgorithm.Tools.ExtractDNA*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.ExtractDNA*
        name: ExtractDNA
        nameWithType: Tools.ExtractDNA
        qualifiedName: Laga.GeneticAlgorithm.Tools.ExtractDNA
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.ExtractDNA*
        name: ExtractDNA
        nameWithType: Tools.ExtractDNA
        qualifiedName: Laga.GeneticAlgorithm.Tools.ExtractDNA
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.ExtractDNA
  Laga.GeneticAlgorithm.Tools.MinMaxValue*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.MinMaxValue*
        name: MinMaxValue
        nameWithType: Tools.MinMaxValue
        qualifiedName: Laga.GeneticAlgorithm.Tools.MinMaxValue
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.MinMaxValue*
        name: MinMaxValue
        nameWithType: Tools.MinMaxValue
        qualifiedName: Laga.GeneticAlgorithm.Tools.MinMaxValue
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.MinMaxValue
  Laga.GeneticAlgorithm.Tools.ReversePopulation*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.ReversePopulation*
        name: ReversePopulation
        nameWithType: Tools.ReversePopulation
        qualifiedName: Laga.GeneticAlgorithm.Tools.ReversePopulation
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.ReversePopulation*
        name: ReversePopulation
        nameWithType: Tools.ReversePopulation
        qualifiedName: Laga.GeneticAlgorithm.Tools.ReversePopulation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.ReversePopulation
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Tools.Prefix*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Prefix*
        name: Prefix
        nameWithType: Tools.Prefix
        qualifiedName: Laga.GeneticAlgorithm.Tools.Prefix
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Prefix*
        name: Prefix
        nameWithType: Tools.Prefix
        qualifiedName: Laga.GeneticAlgorithm.Tools.Prefix
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Prefix
  Laga.Geometry.Vector[]:
    name:
      CSharp:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Tools.Parse*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Parse*
        name: Parse
        nameWithType: Tools.Parse
        qualifiedName: Laga.GeneticAlgorithm.Tools.Parse
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Parse*
        name: Parse
        nameWithType: Tools.Parse
        qualifiedName: Laga.GeneticAlgorithm.Tools.Parse
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Parse
  Laga.GeneticAlgorithm.Tools.ParseDblToFloat*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.ParseDblToFloat*
        name: ParseDblToFloat
        nameWithType: Tools.ParseDblToFloat
        qualifiedName: Laga.GeneticAlgorithm.Tools.ParseDblToFloat
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.ParseDblToFloat*
        name: ParseDblToFloat
        nameWithType: Tools.ParseDblToFloat
        qualifiedName: Laga.GeneticAlgorithm.Tools.ParseDblToFloat
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.ParseDblToFloat
  Laga.GeneticAlgorithm.Tools.Reverse*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Reverse*
        name: Reverse
        nameWithType: Tools.Reverse
        qualifiedName: Laga.GeneticAlgorithm.Tools.Reverse
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Reverse*
        name: Reverse
        nameWithType: Tools.Reverse
        qualifiedName: Laga.GeneticAlgorithm.Tools.Reverse
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Reverse
  Laga.GeneticAlgorithm.Tools.Fisher_Yates*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Fisher_Yates*
        name: Fisher_Yates
        nameWithType: Tools.Fisher_Yates
        qualifiedName: Laga.GeneticAlgorithm.Tools.Fisher_Yates
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Fisher_Yates*
        name: Fisher_Yates
        nameWithType: Tools.Fisher_Yates
        qualifiedName: Laga.GeneticAlgorithm.Tools.Fisher_Yates
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Fisher_Yates
  System.Object[]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent*
        name: Fisher_YatesPercent
        nameWithType: Tools.Fisher_YatesPercent
        qualifiedName: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent*
        name: Fisher_YatesPercent
        nameWithType: Tools.Fisher_YatesPercent
        qualifiedName: Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  Laga.GeneticAlgorithm.Tools.RandomCharBinary*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.RandomCharBinary*
        name: RandomCharBinary
        nameWithType: Tools.RandomCharBinary
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomCharBinary
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.RandomCharBinary*
        name: RandomCharBinary
        nameWithType: Tools.RandomCharBinary
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomCharBinary
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.RandomCharBinary
  Laga.GeneticAlgorithm.Tools.RandomChar*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.RandomChar*
        name: RandomChar
        nameWithType: Tools.RandomChar
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomChar
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.RandomChar*
        name: RandomChar
        nameWithType: Tools.RandomChar
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomChar
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.RandomChar
  Laga.GeneticAlgorithm.Tools.RandomInt*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.RandomInt*
        name: RandomInt
        nameWithType: Tools.RandomInt
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomInt
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.RandomInt*
        name: RandomInt
        nameWithType: Tools.RandomInt
        qualifiedName: Laga.GeneticAlgorithm.Tools.RandomInt
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.RandomInt
  Laga.GeneticAlgorithm.Tools.Mom_Dad*:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools.Mom_Dad*
        name: Mom_Dad
        nameWithType: Tools.Mom_Dad
        qualifiedName: Laga.GeneticAlgorithm.Tools.Mom_Dad
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools.Mom_Dad*
        name: Mom_Dad
        nameWithType: Tools.Mom_Dad
        qualifiedName: Laga.GeneticAlgorithm.Tools.Mom_Dad
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.GeneticAlgorithm.Tools.Mom_Dad
  Laga.GeneticAlgorithm.Tools:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Tools
        name: Tools
        nameWithType: Tools
        qualifiedName: Laga.GeneticAlgorithm.Tools
        isExternal: true
      VB:
      - id: Laga.GeneticAlgorithm.Tools
        name: Tools
        nameWithType: Tools
        qualifiedName: Laga.GeneticAlgorithm.Tools
        isExternal: true
    isDefinition: true
    commentId: T:Laga.GeneticAlgorithm.Tools
  Laga.Geometry:
    name:
      CSharp:
      - name: Laga.Geometry
        nameWithType: Laga.Geometry
        qualifiedName: Laga.Geometry
        isExternal: true
      VB:
      - name: Laga.Geometry
        nameWithType: Laga.Geometry
        qualifiedName: Laga.Geometry
    isDefinition: true
    commentId: N:Laga.Geometry
  Laga.Geometry.Vector:
    name:
      CSharp:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
    isDefinition: true
    parent: Laga.Geometry
    commentId: T:Laga.Geometry.Vector
  Laga.Geometry.Line.#ctor*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.#ctor*
        name: Line
        nameWithType: Line.Line
        qualifiedName: Laga.Geometry.Line.Line
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.#ctor*
        name: Line
        nameWithType: Line.Line
        qualifiedName: Laga.Geometry.Line.Line
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.#ctor
  Laga.Geometry.Line:
    name:
      CSharp:
      - id: Laga.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Laga.Geometry.Line
        isExternal: true
      VB:
      - id: Laga.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Laga.Geometry.Line
        isExternal: true
    isDefinition: true
    parent: Laga.Geometry
    commentId: T:Laga.Geometry.Line
  Laga.Geometry.Line.IsParallelTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.IsParallelTo*
        name: IsParallelTo
        nameWithType: Line.IsParallelTo
        qualifiedName: Laga.Geometry.Line.IsParallelTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.IsParallelTo*
        name: IsParallelTo
        nameWithType: Line.IsParallelTo
        qualifiedName: Laga.Geometry.Line.IsParallelTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.IsParallelTo
  Laga.Geometry.Line.IsCoincidentTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.IsCoincidentTo*
        name: IsCoincidentTo
        nameWithType: Line.IsCoincidentTo
        qualifiedName: Laga.Geometry.Line.IsCoincidentTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.IsCoincidentTo*
        name: IsCoincidentTo
        nameWithType: Line.IsCoincidentTo
        qualifiedName: Laga.Geometry.Line.IsCoincidentTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.IsCoincidentTo
  Laga.Geometry.Line.PointAt*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.PointAt*
        name: PointAt
        nameWithType: Line.PointAt
        qualifiedName: Laga.Geometry.Line.PointAt
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.PointAt*
        name: PointAt
        nameWithType: Line.PointAt
        qualifiedName: Laga.Geometry.Line.PointAt
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.PointAt
  Laga.Geometry.Line.IntersectTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.IntersectTo*
        name: IntersectTo
        nameWithType: Line.IntersectTo
        qualifiedName: Laga.Geometry.Line.IntersectTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.IntersectTo*
        name: IntersectTo
        nameWithType: Line.IntersectTo
        qualifiedName: Laga.Geometry.Line.IntersectTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.IntersectTo
  Laga.Geometry.Line.ClosestTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.ClosestTo*
        name: ClosestTo
        nameWithType: Line.ClosestTo
        qualifiedName: Laga.Geometry.Line.ClosestTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.ClosestTo*
        name: ClosestTo
        nameWithType: Line.ClosestTo
        qualifiedName: Laga.Geometry.Line.ClosestTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.ClosestTo
  Laga.Geometry.Line.ToString*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.ToString*
        name: ToString
        nameWithType: Line.ToString
        qualifiedName: Laga.Geometry.Line.ToString
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.ToString*
        name: ToString
        nameWithType: Line.ToString
        qualifiedName: Laga.Geometry.Line.ToString
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.ToString
  Laga.Geometry.Line.StartPoint*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.StartPoint*
        name: StartPoint
        nameWithType: Line.StartPoint
        qualifiedName: Laga.Geometry.Line.StartPoint
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.StartPoint*
        name: StartPoint
        nameWithType: Line.StartPoint
        qualifiedName: Laga.Geometry.Line.StartPoint
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.StartPoint
  Laga.Geometry.Line.EndPoint*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.EndPoint*
        name: EndPoint
        nameWithType: Line.EndPoint
        qualifiedName: Laga.Geometry.Line.EndPoint
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.EndPoint*
        name: EndPoint
        nameWithType: Line.EndPoint
        qualifiedName: Laga.Geometry.Line.EndPoint
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.EndPoint
  Laga.Geometry.Line.Direction*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.Direction*
        name: Direction
        nameWithType: Line.Direction
        qualifiedName: Laga.Geometry.Line.Direction
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.Direction*
        name: Direction
        nameWithType: Line.Direction
        qualifiedName: Laga.Geometry.Line.Direction
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.Direction
  Laga.Geometry.Line.Length*:
    name:
      CSharp:
      - id: Laga.Geometry.Line.Length*
        name: Length
        nameWithType: Line.Length
        qualifiedName: Laga.Geometry.Line.Length
        isExternal: true
      VB:
      - id: Laga.Geometry.Line.Length*
        name: Length
        nameWithType: Line.Length
        qualifiedName: Laga.Geometry.Line.Length
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Line.Length
  Laga.Geometry.Plane.#ctor*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.#ctor*
        name: Plane
        nameWithType: Plane.Plane
        qualifiedName: Laga.Geometry.Plane.Plane
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.#ctor*
        name: Plane
        nameWithType: Plane.Plane
        qualifiedName: Laga.Geometry.Plane.Plane
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.#ctor
  Laga.Geometry.Plane.ToString*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.ToString*
        name: ToString
        nameWithType: Plane.ToString
        qualifiedName: Laga.Geometry.Plane.ToString
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.ToString*
        name: ToString
        nameWithType: Plane.ToString
        qualifiedName: Laga.Geometry.Plane.ToString
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.ToString
  Laga.Geometry.Plane.DistanceTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.DistanceTo*
        name: DistanceTo
        nameWithType: Plane.DistanceTo
        qualifiedName: Laga.Geometry.Plane.DistanceTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.DistanceTo*
        name: DistanceTo
        nameWithType: Plane.DistanceTo
        qualifiedName: Laga.Geometry.Plane.DistanceTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.DistanceTo
  Laga.Geometry.Plane.PointAt*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.PointAt*
        name: PointAt
        nameWithType: Plane.PointAt
        qualifiedName: Laga.Geometry.Plane.PointAt
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.PointAt*
        name: PointAt
        nameWithType: Plane.PointAt
        qualifiedName: Laga.Geometry.Plane.PointAt
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.PointAt
  Laga.Geometry.Plane:
    name:
      CSharp:
      - id: Laga.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Laga.Geometry.Plane
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Laga.Geometry.Plane
        isExternal: true
    isDefinition: true
    parent: Laga.Geometry
    commentId: T:Laga.Geometry.Plane
  Laga.Geometry.Plane.IsParallelTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.IsParallelTo*
        name: IsParallelTo
        nameWithType: Plane.IsParallelTo
        qualifiedName: Laga.Geometry.Plane.IsParallelTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.IsParallelTo*
        name: IsParallelTo
        nameWithType: Plane.IsParallelTo
        qualifiedName: Laga.Geometry.Plane.IsParallelTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.IsParallelTo
  Laga.Geometry.Plane.IsCoincidentTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.IsCoincidentTo*
        name: IsCoincidentTo
        nameWithType: Plane.IsCoincidentTo
        qualifiedName: Laga.Geometry.Plane.IsCoincidentTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.IsCoincidentTo*
        name: IsCoincidentTo
        nameWithType: Plane.IsCoincidentTo
        qualifiedName: Laga.Geometry.Plane.IsCoincidentTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.IsCoincidentTo
  Laga.Geometry.Plane.IntersectTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.IntersectTo*
        name: IntersectTo
        nameWithType: Plane.IntersectTo
        qualifiedName: Laga.Geometry.Plane.IntersectTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.IntersectTo*
        name: IntersectTo
        nameWithType: Plane.IntersectTo
        qualifiedName: Laga.Geometry.Plane.IntersectTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.IntersectTo
  Laga.Geometry.Plane.Cz*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.Cz*
        name: Cz
        nameWithType: Plane.Cz
        qualifiedName: Laga.Geometry.Plane.Cz
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.Cz*
        name: Cz
        nameWithType: Plane.Cz
        qualifiedName: Laga.Geometry.Plane.Cz
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.Cz
  Laga.Geometry.Plane.By*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.By*
        name: By
        nameWithType: Plane.By
        qualifiedName: Laga.Geometry.Plane.By
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.By*
        name: By
        nameWithType: Plane.By
        qualifiedName: Laga.Geometry.Plane.By
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.By
  Laga.Geometry.Plane.Ax*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.Ax*
        name: Ax
        nameWithType: Plane.Ax
        qualifiedName: Laga.Geometry.Plane.Ax
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.Ax*
        name: Ax
        nameWithType: Plane.Ax
        qualifiedName: Laga.Geometry.Plane.Ax
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.Ax
  Laga.Geometry.Plane.Origin*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.Origin*
        name: Origin
        nameWithType: Plane.Origin
        qualifiedName: Laga.Geometry.Plane.Origin
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.Origin*
        name: Origin
        nameWithType: Plane.Origin
        qualifiedName: Laga.Geometry.Plane.Origin
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.Origin
  Laga.Geometry.Plane.Norm*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.Norm*
        name: Norm
        nameWithType: Plane.Norm
        qualifiedName: Laga.Geometry.Plane.Norm
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.Norm*
        name: Norm
        nameWithType: Plane.Norm
        qualifiedName: Laga.Geometry.Plane.Norm
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.Norm
  Laga.Geometry.Plane.VectorU*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.VectorU*
        name: VectorU
        nameWithType: Plane.VectorU
        qualifiedName: Laga.Geometry.Plane.VectorU
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.VectorU*
        name: VectorU
        nameWithType: Plane.VectorU
        qualifiedName: Laga.Geometry.Plane.VectorU
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.VectorU
  Laga.Geometry.Plane.VectorV*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.VectorV*
        name: VectorV
        nameWithType: Plane.VectorV
        qualifiedName: Laga.Geometry.Plane.VectorV
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.VectorV*
        name: VectorV
        nameWithType: Plane.VectorV
        qualifiedName: Laga.Geometry.Plane.VectorV
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.VectorV
  Laga.Geometry.Plane.ConstantTerm*:
    name:
      CSharp:
      - id: Laga.Geometry.Plane.ConstantTerm*
        name: ConstantTerm
        nameWithType: Plane.ConstantTerm
        qualifiedName: Laga.Geometry.Plane.ConstantTerm
        isExternal: true
      VB:
      - id: Laga.Geometry.Plane.ConstantTerm*
        name: ConstantTerm
        nameWithType: Plane.ConstantTerm
        qualifiedName: Laga.Geometry.Plane.ConstantTerm
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Plane.ConstantTerm
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  Laga.Geometry.Vector.#ctor*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.#ctor*
        name: Vector
        nameWithType: Vector.Vector
        qualifiedName: Laga.Geometry.Vector.Vector
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.#ctor*
        name: Vector
        nameWithType: Vector.Vector
        qualifiedName: Laga.Geometry.Vector.Vector
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.#ctor
  Laga.Geometry.Vector.OrthogonalTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.OrthogonalTo*
        name: OrthogonalTo
        nameWithType: Vector.OrthogonalTo
        qualifiedName: Laga.Geometry.Vector.OrthogonalTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.OrthogonalTo*
        name: OrthogonalTo
        nameWithType: Vector.OrthogonalTo
        qualifiedName: Laga.Geometry.Vector.OrthogonalTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.OrthogonalTo
  Laga.Geometry.Vector.CrossProduct*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.CrossProduct*
        name: CrossProduct
        nameWithType: Vector.CrossProduct
        qualifiedName: Laga.Geometry.Vector.CrossProduct
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.CrossProduct*
        name: CrossProduct
        nameWithType: Vector.CrossProduct
        qualifiedName: Laga.Geometry.Vector.CrossProduct
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.CrossProduct
  Laga.Geometry.Vector.CrossProductLength*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.CrossProductLength*
        name: CrossProductLength
        nameWithType: Vector.CrossProductLength
        qualifiedName: Laga.Geometry.Vector.CrossProductLength
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.CrossProductLength*
        name: CrossProductLength
        nameWithType: Vector.CrossProductLength
        qualifiedName: Laga.Geometry.Vector.CrossProductLength
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.CrossProductLength
  Laga.Geometry.Vector.ComponentProjectTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.ComponentProjectTo*
        name: ComponentProjectTo
        nameWithType: Vector.ComponentProjectTo
        qualifiedName: Laga.Geometry.Vector.ComponentProjectTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.ComponentProjectTo*
        name: ComponentProjectTo
        nameWithType: Vector.ComponentProjectTo
        qualifiedName: Laga.Geometry.Vector.ComponentProjectTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.ComponentProjectTo
  Laga.Geometry.Vector.ComponentOrthogonalTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.ComponentOrthogonalTo*
        name: ComponentOrthogonalTo
        nameWithType: Vector.ComponentOrthogonalTo
        qualifiedName: Laga.Geometry.Vector.ComponentOrthogonalTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.ComponentOrthogonalTo*
        name: ComponentOrthogonalTo
        nameWithType: Vector.ComponentOrthogonalTo
        qualifiedName: Laga.Geometry.Vector.ComponentOrthogonalTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.ComponentOrthogonalTo
  Laga.Geometry.Vector.IsVectorCero*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.IsVectorCero*
        name: IsVectorCero
        nameWithType: Vector.IsVectorCero
        qualifiedName: Laga.Geometry.Vector.IsVectorCero
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.IsVectorCero*
        name: IsVectorCero
        nameWithType: Vector.IsVectorCero
        qualifiedName: Laga.Geometry.Vector.IsVectorCero
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.IsVectorCero
  Laga.Geometry.Vector.IsOrthogonalTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.IsOrthogonalTo*
        name: IsOrthogonalTo
        nameWithType: Vector.IsOrthogonalTo
        qualifiedName: Laga.Geometry.Vector.IsOrthogonalTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.IsOrthogonalTo*
        name: IsOrthogonalTo
        nameWithType: Vector.IsOrthogonalTo
        qualifiedName: Laga.Geometry.Vector.IsOrthogonalTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.IsOrthogonalTo
  Laga.Geometry.Vector.IsParallelTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.IsParallelTo*
        name: IsParallelTo
        nameWithType: Vector.IsParallelTo
        qualifiedName: Laga.Geometry.Vector.IsParallelTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.IsParallelTo*
        name: IsParallelTo
        nameWithType: Vector.IsParallelTo
        qualifiedName: Laga.Geometry.Vector.IsParallelTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.IsParallelTo
  Laga.Geometry.Vector.DotProduct*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.DotProduct*
        name: DotProduct
        nameWithType: Vector.DotProduct
        qualifiedName: Laga.Geometry.Vector.DotProduct
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.DotProduct*
        name: DotProduct
        nameWithType: Vector.DotProduct
        qualifiedName: Laga.Geometry.Vector.DotProduct
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.DotProduct
  Laga.Geometry.Vector.Angle*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.Angle*
        name: Angle
        nameWithType: Vector.Angle
        qualifiedName: Laga.Geometry.Vector.Angle
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.Angle*
        name: Angle
        nameWithType: Vector.Angle
        qualifiedName: Laga.Geometry.Vector.Angle
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.Angle
  Laga.Geometry.Vector.DistanceTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.DistanceTo*
        name: DistanceTo
        nameWithType: Vector.DistanceTo
        qualifiedName: Laga.Geometry.Vector.DistanceTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.DistanceTo*
        name: DistanceTo
        nameWithType: Vector.DistanceTo
        qualifiedName: Laga.Geometry.Vector.DistanceTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.DistanceTo
  Laga.Geometry.Vector.Normalize*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.Normalize*
        name: Normalize
        nameWithType: Vector.Normalize
        qualifiedName: Laga.Geometry.Vector.Normalize
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.Normalize*
        name: Normalize
        nameWithType: Vector.Normalize
        qualifiedName: Laga.Geometry.Vector.Normalize
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.Normalize
  Laga.Geometry.Vector.op_Addition*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.op_Addition*
        name: Addition
        nameWithType: Vector.Addition
        qualifiedName: Laga.Geometry.Vector.Addition
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.op_Addition*
        name: Addition
        nameWithType: Vector.Addition
        qualifiedName: Laga.Geometry.Vector.Addition
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.op_Addition
  Laga.Geometry.Vector.op_Subtraction*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.op_Subtraction*
        name: Subtraction
        nameWithType: Vector.Subtraction
        qualifiedName: Laga.Geometry.Vector.Subtraction
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.op_Subtraction*
        name: Subtraction
        nameWithType: Vector.Subtraction
        qualifiedName: Laga.Geometry.Vector.Subtraction
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.op_Subtraction
  Laga.Geometry.Vector.op_Multiply*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.op_Multiply*
        name: Multiply
        nameWithType: Vector.Multiply
        qualifiedName: Laga.Geometry.Vector.Multiply
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.op_Multiply*
        name: Multiply
        nameWithType: Vector.Multiply
        qualifiedName: Laga.Geometry.Vector.Multiply
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.op_Multiply
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  Laga.Geometry.Vector.ToString*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.ToString*
        name: ToString
        nameWithType: Vector.ToString
        qualifiedName: Laga.Geometry.Vector.ToString
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.ToString*
        name: ToString
        nameWithType: Vector.ToString
        qualifiedName: Laga.Geometry.Vector.ToString
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.ToString
  System.Collections.Generic.List{Laga.Geometry.Vector}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Laga.Geometry.Vector
        name: Vector
        nameWithType: Vector
        qualifiedName: Laga.Geometry.Vector
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Laga.Geometry.Vector}
  Laga.Geometry.Vector.Interpolation*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.Interpolation*
        name: Interpolation
        nameWithType: Vector.Interpolation
        qualifiedName: Laga.Geometry.Vector.Interpolation
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.Interpolation*
        name: Interpolation
        nameWithType: Vector.Interpolation
        qualifiedName: Laga.Geometry.Vector.Interpolation
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.Interpolation
  Laga.Geometry.Vector.EqualTo*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.EqualTo*
        name: EqualTo
        nameWithType: Vector.EqualTo
        qualifiedName: Laga.Geometry.Vector.EqualTo
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.EqualTo*
        name: EqualTo
        nameWithType: Vector.EqualTo
        qualifiedName: Laga.Geometry.Vector.EqualTo
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.EqualTo
  Laga.Geometry.Vector.X*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.X*
        name: X
        nameWithType: Vector.X
        qualifiedName: Laga.Geometry.Vector.X
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.X*
        name: X
        nameWithType: Vector.X
        qualifiedName: Laga.Geometry.Vector.X
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.X
  Laga.Geometry.Vector.Y*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.Y*
        name: Y
        nameWithType: Vector.Y
        qualifiedName: Laga.Geometry.Vector.Y
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.Y*
        name: Y
        nameWithType: Vector.Y
        qualifiedName: Laga.Geometry.Vector.Y
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.Y
  Laga.Geometry.Vector.Z*:
    name:
      CSharp:
      - id: Laga.Geometry.Vector.Z*
        name: Z
        nameWithType: Vector.Z
        qualifiedName: Laga.Geometry.Vector.Z
        isExternal: true
      VB:
      - id: Laga.Geometry.Vector.Z*
        name: Z
        nameWithType: Vector.Z
        qualifiedName: Laga.Geometry.Vector.Z
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Geometry.Vector.Z
  System.Collections.Generic.List{System.Collections.Generic.List{System.String}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.String}}
  Laga.IO.IOCSV.#ctor*:
    name:
      CSharp:
      - id: Laga.IO.IOCSV.#ctor*
        name: IOCSV
        nameWithType: IOCSV.IOCSV
        qualifiedName: Laga.IO.IOCSV.IOCSV
        isExternal: true
      VB:
      - id: Laga.IO.IOCSV.#ctor*
        name: IOCSV
        nameWithType: IOCSV.IOCSV
        qualifiedName: Laga.IO.IOCSV.IOCSV
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOCSV.#ctor
  Laga.GeneticAlgorithm.Population{System.String}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Population`1
        name: Population
        nameWithType: Population
        qualifiedName: Laga.GeneticAlgorithm.Population
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Population`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Population{System.String}
  Laga.GeneticAlgorithm.Chromosome{System.String}:
    name:
      CSharp:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Laga.GeneticAlgorithm.Chromosome`1
        name: Chromosome
        nameWithType: Chromosome
        qualifiedName: Laga.GeneticAlgorithm.Chromosome
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Laga.GeneticAlgorithm.Chromosome`1
    parent: Laga.GeneticAlgorithm
    commentId: T:Laga.GeneticAlgorithm.Chromosome{System.String}
  Laga.IO.IOCSV.AddRowData*:
    name:
      CSharp:
      - id: Laga.IO.IOCSV.AddRowData*
        name: AddRowData
        nameWithType: IOCSV.AddRowData
        qualifiedName: Laga.IO.IOCSV.AddRowData
        isExternal: true
      VB:
      - id: Laga.IO.IOCSV.AddRowData*
        name: AddRowData
        nameWithType: IOCSV.AddRowData
        qualifiedName: Laga.IO.IOCSV.AddRowData
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOCSV.AddRowData
  Laga.IO.IOCSV.SaveAndClose*:
    name:
      CSharp:
      - id: Laga.IO.IOCSV.SaveAndClose*
        name: SaveAndClose
        nameWithType: IOCSV.SaveAndClose
        qualifiedName: Laga.IO.IOCSV.SaveAndClose
        isExternal: true
      VB:
      - id: Laga.IO.IOCSV.SaveAndClose*
        name: SaveAndClose
        nameWithType: IOCSV.SaveAndClose
        qualifiedName: Laga.IO.IOCSV.SaveAndClose
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOCSV.SaveAndClose
  Laga.IO.IOCSV:
    name:
      CSharp:
      - id: Laga.IO.IOCSV
        name: IOCSV
        nameWithType: IOCSV
        qualifiedName: Laga.IO.IOCSV
        isExternal: true
      VB:
      - id: Laga.IO.IOCSV
        name: IOCSV
        nameWithType: IOCSV
        qualifiedName: Laga.IO.IOCSV
        isExternal: true
    isDefinition: true
    commentId: T:Laga.IO.IOCSV
  Laga.IO.IODataFolder.#ctor*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.#ctor*
        name: IODataFolder
        nameWithType: IODataFolder.IODataFolder
        qualifiedName: Laga.IO.IODataFolder.IODataFolder
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.#ctor*
        name: IODataFolder
        nameWithType: IODataFolder.IODataFolder
        qualifiedName: Laga.IO.IODataFolder.IODataFolder
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.#ctor
  Laga.IO.IODataFolder.GetFileName*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.GetFileName*
        name: GetFileName
        nameWithType: IODataFolder.GetFileName
        qualifiedName: Laga.IO.IODataFolder.GetFileName
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.GetFileName*
        name: GetFileName
        nameWithType: IODataFolder.GetFileName
        qualifiedName: Laga.IO.IODataFolder.GetFileName
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.GetFileName
  Laga.IO.IODataFolder.ReadSelectiveData*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.ReadSelectiveData*
        name: ReadSelectiveData
        nameWithType: IODataFolder.ReadSelectiveData
        qualifiedName: Laga.IO.IODataFolder.ReadSelectiveData
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.ReadSelectiveData*
        name: ReadSelectiveData
        nameWithType: IODataFolder.ReadSelectiveData
        qualifiedName: Laga.IO.IODataFolder.ReadSelectiveData
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.ReadSelectiveData
  Laga.IO.IODataFolder.RootFolder*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.RootFolder*
        name: RootFolder
        nameWithType: IODataFolder.RootFolder
        qualifiedName: Laga.IO.IODataFolder.RootFolder
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.RootFolder*
        name: RootFolder
        nameWithType: IODataFolder.RootFolder
        qualifiedName: Laga.IO.IODataFolder.RootFolder
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.RootFolder
  Laga.IO.IODataFolder.ListPathFileNames*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.ListPathFileNames*
        name: ListPathFileNames
        nameWithType: IODataFolder.ListPathFileNames
        qualifiedName: Laga.IO.IODataFolder.ListPathFileNames
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.ListPathFileNames*
        name: ListPathFileNames
        nameWithType: IODataFolder.ListPathFileNames
        qualifiedName: Laga.IO.IODataFolder.ListPathFileNames
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.ListPathFileNames
  Laga.IO.IODataFolder.ListFileNames*:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder.ListFileNames*
        name: ListFileNames
        nameWithType: IODataFolder.ListFileNames
        qualifiedName: Laga.IO.IODataFolder.ListFileNames
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder.ListFileNames*
        name: ListFileNames
        nameWithType: IODataFolder.ListFileNames
        qualifiedName: Laga.IO.IODataFolder.ListFileNames
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IODataFolder.ListFileNames
  Laga.IO.IODataFolder:
    name:
      CSharp:
      - id: Laga.IO.IODataFolder
        name: IODataFolder
        nameWithType: IODataFolder
        qualifiedName: Laga.IO.IODataFolder
        isExternal: true
      VB:
      - id: Laga.IO.IODataFolder
        name: IODataFolder
        nameWithType: IODataFolder
        qualifiedName: Laga.IO.IODataFolder
        isExternal: true
    isDefinition: true
    commentId: T:Laga.IO.IODataFolder
  Laga.IO.IOTextData.#ctor*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.#ctor*
        name: IOTextData
        nameWithType: IOTextData.IOTextData
        qualifiedName: Laga.IO.IOTextData.IOTextData
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.#ctor*
        name: IOTextData
        nameWithType: IOTextData.IOTextData
        qualifiedName: Laga.IO.IOTextData.IOTextData
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.#ctor
  Laga.IO:
    name:
      CSharp:
      - name: Laga.IO
        nameWithType: Laga.IO
        qualifiedName: Laga.IO
        isExternal: true
      VB:
      - name: Laga.IO
        nameWithType: Laga.IO
        qualifiedName: Laga.IO
    isDefinition: true
    commentId: N:Laga.IO
  Laga.IO.IOTextData.EncodingType:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.EncodingType
        name: IOTextData.EncodingType
        nameWithType: IOTextData.EncodingType
        qualifiedName: Laga.IO.IOTextData.EncodingType
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.EncodingType
        name: IOTextData.EncodingType
        nameWithType: IOTextData.EncodingType
        qualifiedName: Laga.IO.IOTextData.EncodingType
        isExternal: true
    isDefinition: true
    parent: Laga.IO
    commentId: T:Laga.IO.IOTextData.EncodingType
  Laga.IO.IOTextData.ConvertFileEncoding*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.ConvertFileEncoding*
        name: ConvertFileEncoding
        nameWithType: IOTextData.ConvertFileEncoding
        qualifiedName: Laga.IO.IOTextData.ConvertFileEncoding
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.ConvertFileEncoding*
        name: ConvertFileEncoding
        nameWithType: IOTextData.ConvertFileEncoding
        qualifiedName: Laga.IO.IOTextData.ConvertFileEncoding
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.ConvertFileEncoding
  Laga.IO.IOTextData.CreateFile*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.CreateFile*
        name: CreateFile
        nameWithType: IOTextData.CreateFile
        qualifiedName: Laga.IO.IOTextData.CreateFile
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.CreateFile*
        name: CreateFile
        nameWithType: IOTextData.CreateFile
        qualifiedName: Laga.IO.IOTextData.CreateFile
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.CreateFile
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.String,System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  Laga.IO.IOTextData.CountWordsTopN*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.CountWordsTopN*
        name: CountWordsTopN
        nameWithType: IOTextData.CountWordsTopN
        qualifiedName: Laga.IO.IOTextData.CountWordsTopN
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.CountWordsTopN*
        name: CountWordsTopN
        nameWithType: IOTextData.CountWordsTopN
        qualifiedName: Laga.IO.IOTextData.CountWordsTopN
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.CountWordsTopN
  Laga.IO.IOTextData.GetWords*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.GetWords*
        name: GetWords
        nameWithType: IOTextData.GetWords
        qualifiedName: Laga.IO.IOTextData.GetWords
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.GetWords*
        name: GetWords
        nameWithType: IOTextData.GetWords
        qualifiedName: Laga.IO.IOTextData.GetWords
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.GetWords
  Laga.IO.IOTextData.RemoveNumbers*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.RemoveNumbers*
        name: RemoveNumbers
        nameWithType: IOTextData.RemoveNumbers
        qualifiedName: Laga.IO.IOTextData.RemoveNumbers
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.RemoveNumbers*
        name: RemoveNumbers
        nameWithType: IOTextData.RemoveNumbers
        qualifiedName: Laga.IO.IOTextData.RemoveNumbers
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.RemoveNumbers
  Laga.IO.IOTextData.RemoveDiacritics*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.RemoveDiacritics*
        name: RemoveDiacritics
        nameWithType: IOTextData.RemoveDiacritics
        qualifiedName: Laga.IO.IOTextData.RemoveDiacritics
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.RemoveDiacritics*
        name: RemoveDiacritics
        nameWithType: IOTextData.RemoveDiacritics
        qualifiedName: Laga.IO.IOTextData.RemoveDiacritics
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.RemoveDiacritics
  Laga.IO.IOTextData.RemoveByLength*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.RemoveByLength*
        name: RemoveByLength
        nameWithType: IOTextData.RemoveByLength
        qualifiedName: Laga.IO.IOTextData.RemoveByLength
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.RemoveByLength*
        name: RemoveByLength
        nameWithType: IOTextData.RemoveByLength
        qualifiedName: Laga.IO.IOTextData.RemoveByLength
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.RemoveByLength
  System.Text:
    name:
      CSharp:
      - name: System.Text
        nameWithType: System.Text
        qualifiedName: System.Text
        isExternal: true
      VB:
      - name: System.Text
        nameWithType: System.Text
        qualifiedName: System.Text
    isDefinition: true
    commentId: N:System.Text
  System.Text.Encoding:
    name:
      CSharp:
      - id: System.Text.Encoding
        name: Encoding
        nameWithType: Encoding
        qualifiedName: System.Text.Encoding
        isExternal: true
      VB:
      - id: System.Text.Encoding
        name: Encoding
        nameWithType: Encoding
        qualifiedName: System.Text.Encoding
        isExternal: true
    isDefinition: true
    parent: System.Text
    commentId: T:System.Text.Encoding
  Laga.IO.IOTextData.SourceEncoding*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.SourceEncoding*
        name: SourceEncoding
        nameWithType: IOTextData.SourceEncoding
        qualifiedName: Laga.IO.IOTextData.SourceEncoding
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.SourceEncoding*
        name: SourceEncoding
        nameWithType: IOTextData.SourceEncoding
        qualifiedName: Laga.IO.IOTextData.SourceEncoding
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.SourceEncoding
  Laga.IO.IOTextData.DataText*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.DataText*
        name: DataText
        nameWithType: IOTextData.DataText
        qualifiedName: Laga.IO.IOTextData.DataText
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.DataText*
        name: DataText
        nameWithType: IOTextData.DataText
        qualifiedName: Laga.IO.IOTextData.DataText
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.DataText
  Laga.IO.IOTextData.DataTextLine*:
    name:
      CSharp:
      - id: Laga.IO.IOTextData.DataTextLine*
        name: DataTextLine
        nameWithType: IOTextData.DataTextLine
        qualifiedName: Laga.IO.IOTextData.DataTextLine
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData.DataTextLine*
        name: DataTextLine
        nameWithType: IOTextData.DataTextLine
        qualifiedName: Laga.IO.IOTextData.DataTextLine
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.IO.IOTextData.DataTextLine
  Laga.IO.IOTextData:
    name:
      CSharp:
      - id: Laga.IO.IOTextData
        name: IOTextData
        nameWithType: IOTextData
        qualifiedName: Laga.IO.IOTextData
        isExternal: true
      VB:
      - id: Laga.IO.IOTextData
        name: IOTextData
        nameWithType: IOTextData
        qualifiedName: Laga.IO.IOTextData
        isExternal: true
    isDefinition: true
    commentId: T:Laga.IO.IOTextData
  System.Collections.Generic.List{System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Int32}
  Laga.Numbers.Function.ThreeXplusOne*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.ThreeXplusOne*
        name: ThreeXplusOne
        nameWithType: Function.ThreeXplusOne
        qualifiedName: Laga.Numbers.Function.ThreeXplusOne
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.ThreeXplusOne*
        name: ThreeXplusOne
        nameWithType: Function.ThreeXplusOne
        qualifiedName: Laga.Numbers.Function.ThreeXplusOne
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.ThreeXplusOne
  Laga.Numbers.Function.NumberDistinct*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.NumberDistinct*
        name: NumberDistinct
        nameWithType: Function.NumberDistinct
        qualifiedName: Laga.Numbers.Function.NumberDistinct
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.NumberDistinct*
        name: NumberDistinct
        nameWithType: Function.NumberDistinct
        qualifiedName: Laga.Numbers.Function.NumberDistinct
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.NumberDistinct
  Laga.Numbers.Function.Sigmoid*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.Sigmoid*
        name: Sigmoid
        nameWithType: Function.Sigmoid
        qualifiedName: Laga.Numbers.Function.Sigmoid
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.Sigmoid*
        name: Sigmoid
        nameWithType: Function.Sigmoid
        qualifiedName: Laga.Numbers.Function.Sigmoid
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.Sigmoid
  Laga.Numbers.Function.Deg2Rad*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.Deg2Rad*
        name: Deg2Rad
        nameWithType: Function.Deg2Rad
        qualifiedName: Laga.Numbers.Function.Deg2Rad
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.Deg2Rad*
        name: Deg2Rad
        nameWithType: Function.Deg2Rad
        qualifiedName: Laga.Numbers.Function.Deg2Rad
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.Deg2Rad
  Laga.Numbers.Function.Rad2Deg*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.Rad2Deg*
        name: Rad2Deg
        nameWithType: Function.Rad2Deg
        qualifiedName: Laga.Numbers.Function.Rad2Deg
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.Rad2Deg*
        name: Rad2Deg
        nameWithType: Function.Rad2Deg
        qualifiedName: Laga.Numbers.Function.Rad2Deg
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.Rad2Deg
  Laga.Numbers.Function.#ctor*:
    name:
      CSharp:
      - id: Laga.Numbers.Function.#ctor*
        name: Function
        nameWithType: Function.Function
        qualifiedName: Laga.Numbers.Function.Function
        isExternal: true
      VB:
      - id: Laga.Numbers.Function.#ctor*
        name: Function
        nameWithType: Function.Function
        qualifiedName: Laga.Numbers.Function.Function
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Function.#ctor
  Laga.Numbers.Function:
    name:
      CSharp:
      - id: Laga.Numbers.Function
        name: Function
        nameWithType: Function
        qualifiedName: Laga.Numbers.Function
        isExternal: true
      VB:
      - id: Laga.Numbers.Function
        name: Function
        nameWithType: Function
        qualifiedName: Laga.Numbers.Function
        isExternal: true
    isDefinition: true
    commentId: T:Laga.Numbers.Function
  Laga.Numbers.Rand.Numbers*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.Numbers*
        name: Numbers
        nameWithType: Rand.Numbers
        qualifiedName: Laga.Numbers.Rand.Numbers
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.Numbers*
        name: Numbers
        nameWithType: Rand.Numbers
        qualifiedName: Laga.Numbers.Rand.Numbers
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.Numbers
  Laga.Numbers.Rand.IntNumber*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.IntNumber*
        name: IntNumber
        nameWithType: Rand.IntNumber
        qualifiedName: Laga.Numbers.Rand.IntNumber
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.IntNumber*
        name: IntNumber
        nameWithType: Rand.IntNumber
        qualifiedName: Laga.Numbers.Rand.IntNumber
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.IntNumber
  Laga.Numbers.Rand.DblNumber*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.DblNumber*
        name: DblNumber
        nameWithType: Rand.DblNumber
        qualifiedName: Laga.Numbers.Rand.DblNumber
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.DblNumber*
        name: DblNumber
        nameWithType: Rand.DblNumber
        qualifiedName: Laga.Numbers.Rand.DblNumber
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.DblNumber
  Laga.Numbers.Rand.FltNumber*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.FltNumber*
        name: FltNumber
        nameWithType: Rand.FltNumber
        qualifiedName: Laga.Numbers.Rand.FltNumber
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.FltNumber*
        name: FltNumber
        nameWithType: Rand.FltNumber
        qualifiedName: Laga.Numbers.Rand.FltNumber
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.FltNumber
  Laga.Numbers.Rand.Character*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.Character*
        name: Character
        nameWithType: Rand.Character
        qualifiedName: Laga.Numbers.Rand.Character
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.Character*
        name: Character
        nameWithType: Rand.Character
        qualifiedName: Laga.Numbers.Rand.Character
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.Character
  Laga.Numbers.Rand.#ctor*:
    name:
      CSharp:
      - id: Laga.Numbers.Rand.#ctor*
        name: Rand
        nameWithType: Rand.Rand
        qualifiedName: Laga.Numbers.Rand.Rand
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand.#ctor*
        name: Rand
        nameWithType: Rand.Rand
        qualifiedName: Laga.Numbers.Rand.Rand
        isExternal: true
    isDefinition: true
    commentId: Overload:Laga.Numbers.Rand.#ctor
  Laga.Numbers.Rand:
    name:
      CSharp:
      - id: Laga.Numbers.Rand
        name: Rand
        nameWithType: Rand
        qualifiedName: Laga.Numbers.Rand
        isExternal: true
      VB:
      - id: Laga.Numbers.Rand
        name: Rand
        nameWithType: Rand
        qualifiedName: Laga.Numbers.Rand
        isExternal: true
    isDefinition: true
    commentId: T:Laga.Numbers.Rand
  Laga.Numbers:
    name:
      CSharp:
      - name: Laga.Numbers
        nameWithType: Laga.Numbers
        qualifiedName: Laga.Numbers
        isExternal: true
      VB:
      - name: Laga.Numbers
        nameWithType: Laga.Numbers
        qualifiedName: Laga.Numbers
    isDefinition: true
    commentId: N:Laga.Numbers
