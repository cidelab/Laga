<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Laga</name>
    </assembly>
    <members>
        <member name="T:Laga.GeneticAlgorithm.Chromosome`1">
            <summary>
            Create and manipulate Chromosomes
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.Count">
            <summary>
            The size of the chromosome
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.chromosome">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Int32)">
            <summary>
            cons 1
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            
            </summary>
            <param name="ListDna"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Chromosome`1.Fitness">
            <summary>
            Get and set the chromosome fitness
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.GetDNA(System.Int32)">
            <summary>
            Get Dna Chromosome at specific index
            </summary>
            <param name="index">index</param>
            <returns>T</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.InsertDNA(System.Int32,`0)">
            <summary>
            Insert DNA in a chromosome at specific Location
            </summary>
            <param name="index">The location in the chromosome</param>
            <param name="DNA">The DNA to insert</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.Add(`0)">
            <summary>
            Add DNA to the Chromosome
            </summary>
            <param name="DNA">The DNA type</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Chromosome`1.Chr2Str(System.String)">
            <summary>
            Converts DNA Chromosome to a String
            </summary>
            <param name="sep">separation</param>
            <returns>string</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Crossover`1">
            <summary>
            Different crossover type operations
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Crossover`1.IndexParent">
            <summary>
            get and set indexes for parents in crossover.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparamref name="T">The choromsome type</typeparamref>
            <param name="matingPool"></param>
            <param name="PopSize"></param>
            <param name="cut"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.RandomPointCrossover(Laga.GeneticAlgorithm.Population{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="matingPool"></param>
            <param name="populationSize"></param>
            <returns>Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(Laga.GeneticAlgorithm.Chromosome{`0},Laga.GeneticAlgorithm.Chromosome{`0},System.Int32)">
            <summary>
            Sinngle Point Chrossover at specific location
            </summary>
            <param name="chromosomeA">Parent A</param>
            <param name="chromosomeB">Parent B</param>
            <param name="cut">Cutting location</param>
            <returns>Chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Object[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Double[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Single[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover`1.SinglePointCrossover(System.Char[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>Char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(6);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(6, 0f, 1f);
            
            sort:
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            Crossover cs = new Crossover();
            char[][] croossovers = cs.SinglePointCrossover(srtPop, 0.8f, 2);
            
            result:
            POPULATION:
            vnqaw: 0.6631602
            smzbu: 0.9322885
            cewwe: 0.8222669
            jsxgr: 0.7555377
            ujklr: 0.181477
            uqmvo: 0.6832687
            
            SORTED POPULATION:
            ujklr: 0.181477
            vnqaw: 0.6631602
            uqmvo: 0.6832687
            jsxgr: 0.7555377
            cewwe: 0.8222669
            smzbu: 0.9322885
            
            CROSSOVER EXAMPLE: 80%
            smwwe // smzbu - cewwe
            cezbu // cewwe - smzbu
            jsklr // jsxgr - ujklr
            ujxgr // ujklr - jsxgr
            
            </code>
            </example>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrChromosome">
            <summary>
            Generate different Chromosome types
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrChromosome.SizeChrom">
            <summary>
            size of the chromosome
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="Size">The Lengthof the Chromosome</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double,System.Double)">
             <summary>
             the method generates a chromosome composed by random doubles
             between min and max.
             </summary>
             <param name="min">The min value in the chromosome</param>
             <param name="max">The max value in the chromosome(exclusive upper bound)</param>
             <returns>double[]</returns>
             <example> How to implement this class:
             <code>
             GenrChromosome chromosome = new GenrChromosome(5);
             double[] Chrom = chromosome.NumberChromosome(0.0, 1.0);
             
             result:
             0.207198212485387, 0.253313632334263, 0.566322204920613, 0.735812343068334, 0.479827285036364
            
             float[] Chrom = chromosome.NumberChromosome(0.0f, 1.0f);
             
             result:
             9.211745E+08, 1.134843E+09, 1.554793E+09, 1.223132E+09, 1.600176E+09
            
             int[] Chrom = chromosome.NumberChromosome(0, 10);
             
             result: 
             8, 3, 7, 2, 1
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single,System.Single)">
            <summary>
            the method generates a chromosome composed by random floats
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>float[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32,System.Int32)">
            <summary>
            the method generates a chromosome composed by random integers
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>int[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary">
            <summary>
            creates a binary chromosome composed by 1s and 0s;
            </summary>
            <returns> a random list of 1s and 0s</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            int[] Chrom = chromosome.NumberChromosomeBinary();
            
            result:
            1, 1, 0, 1, 1
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32,System.Int32)">
            <summary>
            the method generate a number chromosome composed by non repeated numbers between start and start + size(not inclusive).
            the method is based on integer numbers. this method is designed by combinatorial problems.
            </summary>
            <param name="min">the minimum value in the sequence</param>
            /// <param name="max">the maximum value in the sequence</param>
            <returns>a non repeat random integer list</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            char[] Chrom = chromosome.NumberChromosomeSwap(0, 4);
            
            results:
            4, 1, 0, 2, 3
            3, 1, 2, 0, 4
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary">
            <summary>
            Generates a binary chromosome of chars.
            </summary>
            <returns>a random char list of 1s and 0s</returns>
            <example>
            <code>
            GenrChromosome chromosome = new GenrChromosome(5);
            char[] Chrom = chromosome.CharChromosomeBinary();
            
            result:
            0, 1, 0, 1, 0,
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32,System.Int32)">
             <summary>
             Generates an random char chromosome composed by characters.
             See <a href="http://www.asciitable.com/">this link</a> for more information.
             </summary>
             <param name="start">the start number in the table, inclusive</param>
             <param name="end">the end number in the table, exclusive</param>
             <returns>returns a random list of characters</returns>
             <example>
             <code>
             GenrChromosome chromosome = new GenrChromosome(25);
             char[] Chrom = chromosome.CharChromosome(65, 90);
             
             result:
             E, B, C, N, F, C, O, P, C, H, O, U, Q, U, G, L, K, Z, E, K, X, A, L, B, Q,
            
             char[] Chrom = chromosome.CharChromosome(33, 47);
             
             result
             ,, -, !, /, -, ', %, !, %, %, !, /, ,, +, ), *, ), /, |, /, ], +, (, !, +,
             
             char[] Chrom = chromosome.CharChromosome(97, 122);
             
             result
             q, a, h, k, j, d, u, o, d, l, w, b, d, i, l, l, h, c, n, c, s, d, k, r, h,
             </code>
             </example>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrPopulation">
            <summary>
            Generate basic populations
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrPopulation.SizePop">
            <summary>
            SizePopulation
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="SizePopulation">The size of the Population</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.ObjectPopulationSwap(System.Object[],System.Single,System.Boolean)">
             <summary>
             Genr8 a random population based on a chromosome of objects[]
             </summary>
             <param name="SeedChromosome">The seed chromosome to genr8 the population</param>
             <param name="percent">the mutation percent in the population</param>
             <param name="InOut">true to include the seed chromosome in the population</param>
             <returns>Population object[][]</returns>
             <example>
             <code>
             //This is the Agent class
             public class Agent
             {
                private double[] awards;
                public double[] Awards
                {
                    get { return awards; }
                    set { awards = value; }
                }
            
                private readonly string[] labels = new string[] { "forward", "back", "left", "right" };
                public string[] Labels
                {
                    get { return labels; }
                }
            
                private int[] pos;
                public int[] Pos
                {
                    get { return pos; }
                    set { pos = value; }
                }
             }
             
             Here we will creates the Chromosome...
             GenrPopulation pop = new GenrPopulation(5); //population size...
            
             our agent object...
             object[] agentTrace = new object[pop.SizePop];
             Agent agent;
            
             genrChromosome to helps create the data.
             GenrChromosome dtaChrome = new GenrChromosome(agentTrace.Length); 
            
             in this loop we creates the chromosome.
             for(int i = 0; i &lt; agentTrace.Length ; i++)
             {
                 agent = new Agent();
                 dtaChrome.SizeChrom = 4;
                 agent.Awards = dtaChrome.NumberChromosome(0.00, 1.00);
                 dtaChrome.SizeChrom = 2;
                 agent.Pos = dtaChrome.NumberChromosome(0, 8);
                 agentTrace[i] = agent;
             }
            
             And we creates the population for the agents trajectories. 
             that's all.
             Object[][] popAgents = pop.ObjectPopulationSwap(agentTrace, 1.0f, true);
            
             result:
             Chromosome(agents trace) : 0
             Position:(3, 2) - Awards: forward:0.87, back:0.74, left:0.87, right:0.54
             Position:(2, 7) - Awards: forward:0.53, back:0.32, left:0.53, right:0.27
             Position:(1, 1) - Awards: forward:0.34, back:0.48, left:0.1, right:0.89
             Position:(5, 1) - Awards: forward:0.66, back:0.91, left:0.86, right:0.53
             Position:(1, 6) - Awards: forward:0.68, back:0.93, left:0.98, right:0.04
             Position:(5, 2) - Awards: forward:0.39, back:0.93, left:1, right:0.97
             Position:(0, 5) - Awards: forward:0.83, back:0.71, left:0.57, right:0.32
             
             Chromosome(agents trace) : 1
             Position:(3, 2) - Awards: forward:0.87, back:0.74, left:0.87, right:0.54
             Position:(5, 2) - Awards: forward:0.39, back:0.93, left:1, right:0.97
             Position:(5, 1) - Awards: forward:0.66, back:0.91, left:0.86, right:0.53
             Position:(1, 1) - Awards: forward:0.34, back:0.48, left:0.1, right:0.89
             Position:(0, 5) - Awards: forward:0.83, back:0.71, left:0.57, right:0.32
             Position:(2, 7) - Awards: forward:0.53, back:0.32, left:0.53, right:0.27
             Position:(1, 6) - Awards: forward:0.68, back:0.93, left:0.98, right:0.04
             
             Chromosome(agents trace) : 2
             Position:(3, 2) - Awards: forward:0.87, back:0.74, left:0.87, right:0.54
             Position:(5, 2) - Awards: forward:0.39, back:0.93, left:1, right:0.97
             Position:(1, 1) - Awards: forward:0.34, back:0.48, left:0.1, right:0.89
             Position:(2, 7) - Awards: forward:0.53, back:0.32, left:0.53, right:0.27
             Position:(0, 5) - Awards: forward:0.83, back:0.71, left:0.57, right:0.32
             Position:(5, 1) - Awards: forward:0.66, back:0.91, left:0.86, right:0.53
             Position:(1, 6) - Awards: forward:0.68, back:0.93, left:0.98, right:0.04
            
             Chromosome(agents trace) : 3
             Position:(0, 5) - Awards: forward:0.83, back:0.71, left:0.57, right:0.32
             Position:(5, 1) - Awards: forward:0.66, back:0.91, left:0.86, right:0.53
             Position:(1, 1) - Awards: forward:0.34, back:0.48, left:0.1, right:0.89
             Position:(1, 6) - Awards: forward:0.68, back:0.93, left:0.98, right:0.04
             Position:(5, 2) - Awards: forward:0.39, back:0.93, left:1, right:0.97
             Position:(3, 2) - Awards: forward:0.87, back:0.74, left:0.87, right:0.54
             Position:(2, 7) - Awards: forward:0.53, back:0.32, left:0.53, right:0.27
            
             Chromosome(agents trace) : 4
             Position:(5, 1) - Awards: forward:0.66, back:0.91, left:0.86, right:0.53
             Position:(5, 2) - Awards: forward:0.39, back:0.93, left:1, right:0.97
             Position:(3, 2) - Awards: forward:0.87, back:0.74, left:0.87, right:0.54
             Position:(2, 7) - Awards: forward:0.53, back:0.32, left:0.53, right:0.27
             Position:(1, 1) - Awards: forward:0.34, back:0.48, left:0.1, right:0.89
             Position:(1, 6) - Awards: forward:0.68, back:0.93, left:0.98, right:0.04
             Position:(0, 5) - Awards: forward:0.83, back:0.71, left:0.57, right:0.32
             
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Double,System.Double)">
             <summary>
             Genr8 a Population of random double.
             </summary>
             <param name="sizeChromosome">The size of the chromosome</param>
             <param name="min">The minimum value in the chromosome, inclusive</param>
             <param name="max">The maximum value in the chromosome, inclusive</param>
             <returns>Population double[][]</returns>
             <example>
             <code>
             GenrPopulation pop = new GenrPopulation(5);
             double[][] dblPop = pop.NumPopulation(12, 0.00, 1.00);
            
             result for double population
             Chromosome: 0
             - 0.134, 0.623, 0.931, 0.896, 0.945, 0.599, 0.824, 0.837, 0.671, 0.081, 0.496, 0.027,
             Chromosome: 1
             - 0.669, 0.725, 0.667, 0.651, 0.073, 0.215, 0.052, 0.92, 0.371, 0.122, 0.734, 0.535,
             Chromosome: 2
             - 0.741, 0.056, 0.469, 0.699, 0.216, 0.727, 0.221, 0.322, 0.825, 0.301, 0.057, 0.775,
             Chromosome: 3
             - 0.884, 0.257, 0.278, 0.461, 0.152, 0.24, 0.929, 0.364, 0.869, 0.415, 0.995, 0.776,
             Chromosome: 4
             - 0.022, 0.403, 0.101, 0.041, 0.528, 0.667, 0.517, 0.012, 0.889, 0.395, 0.155, 0.888,
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Single,System.Single)">
            <summary>
            Genr8 a Population of random float.
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of random int.
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulationSwap(System.Int32,System.Int32)">
             <summary>
             Genr8 a Population of random integers, between min and max value.
             </summary>
             <param name="min">The minimum value in the chromosome, inclusive</param>
             <param name="max">The maximum value in the chromosome, inclusive</param>
             <returns>Population int[][]</returns>
             <example>
             <code>
             GenrPopulation pop = new GenrPopulation(5);
             int[][] intPop = pop.NumPopulationSwap(0, 10);
            
             results
             Chromosome: 0
             - 1, 4, 8, 6, 2, 10, 9, 5, 0, 7, 3,
             Chromosome: 1
             - 5, 4, 0, 1, 7, 6, 8, 10, 2, 3, 9,
              Chromosome: 2
             - 1, 6, 10, 7, 3, 5, 9, 2, 0, 8, 4,
             Chromosome: 3
             - 9, 1, 4, 6, 10, 2, 7, 5, 8, 0, 3,
             Chromosome: 4
             - 2, 5, 0, 7, 6, 1, 4, 3, 8, 9, 10,
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.BinaryPopulationInt(System.Int32)">
             <summary>
             Genr8 a binary Population 101011...
             </summary>
             <param name="sizeChromosome">The size of the chromosome</param>
             <returns>Population int[][]</returns>
             <example>
             <code>
             GenrPopulation pop = new GenrPopulation(5);
             int[][] intPop = pop.BinaryPopulationInt(20);
            
             result:
             Chromosome: 0
             - 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
             Chromosome: 1
             - 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,
             Chromosome: 2
             - 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
             Chromosome: 3
             - 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1,
             Chromosome: 4
             - 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
             </code>
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.BinaryPopulationChr(System.Int32)">
             <summary>
             Genr8 a binary Population '1','0','1','0','1','1'...
             </summary>
             <param name="sizeChromosome">The size of the chromosome</param>
             <returns>Population char[][]</returns>
             <example>
              GenrPopulation pop = new GenrPopulation(5);
             [][] charPop = pop.BinaryPopulationChr(10);
            
             result:
             
             Chromosome: 0
             - 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
             Chromosome: 1
             - 1, 1, 1, 1, 0, 1, 0, 0, 0, 1,
             Chromosome: 2
             - 1, 1, 0, 0, 0, 1, 0, 1, 0, 1,
             Chromosome: 3
             - 0, 1, 0, 0, 1, 1, 1, 0, 1, 0,
             Chromosome: 4
             - 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,
             </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.CharPopulation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population composed by random chars.
            based on this link: http://www.asciitable.com/
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="start">the start number for the table, inclusive: Eg: 97</param>
            <param name="end">the end number for the table, inclusive: Eg: 122</param>
            <returns>Population char[][]</returns>
            <example>
            <code> 
            GenrPopulation pop = new GenrPopulation(5);
            char[][] charPop = pop.CharPopulation(30, 50, 100);
            
            /// result:
            Chromosome: 0
            - Q, 5, A, P, ^, \, T, ^, F, ;, U, ?, Z, :, 5, E, B, ], S, H, A, L, I, =, _, ~, E, B, @, H
            Chromosome: 1
            - C, 7, T, ], W, W, 7, ?, 4, b, 4, C, L, ], I, Z, J, 8, :, A, S, b, L, 9, a, 7, Q, 6, U, T
            Chromosome: 2
            - H, C, O, b, ], O, M, a, H, C, @, 5, [, U, F, b, 2, P, X, 7, W, ?, :, d, Z, E, P, L, a, R
            Chromosome: 3
            - 7, 3, N, E, L, U, Y, N, 2, ^, ?, M, U, \, 3, O, 9, [, X, c, 7, 3, C, O, b, ;, ;, P, :, I
            Chromosome: 4
            - d, 2, 2, Z, =, ?, L, H, ;, V, :, H, P, ^,], ;, O, B, b, [, @, Y, Y, b, L, 5, T, c, G
            </code>
            </example>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.PointPopulation(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Genr8 a Random population of points [x,y,z]
             </summary>
             <param name="SizeChromosome">The length of the chromosome</param>
             <param name="minX">The minimum value for X coordinate</param>
             <param name="maxX">The maximum value for X coordinate</param>
             <param name="minY">The minimum value for Y coordinate</param>
             <param name="maxY">The maximum value for Y coordinate</param>
             <param name="minZ">The minimum value for Z coordinate</param>
             <param name="maxZ">The maximum value for Z coordinate</param>
             <returns> a population of points</returns>
             <example>
             <code>
             GenrPopulation pop = new GenrPopulation(5);
             point[][] pntPop = pop.PointPopulation(4, 0, 100d, 0d, 100d, 0d, 100d);
            
             result:
             Chromosome: 0
             - (67.06, 80, 95.77), (82.34, 41.8, 81.37), (74.42, 12.58, 46.27), (46.76, 59.55, 56.52),
             Chromosome: 1
             - (56.48, 17.73, 27.91), (10.31, 68.15, 57.53), (62.79, 51.99, 29.98), (58.98, 41.34, 11.13),
             Chromosome: 2
             - (38.26, 63.32, 64.84), (22.49, 65.4, 86.53), (42.75, 16.47, 12.87), (72.12, 70.32, 48.68),
             Chromosome: 3
             - (32.05, 66.44, 0.96), (84.8, 18.4, 99.88), (48.29, 60.83, 37.58), (78.45, 42.13, 16.48),
             Chromosome: 4
             - (79.54, 62.78, 7.36), (84.51, 83.64, 69.42), (1.99, 8.09, 38.65), (84.64, 44.09, 78.47),
             </code>
             </example>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Tools">
            <summary>
            A collection of methods to operate on Genetic operators and lists.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.DataReport``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a report based on a list of data.
            </summary>
            <param name="listValues">the Values used to create the report</param>
            <returns>List<string></string></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.BinaryChromosomeToInteger``1(``0[])">
            <summary>
            Convert a binary chromosome to an integer, base of 2.
            </summary>
            <typeparam name="T">chromosome type</typeparam>
            <param name="chromosome">your chromosome</param>
            <returns>int</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ExtractDNA``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract part of the DNA from a chromosome. 
            </summary>
            <typeparam name="T">Any chromosome type</typeparam>
            <param name="chromosome">the chromosome</param>
            <param name="index">start the extraction</param>
            <param name="length">length of the extraction</param>
            <returns>T[] A DNA segment from the original chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.MinMaxValue``1(``0[])">
            <summary>
            Return the Min and Max values from an Array.
            </summary>
            <typeparam name="T">Any number type like: int, double, float...</typeparam>
            <param name="genArray">The array where to extract the values</param>
            <returns>Generic Array</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Char[][])">
            <summary>
            Reverse the original Population
            </summary>
            <param name="charPop">char[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Prefix(System.String,System.Int32)">
            <summary>
            Generate prefixs.
            </summary>
            <param name="prefix">string prefix</param>
            <param name="size">the length of prefix to generate</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(Laga.Geometry.Vector[],System.Int32)">
            <summary>
            Round the location of a laga point, based on the round number
            </summary>
            <param name="points">The points to round coordinates</param>
            <param name="round">round number coordinates</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Double[])">
            <summary>
            Parse any Chromosome type to string Array
            </summary>
            <param name="any">double[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Int32[])">
            <summary>
            Parse a list of integers into a list of strings
            </summary>
            <param name="any">int[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Single[])">
            <summary>
            Parse a list of floats into a list of strings
            </summary>
            <param name="any">float[]</param>
            <returns>string[]</returns>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Parse(System.Char[])">
            <summary>
            Parse a list of char to a list of strings
            </summary>
            <param name="any">char[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Single[])">
            <summary>
            Reverse the original array of floats.
            </summary>
            <param name="arrFloat">float[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Int32[])">
            <summary>
            Reverse the original array of integers
            </summary>
            <param name="arrInt">int[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Reverse(System.Double[])">
            <summary>
            Reverse the original array of doubles
            </summary>
            <param name="arrDbl">double[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Int32[][])">
            <summary>
            Reverse Original integer population
            </summary>
            <param name="intPop">int[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Double[][])">
            <summary>
            Reverse original double population
            </summary>
            <param name="dblPop">double[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Single[][])">
            <summary>
            Reverse original float population
            </summary>
            <param name="flPop">float[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.ReversePopulation(System.Object[][])">
            <summary>
            Reverse original object population
            </summary>
            <param name="objPop">object[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Int32[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for array of integers.
            </summary>
            <param name="arrInt">The array of integers to shuffle</param>
            <returns></returns>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates``1(``0[])">
            <summary>
            Experimental Fisher_Yates algorithm to shuffle the original array.
            </summary>
            <typeparam name="T">the type of data</typeparam>
            <param name="arrData">the array of data</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_Yates(System.Object[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Fisher_YatesPercent(System.Object[],System.Single)">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <param name="percent">the percent to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Random integer number between range
            </summary>
            <param name="min">int</param>
            <param name="max">int</param>
            <returns>int</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.GetRandomNumber">
            <summary>
            Random number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomCharBinary(System.Single)">
            <summary>
            Returns a Char in the format 0 or 1
            </summary>
            <param name="thershold">thershold parameter. 0.5 = 50%</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomChar(System.Int32,System.Int32)">
            <summary>
            Generate a random char.
            based on this link: http://www.asciitable.com/
            </summary>
            <param name="start">the start number for the table, inclusive</param>
            <param name="end">the end number for the table, inclusive</param>
            <returns>char</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.RandomInt(System.Int32,System.Int32,System.Single)">
            <summary>
            Return non repetead integers between a min max and percent.
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="percent">the percent of return, if 1f will return all the numbers.</param>
            <returns>array of integers if wrong array of 0</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Tools.Mom_Dad(System.Int32,System.Single)">
            <summary>
            Non repeated indexs.
            </summary>
            <param name="lengthPop">the length of the population</param>
            <param name="percent">the percent of mutation</param>
            <returns>array of indexs</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Mutation">
            <summary>
            Apply Mutations on the Population
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="MutationRate"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.CharMutation(Laga.GeneticAlgorithm.Population{System.Char},System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="percentChrom"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.Number(Laga.GeneticAlgorithm.Population{System.Double},System.Single,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="MutationRate"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[],System.Single)">
            <summary>
            
            </summary>
            <param name="chrom"></param>
            <param name="p"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.DoubleMutation(System.Double[],System.Single,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.FloatMutation(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.IntMutation(System.Int32[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="ChroPercent"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)">
            <summary>
            A Mutation Algorithm
            </summary>
            <param name="pop">The population to perform the mutation</param>
            <param name="ChroPercent">the percent of mutation in the chromosome</param>
            <param name="start">the start number for the table, inclusive: Eg: 97</param>
            <param name="end">the end number for the table, inclusive: Eg: 122</param>
            <returns>char[][]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.NaturalSelection`1">
            <summary>
            Natural selection class
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.#ctor">
            <summary>
            The class to select and operates on populations
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(Laga.GeneticAlgorithm.Population{`0},System.Int32)">
            <summary>
            Roulette Wheel
            </summary>
            <param name="population">Popultion</param>
            <param name="maxItem">Maximum size in the roulette</param>
            <returns>Population</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Object[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>objec[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Double[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">the number of individuals to select</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Single[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Int32[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count">The number of individuals to select</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Elitism(System.Char[][],System.Int32)">
            <summary>
            select the number of the best individual in the population.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="count"></param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.Elitism(charPop, 5);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelNonPolinomicMin(System.Char[][],System.Single[],System.Int32)">
            <summary>
            The best ranked individuals have more chance to be selected than worst based in a non-polinomic curve (y = 1 / x)
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.RouletteWheelNonPolinomicMin(charPop, rndFitness, 10);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Object[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Double[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Single[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Int32[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Single[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheel(System.Char[][],System.Int32[],System.Int32)">
            <summary>
            The individual fitness is proportional to the possibilities of being selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="maxItem">Maximum number of selected individuals</param>
            <returns>char[][]</returns>
            <example>
            <code>
            GenrPopulation pop = new GenrPopulation(20);
            char[][] charPop = pop.CharPopulation(5, 97, 122);
            float[] rndFitness = Rand.RandomNumbers(20, 0f, 1f);
            RankingSort rs = new RankingSort();
            rs.BidirectionalBubbleSort(charPop, rndFitness, false);
            
            NaturalSelection ns = new NaturalSelection();
            char[][] nsPop = ns.RouletteWheel(charPop, rndFitness, 5);
            </code>
            </example>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            A roulette wheel selection distributed on a sigmoid curve 
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="sizeRoulette">Number of individuals selected</param>
            <param name="A1">The maximum number of selected individuals in the roulette wheel</param>
            <param name="A2">The minimum number of selected individuals in the roulette wheel</param>
            <param name="B1">The start index in the population. 1 is the second individual</param>
            <param name="B2">The last index in the population. 5 is the sixth individual</param>
            <param name="s">the factor decay, values between 0.00 and 1.00</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)">
            <summary>
            As medieval tournament, the individuals have to compete in a tournament, 
            the tournament winner is selected.
            </summary>
            <param name="srtPopulation">The sorted population</param>
            <param name="results">The result array from the evaluation</param>
            <param name="numbTour">Number of tournaments</param>
            <param name="preasure">Number of individuals in the tournament</param>
            <param name="type">if is "min" the smallest fitness is selected, otherwise the highest</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection`1.Tournament(System.Object[][],System.Single[],System.String)">
            <summary>
             mthod for the tournament
            </summary>
            <param name="torneo">the tournament for data</param>
            <param name="results">the results from the evaluation</param>
            <param name="type">if min</param>
            <returns>object[]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Population`1">
            <summary>
            Create and Manipulate Populations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="SizePopulation"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Population`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Higher">
            <summary>
            Return the Higher Ranked Chromosome based on the fitness evaluation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Add(Laga.GeneticAlgorithm.Chromosome{`0})">
            <summary>
            
            </summary>
            <typeparamref name="T">The type for chromosome</typeparamref>
            <param name="chromosome"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.Lower">
            <summary>
            Return the Lower ranked chromosome based on the fitness evaluation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.GetChromosome(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.FitnessAverage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Population`1.GetEnumerator">
            <summary>
            IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.RankingSort">
            <summary>
            To sort chromosomes in populations according to fitness evaluation.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Single[],System.Boolean)">
            <summary>
            Sort the individuals in the population by fitness value.
            </summary>
            <param name="population">population to sort</param>
            <param name="arrResults">Array of fitness in the population. Only two flavors are supported: int[] and float[]</param>
            <param name="minmax">if is true the sort is by min to max, else max to min</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Int32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Int32[],System.Boolean)">
            <summary>
            An optimised BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
            </summary>
            <param name="population">population to sort</param>
            <param name="arrResults">Array of fitness in the population. Only 2 flavors are supported: int[] and float[]</param>
            <param name="minmax">if is true the sort is by min to max, else max to min</param>
            <returns>automatically the population is sorted. the original population will be modified.</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Replacement">
            <summary>
            To replace old populations with new populations
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.#ctor">
            <summary>
             Replacement class
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Object[][],System.Object[][],System.Int32)">
            <summary>
            This replace method is ideal for combinatorial problems with objects types in chromsome. and where is not possible generate new data in the replacement population.
            </summary>
            <param name="sonMutPopulation">the son mutated population</param>
            <param name="ParentsPopulation">the parents population</param>
            <param name="sizePopulation">the size of the population</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Object[][],System.Single,System.Int32)">
            <summary>
            Creates a new population using the mutated inheritance and new random chromosomes.
            </summary>
            <param name="sonMutPopulation">Object[][]</param>
            <param name="percent">float</param>
            <param name="sizePopulation">int</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Object[][],System.Object[][],System.Int32,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return object[][] new population.
             
             
            <summary>
            this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many individuals will(parents) and how many new ones will be created for the new population.
            </summary>
            <param name="sonMutPopulation">the son mutated population</param>
            <param name="ParentsPopulation">the parents population</param>
            <param name="sizePopulation">the size of the population</param>
            <param name="percentInherit">percentInherit</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Double[][],System.Double[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return double[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Double[][],System.Int32,System.Double,System.Double)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return double[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Double[][],System.Double[][],System.Int32,System.Double,System.Double,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return double[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentInherit"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Single[][],System.Single[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return float[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Single[][],System.Int32,System.Single,System.Single)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return float[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Single[][],System.Single[][],System.Int32,System.Single,System.Single,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return float[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentInherit"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Int32[][],System.Int32[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return int[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Int32[][],System.Int32,System.Int32,System.Int32)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return int[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Int32[][],System.Int32[][],System.Int32,System.Int32,System.Double,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return int[][] new population.
             
             
            <summary>
            
            </summary>
            <param name="sonMutPopulation"></param>
            <param name="ParentsPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentInherit"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.BinaryCharRandomReplace(System.Char[][],System.Int32)">
            CharRandomReplace method.
             set a new a population from the selected individuals.
            
             @param newPartOfPopulation -> selected individuals.
             @param sizePopulation      -> the size of the population.
             @return char[][] population.
             
             
            <summary>
            
            </summary>
            <param name="newPartOfPopulation"></param>
            <param name="sizePopulation"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.CharRandomReplace(System.Char[][],System.Int32,System.Int32,System.Int32)">
            CharRandomReplace method.
             set a new a population from the selected individuals.
            
             @param newPartOfPopulation -> selected individuals.
             @param sizePopulation      -> the size of the population.
             @return char[][] population.
             
             
            <summary>
            
            </summary>
            <param name="newPartOfPopulation"></param>
            <param name="sizePopulation"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:Laga.IO.IOTextData">
            <summary>
            Read and process text from a txt file
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.SourceEncoding">
            <summary>
            Get the Encoding Source from the Text File
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.DataText">
            <summary>
            Get the Data Text as a string
            </summary>
        </member>
        <member name="P:Laga.IO.IOTextData.DataTextLine">
            <summary>
            Get the Data Text as a list of strings
            </summary>
        </member>
        <member name="T:Laga.IO.IOTextData.EncodingType">
            <summary>
            Encoding types Supported
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.UTF7">
            <summary>
            UTF7 Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.UTF8">
            <summary>
            UTF8 Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.ASCII">
            <summary>
            ASCII Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.Unicode">
            <summary>
            Unicode Encoding
            </summary>
        </member>
        <member name="F:Laga.IO.IOTextData.EncodingType.Default">
            <summary>
            Default Encoding
            </summary>
        </member>
        <member name="M:Laga.IO.IOTextData.#ctor(System.String)">
            <summary>
            Construct the class to operate txt files.
            </summary>
            <param name="TextFileName">The text file name</param>
        </member>
        <member name="M:Laga.IO.IOTextData.ConvertFileEncoding(System.String,Laga.IO.IOTextData.EncodingType)">
            <summary>
            Convert a file from one Encoding type to another encoding type
            </summary>
            <param name="FileName">the full file name to convert</param>
            <param name="encodingType">the Encoding type</param>
        </member>
        <member name="M:Laga.IO.IOTextData.CreateFile(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Creates a text file based on a list of strings
            </summary>
            <param name="strList">the content for the file</param>
            <param name="directory">the path to the directory to save the file</param>
            <param name="fileName">name of the txt file</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.CountWordsTopN(System.String,System.Int32)">
            <summary>
            Return the n most frequently occuring words in the string
            </summary>      
            <param name="strMessage">the string</param>
            <param name="topN">Top N Numbers to return</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.GetWords(System.String)">
            <summary>
            Get The words from a string
            </summary>
            <param name="strMessage">The string to operate</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveNumbers(System.String)">
            <summary>
            Remove the digits from a string
            </summary>
            <param name="strMessage">The string to remove the digits</param>
            <returns>string</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveDiacritics(System.String)">
            <summary>
            Remove Diacritcs from string
            </summary>
            <param name="strMessage">The string to clean</param>
            <returns>string</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveByLength(System.String[],System.Int32)">
            <summary>
            Remove strings according to a specific Length
            </summary>
            <param name="strMessages">the Array of strings to make the operations</param>
            <param name="Length">The minimum string length</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.IO.IOTextData.RemoveByLength(System.String,System.Int32,System.String)">
            <summary>
            Remove the words according to a specific length from a string
            </summary>
            <param name="strMessage">The string to make the operation</param>
            <param name="Length">The minimum word length in the string</param>
            <param name="separator">A string to specify how combine the new string chain. eg: " "</param>
            <returns>string</returns>
        </member>
        <member name="T:Laga.IO.IOExcelRead">
            <summary>
            Read excel files
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelRead.MatrixDataExcel">
            <summary>
            get the data by list format, use this to get the data from excel
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelRead.SheetNum">
            <summary>
            Get Excel sheet number.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String)">
            <summary>
            The simpliest constructor
            </summary>
            <param name="FilePath">string, the path to the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for IOExcel most flexible constructor.
            therfore you have to deal with all operations:
            open, read or write and close.
            </summary>
            <param name="FilePath">String, the Path to the file</param>
            <param name="SheetNumber">Integer, the index sheet in the excel book</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Simple constructor to read data straightforward from excel
            the simpliest and faster option
            </summary>
            <param name="FilePath">string, the Path to the file</param>
            <param name="SheetNumber">integer, the index sheet in the excel book</param>
            <param name="XlsxRange">string, the excel range to read the data</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IOReadRange(System.String)">
            <summary>
            read the cells range specified in the parameter.
            </summary>
            <param name="strXlRange">the range to read the excel, format "A1:B2" if is empty ("") will return the whole data in the workbook</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IOReadCell(System.String)">
            <summary>
            Read a specific excel cell.
            </summary>
            <param name="strXlCell">The cell to read in excel, format "A1"</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_SetActiveSheet(System.Int32,System.Boolean)">
            <summary>
            Activates a specific Excel sheet to read.
            </summary>
            <param name="pos">The position of the excel sheet in the document.</param>
            <param name="display">decide to visualize the excel sheet.</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.TestExcelOpen">
            <summary>
            Test if excel application is open.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_ExcelWorksheetNames">
            <summary>
            Open the App
            return all the excel sheet names.
            Close the App, release the Marshalls.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_OpenExcelApp">
            <summary>
            Open excel app based on the constructor.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_OpenExcelApp(System.Boolean)">
            <summary>
            Open excel app based on the constructor.
            </summary>
            <param name="display">if is true, show the excel"</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp">
            <summary>
            Clean all the marshalls and kill excel.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp(System.Boolean)">
            <summary>
            clean all the marshalls and close - save the excel.
            </summary>
            <param name="saveFile">if is true, will save the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp(System.Boolean,System.String,System.String)">
            <summary>
            save and close the excel.
            </summary>
            <param name="saveFile">if is true, will save the file</param>
            <param name="fileName">string, the file name of the excel file</param>
            <param name="directory">string, the address where to save the excel</param>
        </member>
        <member name="T:Laga.IO.IOExcelWrite">
            <summary>
            Write data in excel
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.XlRange">
            <summary>
            Get and set the excel range.
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.SheetNum">
            <summary>
            get the sheet number 
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.MatrixDataExcel">
            <summary>
            Set a nested list of strings.
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.ListDataExcel">
            <summary>
            Set a nested list of strings.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.CheckExcelFile(System.String)">
            <summary>
            check if the file exists.
            </summary>
            <param name="path">the path to the excel file</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.String,System.Int32)">
            <summary>
            Sets the basic data to write in excel.
            do not forget call the open and close.
            </summary>
            <param name="FilePath">the direction to the file</param>
            <param name="SheetNumber">the number of the sheet to open</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.Boolean)">
            <summary>
            Creates and excel workbook.
            do not forget call the open and close.
            </summary>
            <param name="display">true, will display the workboook</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.String)">
            <summary>
            Sets the basic data to write in excel.
            do not forget call the open and close.
            </summary>
            <param name="FilePath">adress to the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32,System.String)">
            <summary>
            Creates and excel sheet to write on.
            </summary>
            <param name="pos">The sheet position number</param>
            <param name="name">The sheet name name</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)">
            <summary>
            Activates a specific Excel sheet to write on.
            </summary>
            <param name="pos">The position of the excel sheet in the document.</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteItem(System.String,System.Int32,System.Int32)">
            <summary>
            Write a single item to Excel...
            </summary>
            <param name="strItem">the item to write in excel</param>
            <param name="Row">The row position</param>
            <param name="Col">The column position</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)">
            <summary>
            Write a list of strings in excel. the list length is calculated automatically.
            </summary>
            <param name="lstString">The list of strings to write</param>
            <param name="Row">The row position</param>
            <param name="Col">The column position</param>
            <param name="dir">The writing direction, 'c' for top-down or 'r' for left-right</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Write a nested list of strings in excel. The list length is calculated automatically.
            </summary>
            <param name="matData">The nested list of strings to write</param>
            <param name="Row">The row position</param>
            <param name="Col">The column position</param>
            <param name="swap">If true, write first the row, if false write first the column</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp">
            <summary>
            Open an Excel document and display the document.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean,System.Int32)">
            <summary>
            Open an Excel document based on the constructor.
            </summary>
            <param name="display">Show the app</param>
            <param name="sheetNum">open the sheetnumber</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)">
            <summary>
            Open an Excel document based on the constructor.
            </summary>
            <param name="display">if is true, show the excel"</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.SaveCloseExcelApp(System.String)">
            <summary>
            Save the Excel file and close safely the Excel application.
            </summary>
            <param name="Path">The file name</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)">
            <summary>
            Close safely the Excel application and decide to save or not.
            </summary>
            <param name="saveFile">If true, the Excel file is saved.</param>
        </member>
        <member name="T:Laga.IO.IODataFolder">
            <summary>
            Get Data files information from a folder directory
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.RootFolder">
            <summary>
            The Roof folder with the files
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.ListPathFileNames">
            <summary>
            The List of file names including the path
            </summary>
        </member>
        <member name="P:Laga.IO.IODataFolder.ListFileNames">
            <summary>
            The list of file names without extension
            </summary>
        </member>
        <member name="M:Laga.IO.IODataFolder.#ctor(System.String)">
            <summary>
            The Object to extract data from the folder
            </summary>
            <param name="PathFolder">The folders path to analize</param>
        </member>
        <member name="M:Laga.IO.IODataFolder.ReadSelectiveData(System.String)">
            <summary>
            The List of files according to the specified extension
            </summary>
            <param name="extension">The extension file to filter: ".txt"</param>
            <returns>List</returns>
        </member>
        <member name="T:Laga.Numbers.Maths">
            <summary>
            Mathematics and statistics operations
            </summary>
        </member>
        <member name="M:Laga.Numbers.Maths.NumberDistinct``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lstData"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.Numbers.Maths.Deg2Rad(System.Double)">
            <summary>
            Degrees to Radians
            </summary>
            <param name="degrees"></param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Numbers.Maths.Rad2Deg(System.Double)">
            <summary>
            Radians to Degree
            </summary>
            <param name="radians"></param>
            <returns>double</returns>
        </member>
        <member name="T:Laga.Numbers.Rand">
            <summary>
            Random number class
            </summary>
        </member>
        <member name="M:Laga.Numbers.Rand.RandomNumbers(System.Int32,System.Single,System.Single)">
            <summary>
            Generate random numbers
            </summary>
            <param name="size">The amount of random values in the list</param>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <returns>float[]</returns>
        </member>
        <member name="M:Laga.Numbers.Rand.RandomNumbers(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Laga.Geometry.Line">
            <summary>
            Line class and operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.StartPoint">
            <summary>
            Line base point
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.EndPoint">
            <summary>
            Line end point
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.Direction">
            <summary>
            Line vector
            </summary>
        </member>
        <member name="P:Laga.Geometry.Line.Length">
            <summary>
            line length
            </summary>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,System.Double)">
            <summary>
            Line by start point, direction and length
            </summary>
            <param name="StartPoint">start point</param>
            <param name="Direction">Vector</param>
            <param name="t">Parameter</param>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Line by start point and end point
            </summary>
            <param name="StartPoint">start point</param>
            <param name="EndPoint">end point</param>
        </member>
        <member name="M:Laga.Geometry.Line.#ctor">
            <summary>
            Empty Line object
            </summary>
        </member>
        <member name="M:Laga.Geometry.Line.IsParallelTo(Laga.Geometry.Line,System.Double)">
            <summary>
            Test if 2 lines are parallel
            </summary>
            <param name="line">line to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.IsCoincidentTo(Laga.Geometry.Line,System.Double)">
            <summary>
            Test if 2 lines are coincident
            </summary>
            <param name="line">Line to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.PointAt(System.Double)">
            <summary>
            Point by parameter in the line
            </summary>
            <param name="t">Parameter</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Line.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@,System.Double)">
            <summary>
            Line intersection by tolerance
            </summary>
            <param name="line">Line to test</param>
            <param name="intersection">ref Point intersection</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.ClosestTo(Laga.Geometry.Line,Laga.Geometry.Vector@,Laga.Geometry.Vector@)">
            <summary>
            Find the closest points between lines
            </summary>
            <param name="line">Line to test</param>
            <param name="pointA">ref closest point A</param>
            <param name="pointB">ref closest point B</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Line.ToString">
            <summary>
            Print line length data
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Laga.Geometry.Plane">
            <summary>
            Plane class and operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Cz">
            <summary>
            Get the Cz term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.By">
            <summary>
            Get the By Term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Ax">
            <summary>
            Get the Ax term
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Origin">
            <summary>
            Plane origin
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.Norm">
            <summary>
            Vector normal
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.VectorU">
            <summary>
            Vector U (X direction)
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.VectorV">
            <summary>
            Vector V (Y direction)
            </summary>
        </member>
        <member name="P:Laga.Geometry.Plane.ConstantTerm">
            <summary>
            Plane constant term
            </summary>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Vector equation plane, form: X = P+tU+sV
            </summary>
            <param name="OriginPoint">Point in the plane, considered the origin point</param>
            <param name="VectorU">First vector in the plane (U)</param>
            <param name="VectorV">Second vector in the plane (V)</param>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General Equation plane, form: Ax + By + Cz + D = 0
            </summary>
            <param name="Ax">Coeficient Ax</param>
            <param name="By">Coeficient By</param>
            <param name="Cz">Coeficient Cz</param>
            <param name="D">Constant D</param>
        </member>
        <member name="M:Laga.Geometry.Plane.#ctor(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Plane normal equation, form: PX·N = 0
            </summary>
            <param name="VectorPX">Vector from plane origin to a point X in the plane</param>
            <param name="VectorNormal">Normal vector to plane</param>
        </member>
        <member name="M:Laga.Geometry.Plane.ToString">
            <summary>
            Print plane data
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.DistanceTo(Laga.Geometry.Vector)">
            <summary>
            Distance plane point. If negative, the point is behind the plane.
            </summary>
            <param name="point">point to test</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.PointAt(System.Double,System.Double)">
            <summary>
            Locate a point in the plane
            </summary>
            <param name="U">U parameter</param>
            <param name="V">V parameter</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IsParallelTo(Laga.Geometry.Plane,System.Double)">
            <summary>
            Check if the plane is parallel
            </summary>
            <param name="plane">Plane to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IsCoincidentTo(Laga.Geometry.Plane,System.Double)">
            <summary>
            Check if 2 planes are coicident
            </summary>
            <param name="plane">Plane to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Line,Laga.Geometry.Vector@)">
            <summary>
            Plane line intersection
            </summary>
            <param name="line">Line</param>
            <param name="intersection">ref Vector Intersection</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Plane.IntersectTo(Laga.Geometry.Plane,Laga.Geometry.Line@,System.Double)">
            <summary>
            Find the intersection between 2 planes
            </summary>
            <param name="plane">Plane to test</param>
            <param name="intersection">ref line intersection</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="T:Laga.Geometry.Vector">
            <summary>
            Vector class and operations
            </summary>
        </member>
        <member name="P:Laga.Geometry.Vector.X">
            <summary>
            X coordinate
            </summary> 
        </member>
        <member name="P:Laga.Geometry.Vector.Y">
            <summary>
            Y Coordinate
            </summary>
        </member>
        <member name="P:Laga.Geometry.Vector.Z">
            <summary>
            Z Coordinate
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Create a 2D vector in XY plane 
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a 3D Vector
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="Z">Z coordinate</param>
        </member>
        <member name="M:Laga.Geometry.Vector.#ctor">
            <summary>
            Creates the vector zero
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.OrthogonalTo(Laga.Geometry.Vector)">
            <summary>
            Creates a orthogonal vector
            </summary>
            <param name="vector">Vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.CrossProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Cross Product
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ComponentProjectTo(Laga.Geometry.Vector)">
            <summary>
            Project to vector base B
            </summary>
            <param name="vectorB">Vector base</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ComponentOrthogonalTo(Laga.Geometry.Vector)">
            <summary>
            Creates the orthogonal component to vector base B
            </summary>
            <param name="vectorB">Vector base</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsVectorCero(System.Double)">
            <summary>
            Test if is vector zero
            </summary>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsOrthogonalTo(Laga.Geometry.Vector,System.Double)">
            <summary>
            Test if vector is orthogonal
            </summary>
            <param name="vector">Vector to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.IsParallelTo(Laga.Geometry.Vector,System.Double)">
            <summary>
            Test if 2 vectors are parallel
            </summary>
            <param name="vector">The vector to test</param>
            <param name="tolerance">Default tolerance: 1e-3</param>
            <returns>bool</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.DotProduct(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Dot product
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.Angle(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Angle
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.DistanceTo(Laga.Geometry.Vector)">
            <summary>
            Distance
            </summary>
            <param name="vector">vector to test</param>
            <returns>double</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.Normalize">
            <summary>
            Normalize the vector to 1
            </summary>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Addition(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Addition
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Subtraction(Laga.Geometry.Vector,Laga.Geometry.Vector)">
            <summary>
            Substraction
            </summary>
            <param name="vectorA">Vector A</param>
            <param name="vectorB">Vector B</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.op_Multiply(Laga.Geometry.Vector,System.Double)">
            <summary>
            Scale multuplication
            </summary>
            <param name="vector">Vector to scale</param>
            <param name="factor">factor</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.ToString">
            <summary>
            Print vector data
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Laga.Geometry.Vector.EqualTo(Laga.Geometry.Vector)">
            <summary>
            test if 2 vectors are equal
            </summary>
            <param name="vector">Vector to test</param>
            <returns>bool</returns>
        </member>
    </members>
</doc>
