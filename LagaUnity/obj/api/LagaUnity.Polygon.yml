### YamlMime:ManagedReference
items:
- uid: LagaUnity.Polygon
  commentId: T:LagaUnity.Polygon
  id: Polygon
  parent: LagaUnity
  children:
  - LagaUnity.Polygon.#ctor(System.Collections.Generic.IEnumerable{LagaUnity.Vectorf})
  - LagaUnity.Polygon.Add(LagaUnity.Vectorf)
  - LagaUnity.Polygon.Area
  - LagaUnity.Polygon.Center
  - LagaUnity.Polygon.Clear
  - LagaUnity.Polygon.Contains(LagaUnity.Vectorf)
  - LagaUnity.Polygon.CopyTo(LagaUnity.Vectorf[],System.Int32)
  - LagaUnity.Polygon.Count
  - LagaUnity.Polygon.GetEnumerator
  - LagaUnity.Polygon.IsConvex
  - LagaUnity.Polygon.IsReadOnly
  - LagaUnity.Polygon.Length
  - LagaUnity.Polygon.Remove(LagaUnity.Vectorf)
  - LagaUnity.Polygon.SegmentAt(System.Int32)
  - LagaUnity.Polygon.SortPolygonPoints
  - LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator
  - LagaUnity.Polygon.UpdateDraw
  - LagaUnity.Polygon.VectorList
  langs:
  - csharp
  - vb
  name: Polygon
  nameWithType: Polygon
  fullName: LagaUnity.Polygon
  type: Class
  source:
    id: Polygon
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 13
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nPolygon class\n"
  example: []
  syntax:
    content: 'public class Polygon : ICollection<Vectorf>, IEnumerable<Vectorf>, IEnumerable'
    content.vb: >-
      Public Class Polygon
          Implements ICollection(Of Vectorf), IEnumerable(Of Vectorf), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  - System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: LagaUnity.Polygon.Count
  commentId: P:LagaUnity.Polygon.Count
  id: Count
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Polygon.Count
  fullName: LagaUnity.Polygon.Count
  type: Property
  source:
    id: Count
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 19
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nPolygon lenght\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: LagaUnity.Polygon.Count*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: LagaUnity.Polygon.IsReadOnly
  commentId: P:LagaUnity.Polygon.IsReadOnly
  id: IsReadOnly
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: Polygon.IsReadOnly
  fullName: LagaUnity.Polygon.IsReadOnly
  type: Property
  source:
    id: IsReadOnly
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 24
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nIsReadOnly boolean\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: LagaUnity.Polygon.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: LagaUnity.Polygon.Add(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Polygon.Add(LagaUnity.Vectorf)
  id: Add(LagaUnity.Vectorf)
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Add(Vectorf)
  nameWithType: Polygon.Add(Vectorf)
  fullName: LagaUnity.Polygon.Add(LagaUnity.Vectorf)
  type: Method
  source:
    id: Add
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 30
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nAdd a Vector to the poylgon\n"
  example: []
  syntax:
    content: public void Add(Vectorf vector)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: The Vector to add in the list
    content.vb: Public Sub Add(vector As Vectorf)
  overload: LagaUnity.Polygon.Add*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Add(LagaUnity.Vectorf)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Clear
  commentId: M:LagaUnity.Polygon.Clear
  id: Clear
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Polygon.Clear()
  fullName: LagaUnity.Polygon.Clear()
  type: Method
  source:
    id: Clear
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 38
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nClear all data in the polygon\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: LagaUnity.Polygon.Clear*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Contains(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Polygon.Contains(LagaUnity.Vectorf)
  id: Contains(LagaUnity.Vectorf)
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Contains(Vectorf)
  nameWithType: Polygon.Contains(Vectorf)
  fullName: LagaUnity.Polygon.Contains(LagaUnity.Vectorf)
  type: Method
  source:
    id: Contains
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 48
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCheck if the vec is in the polygon\n"
  example: []
  syntax:
    content: public bool Contains(Vectorf vector)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: ''
    return:
      type: System.Boolean
      description: True if the vector belongs to the polygon
    content.vb: Public Function Contains(vector As Vectorf) As Boolean
  overload: LagaUnity.Polygon.Contains*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Contains(LagaUnity.Vectorf)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.CopyTo(LagaUnity.Vectorf[],System.Int32)
  commentId: M:LagaUnity.Polygon.CopyTo(LagaUnity.Vectorf[],System.Int32)
  id: CopyTo(LagaUnity.Vectorf[],System.Int32)
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: CopyTo(Vectorf[], Int32)
  nameWithType: Polygon.CopyTo(Vectorf[], Int32)
  fullName: LagaUnity.Polygon.CopyTo(LagaUnity.Vectorf[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 61
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCopy the vectors of the polygon to a new array.\n"
  example: []
  syntax:
    content: public void CopyTo(Vectorf[] array, int arrayIndex)
    parameters:
    - id: array
      type: LagaUnity.Vectorf[]
      description: The array to copy
    - id: arrayIndex
      type: System.Int32
      description: Index to start the array
    content.vb: Public Sub CopyTo(array As Vectorf(), arrayIndex As Integer)
  overload: LagaUnity.Polygon.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.CopyTo(LagaUnity.Vectorf[],System.Int32)
  nameWithType.vb: Polygon.CopyTo(Vectorf(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: LagaUnity.Polygon.CopyTo(LagaUnity.Vectorf(), System.Int32)
  name.vb: CopyTo(Vectorf(), Int32)
- uid: LagaUnity.Polygon.GetEnumerator
  commentId: M:LagaUnity.Polygon.GetEnumerator
  id: GetEnumerator
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Polygon.GetEnumerator()
  fullName: LagaUnity.Polygon.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 77
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nEnumerator can be used to read the data in the collection, but cannot be used to modify the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<Vectorf> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{LagaUnity.Vectorf}
      description: ''
    content.vb: Public Function GetEnumerator As IEnumerator(Of Vectorf)
  overload: LagaUnity.Polygon.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Remove(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Polygon.Remove(LagaUnity.Vectorf)
  id: Remove(LagaUnity.Vectorf)
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Remove(Vectorf)
  nameWithType: Polygon.Remove(Vectorf)
  fullName: LagaUnity.Polygon.Remove(LagaUnity.Vectorf)
  type: Method
  source:
    id: Remove
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 87
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nRemove a vector from the polygon\n"
  example: []
  syntax:
    content: public bool Remove(Vectorf vector)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: the Vector to remove
    return:
      type: System.Boolean
      description: true if all went ok
    content.vb: Public Function Remove(vector As Vectorf) As Boolean
  overload: LagaUnity.Polygon.Remove*
  implements:
  - System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Remove(LagaUnity.Vectorf)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator
  commentId: M:LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Polygon.IEnumerable.GetEnumerator()
  fullName: LagaUnity.Polygon.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    id: System.Collections.IEnumerable.GetEnumerator
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 92
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Polygon.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: LagaUnity.Polygon.#ctor(System.Collections.Generic.IEnumerable{LagaUnity.Vectorf})
  commentId: M:LagaUnity.Polygon.#ctor(System.Collections.Generic.IEnumerable{LagaUnity.Vectorf})
  id: '#ctor(System.Collections.Generic.IEnumerable{LagaUnity.Vectorf})'
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Polygon(IEnumerable<Vectorf>)
  nameWithType: Polygon.Polygon(IEnumerable<Vectorf>)
  fullName: LagaUnity.Polygon.Polygon(System.Collections.Generic.IEnumerable<LagaUnity.Vectorf>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 107
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nPolygon constructor by a list / array of vectors\n"
  example: []
  syntax:
    content: public Polygon(IEnumerable<Vectorf> VectorList)
    parameters:
    - id: VectorList
      type: System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}
      description: the list of vectors
    content.vb: Public Sub New(VectorList As IEnumerable(Of Vectorf))
  overload: LagaUnity.Polygon.#ctor*
  nameWithType.vb: Polygon.Polygon(IEnumerable(Of Vectorf))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: LagaUnity.Polygon.Polygon(System.Collections.Generic.IEnumerable(Of LagaUnity.Vectorf))
  name.vb: Polygon(IEnumerable(Of Vectorf))
- uid: LagaUnity.Polygon.VectorList
  commentId: P:LagaUnity.Polygon.VectorList
  id: VectorList
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: VectorList
  nameWithType: Polygon.VectorList
  fullName: LagaUnity.Polygon.VectorList
  type: Property
  source:
    id: VectorList
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 117
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nget the list of vectors in the polygon\n"
  example: []
  syntax:
    content: public List<Vectorf> VectorList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{LagaUnity.Vectorf}
    content.vb: Public ReadOnly Property VectorList As List(Of Vectorf)
  overload: LagaUnity.Polygon.VectorList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: LagaUnity.Polygon.UpdateDraw
  commentId: M:LagaUnity.Polygon.UpdateDraw
  id: UpdateDraw
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: UpdateDraw()
  nameWithType: Polygon.UpdateDraw()
  fullName: LagaUnity.Polygon.UpdateDraw()
  type: Method
  source:
    id: UpdateDraw
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 127
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nUpdate the polygon drawing\n"
  example: []
  syntax:
    content: public void UpdateDraw()
    content.vb: Public Sub UpdateDraw
  overload: LagaUnity.Polygon.UpdateDraw*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Area
  commentId: M:LagaUnity.Polygon.Area
  id: Area
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Area()
  nameWithType: Polygon.Area()
  fullName: LagaUnity.Polygon.Area()
  type: Method
  source:
    id: Area
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 138
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCalculate the area of the polygon\n"
  example: []
  syntax:
    content: public float Area()
    return:
      type: System.Single
      description: the area in float flavor
    content.vb: Public Function Area As Single
  overload: LagaUnity.Polygon.Area*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Length
  commentId: M:LagaUnity.Polygon.Length
  id: Length
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Polygon.Length()
  fullName: LagaUnity.Polygon.Length()
  type: Method
  source:
    id: Length
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 161
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nGet the length of Polygon\n"
  example: []
  syntax:
    content: public float Length()
    return:
      type: System.Single
      description: the length
    content.vb: Public Function Length As Single
  overload: LagaUnity.Polygon.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.Center
  commentId: M:LagaUnity.Polygon.Center
  id: Center
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: Center()
  nameWithType: Polygon.Center()
  fullName: LagaUnity.Polygon.Center()
  type: Method
  source:
    id: Center
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 183
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nAverage center point\n"
  example: []
  syntax:
    content: public Vectorf Center()
    return:
      type: LagaUnity.Vectorf
      description: Vectorf
    content.vb: Public Function Center As Vectorf
  overload: LagaUnity.Polygon.Center*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.IsConvex
  commentId: M:LagaUnity.Polygon.IsConvex
  id: IsConvex
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: IsConvex()
  nameWithType: Polygon.IsConvex()
  fullName: LagaUnity.Polygon.IsConvex()
  type: Method
  source:
    id: IsConvex
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 204
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCheck if polygon is convex\n"
  example: []
  syntax:
    content: public bool IsConvex()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsConvex As Boolean
  overload: LagaUnity.Polygon.IsConvex*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.SegmentAt(System.Int32)
  commentId: M:LagaUnity.Polygon.SegmentAt(System.Int32)
  id: SegmentAt(System.Int32)
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: SegmentAt(Int32)
  nameWithType: Polygon.SegmentAt(Int32)
  fullName: LagaUnity.Polygon.SegmentAt(System.Int32)
  type: Method
  source:
    id: SegmentAt
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 235
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nDraw a specific segment in the polygon\n"
  example: []
  syntax:
    content: public Line SegmentAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: the segment index in the polygon, if out of range is null
    return:
      type: LagaUnity.Line
      description: The segment as Line
    content.vb: Public Function SegmentAt(index As Integer) As Line
  overload: LagaUnity.Polygon.SegmentAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Polygon.SortPolygonPoints
  commentId: M:LagaUnity.Polygon.SortPolygonPoints
  id: SortPolygonPoints
  parent: LagaUnity.Polygon
  langs:
  - csharp
  - vb
  name: SortPolygonPoints()
  nameWithType: Polygon.SortPolygonPoints()
  fullName: LagaUnity.Polygon.SortPolygonPoints()
  type: Method
  source:
    id: SortPolygonPoints
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Polygon.cs
    startLine: 247
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nSort the points in the polygon\n"
  example: []
  syntax:
    content: public Polygon SortPolygonPoints()
    return:
      type: LagaUnity.Polygon
      description: Sorted list of vectors in the polygon by X, then Y
    content.vb: Public Function SortPolygonPoints As Polygon
  overload: LagaUnity.Polygon.SortPolygonPoints*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: LagaUnity
  commentId: N:LagaUnity
  name: LagaUnity
  nameWithType: LagaUnity
  fullName: LagaUnity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  commentId: T:System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Vectorf>
  nameWithType: ICollection<Vectorf>
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>
  nameWithType.vb: ICollection(Of Vectorf)
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf)
  name.vb: ICollection(Of Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}
  commentId: T:System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vectorf>
  nameWithType: IEnumerable<Vectorf>
  fullName: System.Collections.Generic.IEnumerable<LagaUnity.Vectorf>
  nameWithType.vb: IEnumerable(Of Vectorf)
  fullName.vb: System.Collections.Generic.IEnumerable(Of LagaUnity.Vectorf)
  name.vb: IEnumerable(Of Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: LagaUnity.Polygon.Count*
  commentId: Overload:LagaUnity.Polygon.Count
  name: Count
  nameWithType: Polygon.Count
  fullName: LagaUnity.Polygon.Count
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Count
  commentId: P:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Count
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Vectorf>.Count
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Count
  nameWithType.vb: ICollection(Of Vectorf).Count
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: LagaUnity.Polygon.IsReadOnly*
  commentId: Overload:LagaUnity.Polygon.IsReadOnly
  name: IsReadOnly
  nameWithType: Polygon.IsReadOnly
  fullName: LagaUnity.Polygon.IsReadOnly
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.IsReadOnly
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Vectorf>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.IsReadOnly
  nameWithType.vb: ICollection(Of Vectorf).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: LagaUnity.Polygon.Add*
  commentId: Overload:LagaUnity.Polygon.Add
  name: Add
  nameWithType: Polygon.Add
  fullName: LagaUnity.Polygon.Add
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Add(LagaUnity.Vectorf)
  commentId: M:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Add(LagaUnity.Vectorf)
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Vectorf)
  nameWithType: ICollection<Vectorf>.Add(Vectorf)
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Add(LagaUnity.Vectorf)
  nameWithType.vb: ICollection(Of Vectorf).Add(Vectorf)
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Add(LagaUnity.Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Vectorf>.Add
    fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Vectorf).Add
    fullName: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Vectorf
  commentId: T:LagaUnity.Vectorf
  parent: LagaUnity
  name: Vectorf
  nameWithType: Vectorf
  fullName: LagaUnity.Vectorf
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.Clear*
  commentId: Overload:LagaUnity.Polygon.Clear
  name: Clear
  nameWithType: Polygon.Clear
  fullName: LagaUnity.Polygon.Clear
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Clear
  commentId: M:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Clear
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Vectorf>.Clear()
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Clear()
  nameWithType.vb: ICollection(Of Vectorf).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Vectorf>.Clear
    fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Vectorf).Clear
    fullName: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.Contains*
  commentId: Overload:LagaUnity.Polygon.Contains
  name: Contains
  nameWithType: Polygon.Contains
  fullName: LagaUnity.Polygon.Contains
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Contains(LagaUnity.Vectorf)
  commentId: M:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Contains(LagaUnity.Vectorf)
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Vectorf)
  nameWithType: ICollection<Vectorf>.Contains(Vectorf)
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Contains(LagaUnity.Vectorf)
  nameWithType.vb: ICollection(Of Vectorf).Contains(Vectorf)
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Contains(LagaUnity.Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Vectorf>.Contains
    fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Vectorf).Contains
    fullName: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: LagaUnity.Polygon.CopyTo*
  commentId: Overload:LagaUnity.Polygon.CopyTo
  name: CopyTo
  nameWithType: Polygon.CopyTo
  fullName: LagaUnity.Polygon.CopyTo
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.CopyTo(LagaUnity.Vectorf[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.CopyTo(LagaUnity.Vectorf[],System.Int32)
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Vectorf[], Int32)
  nameWithType: ICollection<Vectorf>.CopyTo(Vectorf[], Int32)
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.CopyTo(LagaUnity.Vectorf[], System.Int32)
  nameWithType.vb: ICollection(Of Vectorf).CopyTo(Vectorf(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).CopyTo(LagaUnity.Vectorf(), System.Int32)
  name.vb: CopyTo(Vectorf(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Vectorf>.CopyTo
    fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Vectorf).CopyTo
    fullName: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Vectorf[]
  isExternal: true
  name: Vectorf[]
  nameWithType: Vectorf[]
  fullName: LagaUnity.Vectorf[]
  nameWithType.vb: Vectorf()
  fullName.vb: LagaUnity.Vectorf()
  name.vb: Vectorf()
  spec.csharp:
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.GetEnumerator*
  commentId: Overload:LagaUnity.Polygon.GetEnumerator
  name: GetEnumerator
  nameWithType: Polygon.GetEnumerator
  fullName: LagaUnity.Polygon.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{LagaUnity.Vectorf}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Vectorf>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<LagaUnity.Vectorf>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Vectorf).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of LagaUnity.Vectorf).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Vectorf>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<LagaUnity.Vectorf>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Vectorf).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of LagaUnity.Vectorf).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{LagaUnity.Vectorf}
  commentId: T:System.Collections.Generic.IEnumerator{LagaUnity.Vectorf}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Vectorf>
  nameWithType: IEnumerator<Vectorf>
  fullName: System.Collections.Generic.IEnumerator<LagaUnity.Vectorf>
  nameWithType.vb: IEnumerator(Of Vectorf)
  fullName.vb: System.Collections.Generic.IEnumerator(Of LagaUnity.Vectorf)
  name.vb: IEnumerator(Of Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.Remove*
  commentId: Overload:LagaUnity.Polygon.Remove
  name: Remove
  nameWithType: Polygon.Remove
  fullName: LagaUnity.Polygon.Remove
- uid: System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Remove(LagaUnity.Vectorf)
  commentId: M:System.Collections.Generic.ICollection{LagaUnity.Vectorf}.Remove(LagaUnity.Vectorf)
  parent: System.Collections.Generic.ICollection{LagaUnity.Vectorf}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Vectorf)
  nameWithType: ICollection<Vectorf>.Remove(Vectorf)
  fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Remove(LagaUnity.Vectorf)
  nameWithType.vb: ICollection(Of Vectorf).Remove(Vectorf)
  fullName.vb: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Remove(LagaUnity.Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Vectorf>.Remove
    fullName: System.Collections.Generic.ICollection<LagaUnity.Vectorf>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Vectorf).Remove
    fullName: System.Collections.Generic.ICollection(Of LagaUnity.Vectorf).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:LagaUnity.Polygon.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Polygon.IEnumerable.GetEnumerator
  fullName: LagaUnity.Polygon.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Polygon.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: LagaUnity.Polygon.#ctor*
  commentId: Overload:LagaUnity.Polygon.#ctor
  name: Polygon
  nameWithType: Polygon.Polygon
  fullName: LagaUnity.Polygon.Polygon
- uid: LagaUnity.Polygon.VectorList*
  commentId: Overload:LagaUnity.Polygon.VectorList
  name: VectorList
  nameWithType: Polygon.VectorList
  fullName: LagaUnity.Polygon.VectorList
- uid: System.Collections.Generic.List{LagaUnity.Vectorf}
  commentId: T:System.Collections.Generic.List{LagaUnity.Vectorf}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vectorf>
  nameWithType: List<Vectorf>
  fullName: System.Collections.Generic.List<LagaUnity.Vectorf>
  nameWithType.vb: List(Of Vectorf)
  fullName.vb: System.Collections.Generic.List(Of LagaUnity.Vectorf)
  name.vb: List(Of Vectorf)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LagaUnity.Vectorf
    name: Vectorf
    nameWithType: Vectorf
    fullName: LagaUnity.Vectorf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Polygon.UpdateDraw*
  commentId: Overload:LagaUnity.Polygon.UpdateDraw
  name: UpdateDraw
  nameWithType: Polygon.UpdateDraw
  fullName: LagaUnity.Polygon.UpdateDraw
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: LagaUnity.Polygon.Area*
  commentId: Overload:LagaUnity.Polygon.Area
  name: Area
  nameWithType: Polygon.Area
  fullName: LagaUnity.Polygon.Area
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: LagaUnity.Polygon.Length*
  commentId: Overload:LagaUnity.Polygon.Length
  name: Length
  nameWithType: Polygon.Length
  fullName: LagaUnity.Polygon.Length
- uid: LagaUnity.Polygon.Center*
  commentId: Overload:LagaUnity.Polygon.Center
  name: Center
  nameWithType: Polygon.Center
  fullName: LagaUnity.Polygon.Center
- uid: LagaUnity.Polygon.IsConvex*
  commentId: Overload:LagaUnity.Polygon.IsConvex
  name: IsConvex
  nameWithType: Polygon.IsConvex
  fullName: LagaUnity.Polygon.IsConvex
- uid: LagaUnity.Polygon.SegmentAt*
  commentId: Overload:LagaUnity.Polygon.SegmentAt
  name: SegmentAt
  nameWithType: Polygon.SegmentAt
  fullName: LagaUnity.Polygon.SegmentAt
- uid: LagaUnity.Line
  commentId: T:LagaUnity.Line
  parent: LagaUnity
  name: Line
  nameWithType: Line
  fullName: LagaUnity.Line
- uid: LagaUnity.Polygon.SortPolygonPoints*
  commentId: Overload:LagaUnity.Polygon.SortPolygonPoints
  name: SortPolygonPoints
  nameWithType: Polygon.SortPolygonPoints
  fullName: LagaUnity.Polygon.SortPolygonPoints
- uid: LagaUnity.Polygon
  commentId: T:LagaUnity.Polygon
  parent: LagaUnity
  name: Polygon
  nameWithType: Polygon
  fullName: LagaUnity.Polygon
