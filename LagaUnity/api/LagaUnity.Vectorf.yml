### YamlMime:ManagedReference
items:
- uid: LagaUnity.Vectorf
  commentId: T:LagaUnity.Vectorf
  id: Vectorf
  parent: LagaUnity
  children:
  - LagaUnity.Vectorf.#ctor(System.Single,System.Single,System.Single)
  - LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.ComponentProjectTo(LagaUnity.Vectorf)
  - LagaUnity.Vectorf.CrossProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.CrossProductLength(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.DistanceTo(LagaUnity.Vectorf)
  - LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.Normalize
  - LagaUnity.Vectorf.op_Addition(LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.op_Multiply(LagaUnity.Vectorf,System.Single)
  - LagaUnity.Vectorf.op_Subtraction(LagaUnity.Vectorf,LagaUnity.Vectorf)
  - LagaUnity.Vectorf.OrthogonalTo(LagaUnity.Vectorf)
  - LagaUnity.Vectorf.ToString
  - LagaUnity.Vectorf.ToVector3
  - LagaUnity.Vectorf.X
  - LagaUnity.Vectorf.Y
  - LagaUnity.Vectorf.Z
  langs:
  - csharp
  - vb
  name: Vectorf
  nameWithType: Vectorf
  fullName: LagaUnity.Vectorf
  type: Struct
  source:
    id: Vectorf
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 8
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nVector struct\n"
  example: []
  syntax:
    content: public struct Vectorf
    content.vb: Public Structure Vectorf
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: LagaUnity.Vectorf.X
  commentId: F:LagaUnity.Vectorf.X
  id: X
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vectorf.X
  fullName: LagaUnity.Vectorf.X
  type: Field
  source:
    id: X
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 14
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nX coordinate\n"
  example: []
  syntax:
    content: public float X
    return:
      type: System.Single
    content.vb: Public X As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.Y
  commentId: F:LagaUnity.Vectorf.Y
  id: Y
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vectorf.Y
  fullName: LagaUnity.Vectorf.Y
  type: Field
  source:
    id: Y
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 18
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nY coordinate\n"
  example: []
  syntax:
    content: public float Y
    return:
      type: System.Single
    content.vb: Public Y As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.Z
  commentId: F:LagaUnity.Vectorf.Z
  id: Z
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vectorf.Z
  fullName: LagaUnity.Vectorf.Z
  type: Field
  source:
    id: Z
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 22
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nZ coordinate\n"
  example: []
  syntax:
    content: public float Z
    return:
      type: System.Single
    content.vb: Public Z As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.#ctor(System.Single,System.Single,System.Single)
  commentId: M:LagaUnity.Vectorf.#ctor(System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single)'
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Vectorf(Single, Single, Single)
  nameWithType: Vectorf.Vectorf(Single, Single, Single)
  fullName: LagaUnity.Vectorf.Vectorf(System.Single, System.Single, System.Single)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 30
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCreate a Vectorf\n"
  example: []
  syntax:
    content: public Vectorf(float X, float Y, float Z)
    parameters:
    - id: X
      type: System.Single
      description: X coordinate
    - id: Y
      type: System.Single
      description: Y coordinate
    - id: Z
      type: System.Single
      description: Z coordinate
    content.vb: Public Sub New(X As Single, Y As Single, Z As Single)
  overload: LagaUnity.Vectorf.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.ToVector3
  commentId: P:LagaUnity.Vectorf.ToVector3
  id: ToVector3
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: ToVector3
  nameWithType: Vectorf.ToVector3
  fullName: LagaUnity.Vectorf.ToVector3
  type: Property
  source:
    id: ToVector3
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 41
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCast Vectorf to Vector3\n"
  example: []
  syntax:
    content: public readonly Vector3 ToVector3 { get; }
    parameters: []
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public ReadOnly Property ToVector3 As Vector3
  overload: LagaUnity.Vectorf.ToVector3*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: LagaUnity.Vectorf.OrthogonalTo(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.OrthogonalTo(LagaUnity.Vectorf)
  id: OrthogonalTo(LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: OrthogonalTo(Vectorf)
  nameWithType: Vectorf.OrthogonalTo(Vectorf)
  fullName: LagaUnity.Vectorf.OrthogonalTo(LagaUnity.Vectorf)
  type: Method
  source:
    id: OrthogonalTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 51
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nCreates a orthogonal vector\n"
  example: []
  syntax:
    content: public static Vectorf OrthogonalTo(Vectorf vector)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: Vector
    return:
      type: LagaUnity.Vectorf
      description: Vector
    content.vb: Public Shared Function OrthogonalTo(vector As Vectorf) As Vectorf
  overload: LagaUnity.Vectorf.OrthogonalTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.CrossProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.CrossProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: CrossProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: CrossProduct(Vectorf, Vectorf)
  nameWithType: Vectorf.CrossProduct(Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.CrossProduct(LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: CrossProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 69
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nVector CrossProduct operation\n"
  example: []
  syntax:
    content: public static Vectorf CrossProduct(Vectorf vectorA, Vectorf vectorB)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: vector B
    return:
      type: LagaUnity.Vectorf
      description: The vector
    content.vb: Public Shared Function CrossProduct(vectorA As Vectorf, vectorB As Vectorf) As Vectorf
  overload: LagaUnity.Vectorf.CrossProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.CrossProductLength(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.CrossProductLength(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: CrossProductLength(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: CrossProductLength(Vectorf, Vectorf, Vectorf)
  nameWithType: Vectorf.CrossProductLength(Vectorf, Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.CrossProductLength(LagaUnity.Vectorf, LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: CrossProductLength
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 86
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nReturn the cross product length\n| B x BC | = |AB| * |BC| * Sin(theta)\n"
  example: []
  syntax:
    content: public static float CrossProductLength(Vectorf vectorA, Vectorf vectorB, Vectorf vectorC)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    - id: vectorC
      type: LagaUnity.Vectorf
      description: Vector C
    return:
      type: System.Single
      description: Z coordinate of the cross product
    content.vb: Public Shared Function CrossProductLength(vectorA As Vectorf, vectorB As Vectorf, vectorC As Vectorf) As Single
  overload: LagaUnity.Vectorf.CrossProductLength*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.ComponentProjectTo(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.ComponentProjectTo(LagaUnity.Vectorf)
  id: ComponentProjectTo(LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: ComponentProjectTo(Vectorf)
  nameWithType: Vectorf.ComponentProjectTo(Vectorf)
  fullName: LagaUnity.Vectorf.ComponentProjectTo(LagaUnity.Vectorf)
  type: Method
  source:
    id: ComponentProjectTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 101
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nProject to vector base B\n"
  example: []
  syntax:
    content: public Vectorf ComponentProjectTo(Vectorf vectorB)
    parameters:
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector base
    return:
      type: LagaUnity.Vectorf
      description: Vector
    content.vb: Public Function ComponentProjectTo(vectorB As Vectorf) As Vectorf
  overload: LagaUnity.Vectorf.ComponentProjectTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.DistanceTo(LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.DistanceTo(LagaUnity.Vectorf)
  id: DistanceTo(LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: DistanceTo(Vectorf)
  nameWithType: Vectorf.DistanceTo(Vectorf)
  fullName: LagaUnity.Vectorf.DistanceTo(LagaUnity.Vectorf)
  type: Method
  source:
    id: DistanceTo
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 114
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nDistance\n"
  example: []
  syntax:
    content: public float DistanceTo(Vectorf vector)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: vector to test
    return:
      type: System.Single
      description: float
    content.vb: Public Function DistanceTo(vector As Vectorf) As Single
  overload: LagaUnity.Vectorf.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.Normalize
  commentId: M:LagaUnity.Vectorf.Normalize
  id: Normalize
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vectorf.Normalize()
  fullName: LagaUnity.Vectorf.Normalize()
  type: Method
  source:
    id: Normalize
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 122
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nNormalize the vector to 1\n"
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize
  overload: LagaUnity.Vectorf.Normalize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: DotProduct(Vectorf, Vectorf)
  nameWithType: Vectorf.DotProduct(Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: DotProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 134
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nDot product\n"
  example: []
  syntax:
    content: public static float DotProduct(Vectorf vectorA, Vectorf vectorB)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    return:
      type: System.Single
      description: float
    content.vb: Public Shared Function DotProduct(vectorA As Vectorf, vectorB As Vectorf) As Single
  overload: LagaUnity.Vectorf.DotProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: DotProduct(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: DotProduct(Vectorf, Vectorf, Vectorf)
  nameWithType: Vectorf.DotProduct(Vectorf, Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.DotProduct(LagaUnity.Vectorf, LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: DotProduct
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 146
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nDot Product AB · BC\n"
  example: []
  syntax:
    content: public static float DotProduct(Vectorf vectorA, Vectorf vectorB, Vectorf vectorC)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: ''
    - id: vectorB
      type: LagaUnity.Vectorf
      description: ''
    - id: vectorC
      type: LagaUnity.Vectorf
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function DotProduct(vectorA As Vectorf, vectorB As Vectorf, vectorC As Vectorf) As Single
  overload: LagaUnity.Vectorf.DotProduct*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: Angle(LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Angle(Vectorf, Vectorf)
  nameWithType: Vectorf.Angle(Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.Angle(LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: Angle
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 162
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nAngle\n"
  example: []
  syntax:
    content: public static float Angle(Vectorf vectorA, Vectorf vectorB)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    return:
      type: System.Single
      description: float
    content.vb: Public Shared Function Angle(vectorA As Vectorf, vectorB As Vectorf) As Single
  overload: LagaUnity.Vectorf.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.Angle(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: Angle(LagaUnity.Vectorf,LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Angle(Vectorf, Vectorf, Vectorf)
  nameWithType: Vectorf.Angle(Vectorf, Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.Angle(LagaUnity.Vectorf, LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Method
  source:
    id: Angle
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 180
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nABC angle between PI and -PI\n"
  example: []
  syntax:
    content: public static float Angle(Vectorf vectorA, Vectorf vectorB, Vectorf vectorC)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    - id: vectorC
      type: LagaUnity.Vectorf
      description: Vector C
    return:
      type: System.Single
      description: double
    content.vb: Public Shared Function Angle(vectorA As Vectorf, vectorB As Vectorf, vectorC As Vectorf) As Single
  overload: LagaUnity.Vectorf.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.op_Addition(LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.op_Addition(LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: op_Addition(LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Addition(Vectorf, Vectorf)
  nameWithType: Vectorf.Addition(Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.Addition(LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Operator
  source:
    id: op_Addition
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 198
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nAddition\n"
  example: []
  syntax:
    content: public static Vectorf operator +(Vectorf vectorA, Vectorf vectorB)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    return:
      type: LagaUnity.Vectorf
      description: Vector
    content.vb: Public Shared Operator +(vectorA As Vectorf, vectorB As Vectorf) As Vectorf
  overload: LagaUnity.Vectorf.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.op_Subtraction(LagaUnity.Vectorf,LagaUnity.Vectorf)
  commentId: M:LagaUnity.Vectorf.op_Subtraction(LagaUnity.Vectorf,LagaUnity.Vectorf)
  id: op_Subtraction(LagaUnity.Vectorf,LagaUnity.Vectorf)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Subtraction(Vectorf, Vectorf)
  nameWithType: Vectorf.Subtraction(Vectorf, Vectorf)
  fullName: LagaUnity.Vectorf.Subtraction(LagaUnity.Vectorf, LagaUnity.Vectorf)
  type: Operator
  source:
    id: op_Subtraction
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 212
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nSubstraction\n"
  example: []
  syntax:
    content: public static Vectorf operator -(Vectorf vectorA, Vectorf vectorB)
    parameters:
    - id: vectorA
      type: LagaUnity.Vectorf
      description: Vector A
    - id: vectorB
      type: LagaUnity.Vectorf
      description: Vector B
    return:
      type: LagaUnity.Vectorf
      description: Vector
    content.vb: Public Shared Operator -(vectorA As Vectorf, vectorB As Vectorf) As Vectorf
  overload: LagaUnity.Vectorf.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.op_Multiply(LagaUnity.Vectorf,System.Single)
  commentId: M:LagaUnity.Vectorf.op_Multiply(LagaUnity.Vectorf,System.Single)
  id: op_Multiply(LagaUnity.Vectorf,System.Single)
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: Multiply(Vectorf, Single)
  nameWithType: Vectorf.Multiply(Vectorf, Single)
  fullName: LagaUnity.Vectorf.Multiply(LagaUnity.Vectorf, System.Single)
  type: Operator
  source:
    id: op_Multiply
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 226
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nScale multuplication\n"
  example: []
  syntax:
    content: public static Vectorf operator *(Vectorf vector, float factor)
    parameters:
    - id: vector
      type: LagaUnity.Vectorf
      description: Vector to scale
    - id: factor
      type: System.Single
      description: factor
    return:
      type: LagaUnity.Vectorf
      description: Vector
    content.vb: Public Shared Operator *(vector As Vectorf, factor As Single) As Vectorf
  overload: LagaUnity.Vectorf.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: LagaUnity.Vectorf.ToString
  commentId: M:LagaUnity.Vectorf.ToString
  id: ToString
  parent: LagaUnity.Vectorf
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vectorf.ToString()
  fullName: LagaUnity.Vectorf.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\delab\Documents\GitHub\Laga\LagaUnity\Vectorf.cs
    startLine: 238
  assemblies:
  - LagaUnity
  namespace: LagaUnity
  summary: "\nPrint vector data\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: string
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: LagaUnity.Vectorf.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: LagaUnity
  commentId: N:LagaUnity
  name: LagaUnity
  nameWithType: LagaUnity
  fullName: LagaUnity
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: LagaUnity.Vectorf.#ctor*
  commentId: Overload:LagaUnity.Vectorf.#ctor
  name: Vectorf
  nameWithType: Vectorf.Vectorf
  fullName: LagaUnity.Vectorf.Vectorf
- uid: LagaUnity.Vectorf.ToVector3*
  commentId: Overload:LagaUnity.Vectorf.ToVector3
  name: ToVector3
  nameWithType: Vectorf.ToVector3
  fullName: LagaUnity.Vectorf.ToVector3
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: LagaUnity.Vectorf.OrthogonalTo*
  commentId: Overload:LagaUnity.Vectorf.OrthogonalTo
  name: OrthogonalTo
  nameWithType: Vectorf.OrthogonalTo
  fullName: LagaUnity.Vectorf.OrthogonalTo
- uid: LagaUnity.Vectorf
  commentId: T:LagaUnity.Vectorf
  parent: LagaUnity
  name: Vectorf
  nameWithType: Vectorf
  fullName: LagaUnity.Vectorf
- uid: LagaUnity.Vectorf.CrossProduct*
  commentId: Overload:LagaUnity.Vectorf.CrossProduct
  name: CrossProduct
  nameWithType: Vectorf.CrossProduct
  fullName: LagaUnity.Vectorf.CrossProduct
- uid: LagaUnity.Vectorf.CrossProductLength*
  commentId: Overload:LagaUnity.Vectorf.CrossProductLength
  name: CrossProductLength
  nameWithType: Vectorf.CrossProductLength
  fullName: LagaUnity.Vectorf.CrossProductLength
- uid: LagaUnity.Vectorf.ComponentProjectTo*
  commentId: Overload:LagaUnity.Vectorf.ComponentProjectTo
  name: ComponentProjectTo
  nameWithType: Vectorf.ComponentProjectTo
  fullName: LagaUnity.Vectorf.ComponentProjectTo
- uid: LagaUnity.Vectorf.DistanceTo*
  commentId: Overload:LagaUnity.Vectorf.DistanceTo
  name: DistanceTo
  nameWithType: Vectorf.DistanceTo
  fullName: LagaUnity.Vectorf.DistanceTo
- uid: LagaUnity.Vectorf.Normalize*
  commentId: Overload:LagaUnity.Vectorf.Normalize
  name: Normalize
  nameWithType: Vectorf.Normalize
  fullName: LagaUnity.Vectorf.Normalize
- uid: LagaUnity.Vectorf.DotProduct*
  commentId: Overload:LagaUnity.Vectorf.DotProduct
  name: DotProduct
  nameWithType: Vectorf.DotProduct
  fullName: LagaUnity.Vectorf.DotProduct
- uid: LagaUnity.Vectorf.Angle*
  commentId: Overload:LagaUnity.Vectorf.Angle
  name: Angle
  nameWithType: Vectorf.Angle
  fullName: LagaUnity.Vectorf.Angle
- uid: LagaUnity.Vectorf.op_Addition*
  commentId: Overload:LagaUnity.Vectorf.op_Addition
  name: Addition
  nameWithType: Vectorf.Addition
  fullName: LagaUnity.Vectorf.Addition
- uid: LagaUnity.Vectorf.op_Subtraction*
  commentId: Overload:LagaUnity.Vectorf.op_Subtraction
  name: Subtraction
  nameWithType: Vectorf.Subtraction
  fullName: LagaUnity.Vectorf.Subtraction
- uid: LagaUnity.Vectorf.op_Multiply*
  commentId: Overload:LagaUnity.Vectorf.op_Multiply
  name: Multiply
  nameWithType: Vectorf.Multiply
  fullName: LagaUnity.Vectorf.Multiply
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: LagaUnity.Vectorf.ToString*
  commentId: Overload:LagaUnity.Vectorf.ToString
  name: ToString
  nameWithType: Vectorf.ToString
  fullName: LagaUnity.Vectorf.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
